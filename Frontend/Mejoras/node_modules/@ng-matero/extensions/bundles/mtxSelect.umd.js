(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('@angular/forms'), require('@ng-select/ng-select'), require('@angular/material/form-field'), require('@angular/cdk/coercion'), require('@angular/cdk/a11y'), require('rxjs'), require('rxjs/operators')) :
    typeof define === 'function' && define.amd ? define('@ng-matero/extensions/select', ['exports', '@angular/core', '@angular/common', '@angular/forms', '@ng-select/ng-select', '@angular/material/form-field', '@angular/cdk/coercion', '@angular/cdk/a11y', 'rxjs', 'rxjs/operators'], factory) :
    (global = global || self, factory((global['ng-matero'] = global['ng-matero'] || {}, global['ng-matero'].extensions = global['ng-matero'].extensions || {}, global['ng-matero'].extensions.select = {}), global.ng.core, global.ng.common, global.ng.forms, global['ng-select'], global.ng.material.formField, global.ng.cdk.coercion, global.ng.cdk.a11y, global.rxjs, global.rxjs.operators));
}(this, (function (exports, core, common, forms, ngSelect, formField, coercion, a11y, rxjs, operators) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function __rest(s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }

    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }

    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); }
    }

    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
    }

    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    function __exportStar(m, exports) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }

    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m) return m.call(o);
        if (o && typeof o.length === "number") return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }

    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    }

    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    };

    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }

    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
    }

    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }

    function __asyncValues(o) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
    }

    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
        return cooked;
    };

    function __importStar(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
        result.default = mod;
        return result;
    }

    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }

    function __classPrivateFieldGet(receiver, privateMap) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to get private field on non-instance");
        }
        return privateMap.get(receiver);
    }

    function __classPrivateFieldSet(receiver, privateMap, value) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to set private field on non-instance");
        }
        privateMap.set(receiver, value);
        return value;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: templates.directive.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var MtxSelectOptionTemplateDirective = /** @class */ (function () {
        function MtxSelectOptionTemplateDirective(template) {
            this.template = template;
        }
        MtxSelectOptionTemplateDirective.decorators = [
            { type: core.Directive, args: [{ selector: '[ng-option-tmp]' },] }
        ];
        /** @nocollapse */
        MtxSelectOptionTemplateDirective.ctorParameters = function () { return [
            { type: core.TemplateRef }
        ]; };
        return MtxSelectOptionTemplateDirective;
    }());
    if (false) {
        /** @type {?} */
        MtxSelectOptionTemplateDirective.prototype.template;
    }
    var MtxSelectOptgroupTemplateDirective = /** @class */ (function () {
        function MtxSelectOptgroupTemplateDirective(template) {
            this.template = template;
        }
        MtxSelectOptgroupTemplateDirective.decorators = [
            { type: core.Directive, args: [{ selector: '[ng-optgroup-tmp]' },] }
        ];
        /** @nocollapse */
        MtxSelectOptgroupTemplateDirective.ctorParameters = function () { return [
            { type: core.TemplateRef }
        ]; };
        return MtxSelectOptgroupTemplateDirective;
    }());
    if (false) {
        /** @type {?} */
        MtxSelectOptgroupTemplateDirective.prototype.template;
    }
    var MtxSelectLabelTemplateDirective = /** @class */ (function () {
        function MtxSelectLabelTemplateDirective(template) {
            this.template = template;
        }
        MtxSelectLabelTemplateDirective.decorators = [
            { type: core.Directive, args: [{ selector: '[ng-label-tmp]' },] }
        ];
        /** @nocollapse */
        MtxSelectLabelTemplateDirective.ctorParameters = function () { return [
            { type: core.TemplateRef }
        ]; };
        return MtxSelectLabelTemplateDirective;
    }());
    if (false) {
        /** @type {?} */
        MtxSelectLabelTemplateDirective.prototype.template;
    }
    var MtxSelectMultiLabelTemplateDirective = /** @class */ (function () {
        function MtxSelectMultiLabelTemplateDirective(template) {
            this.template = template;
        }
        MtxSelectMultiLabelTemplateDirective.decorators = [
            { type: core.Directive, args: [{ selector: '[ng-multi-label-tmp]' },] }
        ];
        /** @nocollapse */
        MtxSelectMultiLabelTemplateDirective.ctorParameters = function () { return [
            { type: core.TemplateRef }
        ]; };
        return MtxSelectMultiLabelTemplateDirective;
    }());
    if (false) {
        /** @type {?} */
        MtxSelectMultiLabelTemplateDirective.prototype.template;
    }
    var MtxSelectHeaderTemplateDirective = /** @class */ (function () {
        function MtxSelectHeaderTemplateDirective(template) {
            this.template = template;
        }
        MtxSelectHeaderTemplateDirective.decorators = [
            { type: core.Directive, args: [{ selector: '[ng-header-tmp]' },] }
        ];
        /** @nocollapse */
        MtxSelectHeaderTemplateDirective.ctorParameters = function () { return [
            { type: core.TemplateRef }
        ]; };
        return MtxSelectHeaderTemplateDirective;
    }());
    if (false) {
        /** @type {?} */
        MtxSelectHeaderTemplateDirective.prototype.template;
    }
    var MtxSelectFooterTemplateDirective = /** @class */ (function () {
        function MtxSelectFooterTemplateDirective(template) {
            this.template = template;
        }
        MtxSelectFooterTemplateDirective.decorators = [
            { type: core.Directive, args: [{ selector: '[ng-footer-tmp]' },] }
        ];
        /** @nocollapse */
        MtxSelectFooterTemplateDirective.ctorParameters = function () { return [
            { type: core.TemplateRef }
        ]; };
        return MtxSelectFooterTemplateDirective;
    }());
    if (false) {
        /** @type {?} */
        MtxSelectFooterTemplateDirective.prototype.template;
    }
    var MtxSelectNotFoundTemplateDirective = /** @class */ (function () {
        function MtxSelectNotFoundTemplateDirective(template) {
            this.template = template;
        }
        MtxSelectNotFoundTemplateDirective.decorators = [
            { type: core.Directive, args: [{ selector: '[ng-notfound-tmp]' },] }
        ];
        /** @nocollapse */
        MtxSelectNotFoundTemplateDirective.ctorParameters = function () { return [
            { type: core.TemplateRef }
        ]; };
        return MtxSelectNotFoundTemplateDirective;
    }());
    if (false) {
        /** @type {?} */
        MtxSelectNotFoundTemplateDirective.prototype.template;
    }
    var MtxSelectTypeToSearchTemplateDirective = /** @class */ (function () {
        function MtxSelectTypeToSearchTemplateDirective(template) {
            this.template = template;
        }
        MtxSelectTypeToSearchTemplateDirective.decorators = [
            { type: core.Directive, args: [{ selector: '[ng-typetosearch-tmp]' },] }
        ];
        /** @nocollapse */
        MtxSelectTypeToSearchTemplateDirective.ctorParameters = function () { return [
            { type: core.TemplateRef }
        ]; };
        return MtxSelectTypeToSearchTemplateDirective;
    }());
    if (false) {
        /** @type {?} */
        MtxSelectTypeToSearchTemplateDirective.prototype.template;
    }
    var MtxSelectLoadingTextTemplateDirective = /** @class */ (function () {
        function MtxSelectLoadingTextTemplateDirective(template) {
            this.template = template;
        }
        MtxSelectLoadingTextTemplateDirective.decorators = [
            { type: core.Directive, args: [{ selector: '[ng-loadingtext-tmp]' },] }
        ];
        /** @nocollapse */
        MtxSelectLoadingTextTemplateDirective.ctorParameters = function () { return [
            { type: core.TemplateRef }
        ]; };
        return MtxSelectLoadingTextTemplateDirective;
    }());
    if (false) {
        /** @type {?} */
        MtxSelectLoadingTextTemplateDirective.prototype.template;
    }
    var MtxSelectTagTemplateDirective = /** @class */ (function () {
        function MtxSelectTagTemplateDirective(template) {
            this.template = template;
        }
        MtxSelectTagTemplateDirective.decorators = [
            { type: core.Directive, args: [{ selector: '[ng-tag-tmp]' },] }
        ];
        /** @nocollapse */
        MtxSelectTagTemplateDirective.ctorParameters = function () { return [
            { type: core.TemplateRef }
        ]; };
        return MtxSelectTagTemplateDirective;
    }());
    if (false) {
        /** @type {?} */
        MtxSelectTagTemplateDirective.prototype.template;
    }
    var MtxSelectLoadingSpinnerTemplateDirective = /** @class */ (function () {
        function MtxSelectLoadingSpinnerTemplateDirective(template) {
            this.template = template;
        }
        MtxSelectLoadingSpinnerTemplateDirective.decorators = [
            { type: core.Directive, args: [{ selector: '[ng-loadingspinner-tmp]' },] }
        ];
        /** @nocollapse */
        MtxSelectLoadingSpinnerTemplateDirective.ctorParameters = function () { return [
            { type: core.TemplateRef }
        ]; };
        return MtxSelectLoadingSpinnerTemplateDirective;
    }());
    if (false) {
        /** @type {?} */
        MtxSelectLoadingSpinnerTemplateDirective.prototype.template;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: option.component.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var MtxOptionComponent = /** @class */ (function () {
        function MtxOptionComponent(elementRef) {
            this.elementRef = elementRef;
            this.stateChange$ = new rxjs.Subject();
            this._disabled = false;
        }
        Object.defineProperty(MtxOptionComponent.prototype, "disabled", {
            get: /**
             * @return {?}
             */
            function () {
                return this._disabled;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._disabled = this._isDisabled(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MtxOptionComponent.prototype, "label", {
            get: /**
             * @return {?}
             */
            function () {
                return (this.elementRef.nativeElement.textContent || '').trim();
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} changes
         * @return {?}
         */
        MtxOptionComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
        function (changes) {
            if (changes.disabled) {
                this.stateChange$.next({
                    value: this.value,
                    disabled: this._disabled,
                });
            }
        };
        /**
         * @return {?}
         */
        MtxOptionComponent.prototype.ngAfterViewChecked = /**
         * @return {?}
         */
        function () {
            if (this.label !== this._previousLabel) {
                this._previousLabel = this.label;
                this.stateChange$.next({
                    value: this.value,
                    disabled: this._disabled,
                    label: this.elementRef.nativeElement.innerHTML,
                });
            }
        };
        /**
         * @return {?}
         */
        MtxOptionComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
        function () {
            this.stateChange$.complete();
        };
        /**
         * @private
         * @param {?} value
         * @return {?}
         */
        MtxOptionComponent.prototype._isDisabled = /**
         * @private
         * @param {?} value
         * @return {?}
         */
        function (value) {
            return value != null && "" + value !== 'false';
        };
        MtxOptionComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'mtx-option',
                        exportAs: 'mtxOption',
                        changeDetection: core.ChangeDetectionStrategy.OnPush,
                        template: "<ng-content></ng-content>"
                    }] }
        ];
        /** @nocollapse */
        MtxOptionComponent.ctorParameters = function () { return [
            { type: core.ElementRef }
        ]; };
        MtxOptionComponent.propDecorators = {
            value: [{ type: core.Input }],
            disabled: [{ type: core.Input }]
        };
        return MtxOptionComponent;
    }());
    if (false) {
        /** @type {?} */
        MtxOptionComponent.prototype.value;
        /** @type {?} */
        MtxOptionComponent.prototype.stateChange$;
        /**
         * @type {?}
         * @private
         */
        MtxOptionComponent.prototype._disabled;
        /**
         * @type {?}
         * @private
         */
        MtxOptionComponent.prototype._previousLabel;
        /** @type {?} */
        MtxOptionComponent.prototype.elementRef;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: select.component.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var nextUniqueId = 0;
    var MtxSelectComponent = /** @class */ (function () {
        function MtxSelectComponent(_focusMonitor, _elementRef, _changeDetectorRef, ngControl) {
            var _this = this;
            this._focusMonitor = _focusMonitor;
            this._elementRef = _elementRef;
            this._changeDetectorRef = _changeDetectorRef;
            this.ngControl = ngControl;
            /**
             * MtxSelect options
             */
            this.addTag = false;
            this.addTagText = 'Add item';
            this.appearance = 'underline';
            this.closeOnSelect = true;
            this.clearAllText = 'Clear all';
            this.clearable = true;
            this.clearOnBackspace = true;
            this.dropdownPosition = 'auto';
            this.selectableGroup = false;
            this.selectableGroupAsModel = true;
            this.hideSelected = false;
            this.loading = false;
            this.loadingText = 'Loading...';
            this.labelForId = null;
            this.markFirst = true;
            this.multiple = false;
            this.notFoundText = 'No items found';
            this.searchable = true;
            this.readonly = false;
            this.searchFn = null;
            this.searchWhileComposing = true;
            this.clearSearchOnAdd = true;
            this.selectOnTab = false;
            this.trackByFn = null;
            this.inputAttrs = {};
            this.openOnEnter = true;
            this.minTermLength = 0;
            this.keyDownFn = (/**
             * @param {?} _
             * @return {?}
             */
            function (_) { return true; });
            this.virtualScroll = false;
            this.typeToSearchText = 'Type to search';
            this.blur = new core.EventEmitter();
            this.focus = new core.EventEmitter();
            this.change = new core.EventEmitter();
            this.open = new core.EventEmitter();
            this.close = new core.EventEmitter();
            this.search = new core.EventEmitter();
            this.clear = new core.EventEmitter();
            this.add = new core.EventEmitter();
            this.remove = new core.EventEmitter();
            this.scroll = new core.EventEmitter();
            this.scrollToEnd = new core.EventEmitter();
            this._items = [];
            this._destroy$ = new rxjs.Subject();
            this._value = null;
            /**
             * Implemented as part of MatFormFieldControl.
             */
            this.stateChanges = new rxjs.Subject();
            /**
             * Unique id for this input.
             */
            this._uid = "mtx-select-" + nextUniqueId++;
            this._focused = false;
            this._required = false;
            this._disabled = false;
            this.errorState = false;
            /**
             * A name for this control that can be used by `mat-form-field`.
             */
            this.controlType = 'mtx-select';
            /**
             * `View -> model callback called when value changes`
             */
            this._onChange = (/**
             * @return {?}
             */
            function () { });
            /**
             * `View -> model callback called when select has been touched`
             */
            this._onTouched = (/**
             * @return {?}
             */
            function () { });
            _focusMonitor.monitor(_elementRef, true).subscribe((/**
             * @param {?} origin
             * @return {?}
             */
            function (origin) {
                if (_this._focused && !origin) {
                    _this._onTouched();
                }
                _this._focused = !!origin;
                _this.stateChanges.next();
            }));
            if (this.ngControl != null) {
                this.ngControl.valueAccessor = this;
            }
        }
        Object.defineProperty(MtxSelectComponent.prototype, "items", {
            get: /**
             * @return {?}
             */
            function () {
                return this._items;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._itemsAreUsed = true;
                this._items = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MtxSelectComponent.prototype, "value", {
            /** Value of the select control. */
            get: /**
             * Value of the select control.
             * @return {?}
             */
            function () {
                return this._value;
            },
            set: /**
             * @param {?} newValue
             * @return {?}
             */
            function (newValue) {
                this._value = newValue;
                this._onChange(newValue);
                this.stateChanges.next();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MtxSelectComponent.prototype, "id", {
            /** Unique id of the element. */
            get: /**
             * Unique id of the element.
             * @return {?}
             */
            function () {
                return this._id;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._id = value || this._uid;
                this.stateChanges.next();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MtxSelectComponent.prototype, "placeholder", {
            /** Placeholder to be shown if value is empty. */
            get: /**
             * Placeholder to be shown if value is empty.
             * @return {?}
             */
            function () {
                return this._placeholder;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._placeholder = value;
                this.stateChanges.next();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MtxSelectComponent.prototype, "focused", {
            /** Whether the input is focused. */
            get: /**
             * Whether the input is focused.
             * @return {?}
             */
            function () {
                return this._focused;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MtxSelectComponent.prototype, "empty", {
            get: /**
             * @return {?}
             */
            function () {
                return !this.value || (Array.isArray(this.value) && this.value.length === 0);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MtxSelectComponent.prototype, "shouldLabelFloat", {
            get: /**
             * @return {?}
             */
            function () {
                return this.focused || !this.empty;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MtxSelectComponent.prototype, "required", {
            get: /**
             * @return {?}
             */
            function () {
                return this._required;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._required = coercion.coerceBooleanProperty(value);
                this.stateChanges.next();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MtxSelectComponent.prototype, "disabled", {
            get: /**
             * @return {?}
             */
            function () {
                return this._disabled;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._disabled = coercion.coerceBooleanProperty(value);
                this.readonly = this._disabled;
                this.stateChanges.next();
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        MtxSelectComponent.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
            // Fix compareWith warning of undefined value
            // https://github.com/ng-select/ng-select/issues/1537
            if (this.compareWith) {
                this.ngSelect.compareWith = this.compareWith;
            }
        };
        /**
         * @return {?}
         */
        MtxSelectComponent.prototype.ngAfterViewInit = /**
         * @return {?}
         */
        function () {
            if (!this._itemsAreUsed) {
                this._setItemsFromMtxOptions();
            }
        };
        /**
         * @return {?}
         */
        MtxSelectComponent.prototype.ngDoCheck = /**
         * @return {?}
         */
        function () {
            if (this.ngControl) {
                this.errorState = this.ngControl.invalid && this.ngControl.touched;
                this.stateChanges.next();
            }
        };
        /**
         * @return {?}
         */
        MtxSelectComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
        function () {
            this._destroy$.next();
            this._destroy$.complete();
            this.stateChanges.complete();
            this._focusMonitor.stopMonitoring(this._elementRef);
        };
        /** Implemented as part of MatFormFieldControl. */
        /**
         * Implemented as part of MatFormFieldControl.
         * @param {?} ids
         * @return {?}
         */
        MtxSelectComponent.prototype.setDescribedByIds = /**
         * Implemented as part of MatFormFieldControl.
         * @param {?} ids
         * @return {?}
         */
        function (ids) {
            this._ariaDescribedby = ids.join(' ');
        };
        /** Implemented as part of MatFormFieldControl. */
        /**
         * Implemented as part of MatFormFieldControl.
         * @param {?} isDisabled
         * @return {?}
         */
        MtxSelectComponent.prototype.setDisabledState = /**
         * Implemented as part of MatFormFieldControl.
         * @param {?} isDisabled
         * @return {?}
         */
        function (isDisabled) {
            this.disabled = isDisabled;
        };
        /** Implemented as part of MatFormFieldControl. */
        /**
         * Implemented as part of MatFormFieldControl.
         * @return {?}
         */
        MtxSelectComponent.prototype.onContainerClick = /**
         * Implemented as part of MatFormFieldControl.
         * @return {?}
         */
        function () { };
        /**
         * Sets the select's value. Part of the ControlValueAccessor interface
         * required to integrate with Angular's core forms API.
         *
         * @param value New value to be written to the model.
         */
        /**
         * Sets the select's value. Part of the ControlValueAccessor interface
         * required to integrate with Angular's core forms API.
         *
         * @param {?} value New value to be written to the model.
         * @return {?}
         */
        MtxSelectComponent.prototype.writeValue = /**
         * Sets the select's value. Part of the ControlValueAccessor interface
         * required to integrate with Angular's core forms API.
         *
         * @param {?} value New value to be written to the model.
         * @return {?}
         */
        function (value) {
            this._value = value;
            this._changeDetectorRef.markForCheck();
        };
        /**
         * Saves a callback function to be invoked when the select's value
         * changes from user input. Part of the ControlValueAccessor interface
         * required to integrate with Angular's core forms API.
         *
         * @param fn Callback to be triggered when the value changes.
         */
        /**
         * Saves a callback function to be invoked when the select's value
         * changes from user input. Part of the ControlValueAccessor interface
         * required to integrate with Angular's core forms API.
         *
         * @param {?} fn Callback to be triggered when the value changes.
         * @return {?}
         */
        MtxSelectComponent.prototype.registerOnChange = /**
         * Saves a callback function to be invoked when the select's value
         * changes from user input. Part of the ControlValueAccessor interface
         * required to integrate with Angular's core forms API.
         *
         * @param {?} fn Callback to be triggered when the value changes.
         * @return {?}
         */
        function (fn) {
            this._onChange = fn;
        };
        /**
         * Saves a callback function to be invoked when the select is blurred
         * by the user. Part of the ControlValueAccessor interface required
         * to integrate with Angular's core forms API.
         *
         * @param fn Callback to be triggered when the component has been touched.
         */
        /**
         * Saves a callback function to be invoked when the select is blurred
         * by the user. Part of the ControlValueAccessor interface required
         * to integrate with Angular's core forms API.
         *
         * @param {?} fn Callback to be triggered when the component has been touched.
         * @return {?}
         */
        MtxSelectComponent.prototype.registerOnTouched = /**
         * Saves a callback function to be invoked when the select is blurred
         * by the user. Part of the ControlValueAccessor interface required
         * to integrate with Angular's core forms API.
         *
         * @param {?} fn Callback to be triggered when the component has been touched.
         * @return {?}
         */
        function (fn) {
            this._onTouched = fn;
        };
        /** NgSelect: _setItemsFromNgOptions */
        /**
         * NgSelect: _setItemsFromNgOptions
         * @private
         * @return {?}
         */
        MtxSelectComponent.prototype._setItemsFromMtxOptions = /**
         * NgSelect: _setItemsFromNgOptions
         * @private
         * @return {?}
         */
        function () {
            var _this = this;
            /** @type {?} */
            var mapMtxOptions = (/**
             * @param {?} options
             * @return {?}
             */
            function (options) {
                _this.items = options.map((/**
                 * @param {?} option
                 * @return {?}
                 */
                function (option) { return ({
                    $ngOptionValue: option.value,
                    $ngOptionLabel: option.elementRef.nativeElement.innerHTML,
                    disabled: option.disabled,
                }); }));
                _this.ngSelect.itemsList.setItems(_this.items);
                if (_this.ngSelect.hasValue) {
                    _this.ngSelect.itemsList.mapSelectedItems();
                }
                _this.ngSelect.detectChanges();
            });
            /** @type {?} */
            var handleOptionChange = (/**
             * @return {?}
             */
            function () {
                /** @type {?} */
                var changedOrDestroyed = rxjs.merge(_this.mtxOptions.changes, _this._destroy$);
                rxjs.merge.apply(void 0, __spread(_this.mtxOptions.map((/**
                 * @param {?} option
                 * @return {?}
                 */
                function (option) { return option.stateChange$; })))).pipe(operators.takeUntil(changedOrDestroyed))
                    .subscribe((/**
                 * @param {?} option
                 * @return {?}
                 */
                function (option) {
                    /** @type {?} */
                    var item = _this.ngSelect.itemsList.findItem(option.value);
                    item.disabled = option.disabled;
                    item.label = option.label || item.label;
                    _this.ngSelect.detectChanges();
                }));
            });
            this.mtxOptions.changes
                .pipe(operators.startWith(this.mtxOptions), operators.takeUntil(this._destroy$))
                .subscribe((/**
             * @param {?} options
             * @return {?}
             */
            function (options) {
                mapMtxOptions(options);
                handleOptionChange();
            }));
        };
        MtxSelectComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'mtx-select',
                        exportAs: 'mtxSelect',
                        host: {
                            'class': 'mtx-select',
                            '[class.mtx-select-floating]': 'shouldLabelFloat',
                            '[attr.id]': 'id',
                            '[attr.aria-describedby]': '_ariaDescribedby || null',
                        },
                        template: "<ng-select #ngSelect\n           [(ngModel)]=\"value\"\n           [placeholder]=\"placeholder\"\n           [items]=\"items\"\n           [addTag]=\"addTag\"\n           [addTagText]=\"addTagText\"\n           [appendTo]=\"appendTo\"\n           [appearance]=\"appearance\"\n           [bindLabel]=\"bindLabel\"\n           [bindValue]=\"bindValue\"\n           [closeOnSelect]=\"closeOnSelect\"\n           [clearAllText]=\"clearAllText\"\n           [clearable]=\"clearable\"\n           [clearOnBackspace]=\"clearOnBackspace\"\n           [dropdownPosition]=\"dropdownPosition\"\n           [groupBy]=\"groupBy\"\n           [groupValue]=\"groupValue\"\n           [hideSelected]=\"hideSelected\"\n           [isOpen]=\"isOpen\"\n           [inputAttrs]=\"inputAttrs\"\n           [loading]=\"loading\"\n           [loadingText]=\"loadingText\"\n           [labelForId]=\"labelForId\"\n           [markFirst]=\"markFirst\"\n           [maxSelectedItems]=\"maxSelectedItems\"\n           [multiple]=\"multiple\"\n           [notFoundText]=\"notFoundText\"\n           [readonly]=\"readonly\"\n           [typeahead]=\"typeahead\"\n           [typeToSearchText]=\"typeToSearchText\"\n           [trackByFn]=\"trackByFn\"\n           [searchable]=\"searchable\"\n           [searchFn]=\"searchFn\"\n           [searchWhileComposing]=\"searchWhileComposing\"\n           [clearSearchOnAdd]=\"clearSearchOnAdd\"\n           [selectableGroup]=\"selectableGroup\"\n           [selectableGroupAsModel]=\"selectableGroupAsModel\"\n           [selectOnTab]=\"selectOnTab\"\n           [tabIndex]=\"tabIndex\"\n           [openOnEnter]=\"openOnEnter\"\n           [minTermLength]=\"minTermLength\"\n           [keyDownFn]=\"keyDownFn\"\n           [virtualScroll]=\"virtualScroll\"\n           (blur)=\"blur.emit($event)\"\n           (focus)=\"focus.emit($event)\"\n           (change)=\"change.emit($event)\"\n           (open)=\"open.emit($event)\"\n           (close)=\"close.emit($event)\"\n           (search)=\"search.emit($event)\"\n           (clear)=\"clear.emit($event)\"\n           (add)=\"add.emit($event)\"\n           (remove)=\"remove.emit($event)\"\n           (scroll)=\"scroll.emit($event)\"\n           (scrollToEnd)=\"scrollToEnd.emit($event)\">\n\n  <ng-container *ngIf=\"optionTemplate\">\n    <ng-template ng-option-tmp let-item=\"item\" let-index=\"index\" let-searchTerm=\"searchTerm\">\n      <ng-template [ngTemplateOutlet]=\"optionTemplate\"\n                   [ngTemplateOutletContext]=\"{ item: item, item$: item, index: index, searchTerm: searchTerm }\">\n      </ng-template>\n    </ng-template>\n  </ng-container>\n\n  <ng-container *ngIf=\"optgroupTemplate\">\n    <ng-template ng-optgroup-tmp let-item=\"item\" let-index=\"index\" let-searchTerm=\"searchTerm\">\n      <ng-template [ngTemplateOutlet]=\"optgroupTemplate\"\n                   [ngTemplateOutletContext]=\"{ item: item, item$: item, index: index, searchTerm: searchTerm }\">\n      </ng-template>\n    </ng-template>\n  </ng-container>\n\n  <ng-container *ngIf=\"labelTemplate\">\n    <ng-template ng-label-tmp let-item=\"item\" let-clear=\"clear\" let-label=\"label\">\n      <ng-template [ngTemplateOutlet]=\"labelTemplate\"\n                   [ngTemplateOutletContext]=\"{ item: item, clear: clear, label: label }\">\n      </ng-template>\n    </ng-template>\n  </ng-container>\n\n  <ng-container *ngIf=\"multiLabelTemplate\">\n    <ng-template ng-multi-label-tmp let-items=\"items\" let-clear=\"clear\">\n      <ng-template [ngTemplateOutlet]=\"multiLabelTemplate\"\n                   [ngTemplateOutletContext]=\"{ items: items, clear: clear }\">\n      </ng-template>\n    </ng-template>\n  </ng-container>\n\n  <ng-container *ngIf=\"headerTemplate\">\n    <ng-template ng-header-tmp>\n      <ng-template [ngTemplateOutlet]=\"headerTemplate\">\n      </ng-template>\n    </ng-template>\n  </ng-container>\n\n  <ng-container *ngIf=\"footerTemplate\">\n    <ng-template ng-footer-tmp>\n      <ng-template [ngTemplateOutlet]=\"footerTemplate\">\n      </ng-template>\n    </ng-template>\n  </ng-container>\n\n  <ng-container *ngIf=\"notFoundTemplate\">\n    <ng-template ng-notfound-tmp let-searchTerm=\"searchTerm\">\n      <ng-template [ngTemplateOutlet]=\"notFoundTemplate\"\n                   [ngTemplateOutletContext]=\"{ searchTerm: searchTerm }\">\n      </ng-template>\n    </ng-template>\n  </ng-container>\n\n  <ng-container *ngIf=\"typeToSearchTemplate\">\n    <ng-template ng-typetosearch-tmp>\n      <ng-template [ngTemplateOutlet]=\"typeToSearchTemplate\">\n      </ng-template>\n    </ng-template>\n  </ng-container>\n\n  <ng-container *ngIf=\"loadingTextTemplate\">\n    <ng-template ng-loadingtext-tmp let-searchTerm=\"searchTerm\">\n      <ng-template [ngTemplateOutlet]=\"loadingTextTemplate\"\n                   [ngTemplateOutletContext]=\"{ searchTerm: searchTerm }\">\n      </ng-template>\n    </ng-template>\n  </ng-container>\n\n  <ng-container *ngIf=\"tagTemplate\">\n    <ng-template ng-tag-tmp let-searchTerm=\"searchTerm\">\n      <ng-template [ngTemplateOutlet]=\"tagTemplate\"\n                   [ngTemplateOutletContext]=\"{ searchTerm: searchTerm }\">\n      </ng-template>\n    </ng-template>\n  </ng-container>\n\n  <ng-container *ngIf=\"loadingSpinnerTemplate\">\n    <ng-template ng-loadingspinner-tmp>\n      <ng-template [ngTemplateOutlet]=\"loadingSpinnerTemplate\">\n      </ng-template>\n    </ng-template>\n  </ng-container>\n\n</ng-select>\n",
                        encapsulation: core.ViewEncapsulation.None,
                        changeDetection: core.ChangeDetectionStrategy.OnPush,
                        providers: [{ provide: formField.MatFormFieldControl, useExisting: MtxSelectComponent }],
                        styles: [".ng-select{padding-top:calc(.4375em + .84375em);margin-top:calc(-.4375em - .84375em);padding-bottom:.4375em;margin-bottom:-.4375em}.ng-select.ng-select-opened>.ng-select-container .ng-arrow{top:-2px;border-color:transparent transparent rgba(0,0,0,.54);border-width:0 5px 5px}.ng-select .ng-has-value .ng-placeholder{display:none}.ng-select .ng-select-container{align-items:center;color:rgba(0,0,0,.87)}.ng-select .ng-select-container .ng-value-container{align-items:center}.ng-select .ng-select-container .ng-value-container .ng-placeholder{color:rgba(102,102,102,.87);opacity:0;transition:opacity .2s}.mtx-select-floating .ng-select .ng-select-container .ng-value-container .ng-placeholder{opacity:1}.ng-select.ng-select-disabled .ng-value{color:rgba(0,0,0,.38)}.ng-select.ng-select-single.ng-select-filtered .ng-placeholder{display:initial;visibility:hidden}.ng-select.ng-select-single .ng-select-container .ng-value-container .ng-placeholder::after,.ng-select.ng-select-single .ng-select-container .ng-value-container .ng-value::after{display:inline-block;content:\"\"}.ng-select.ng-select-single .ng-select-container .ng-value-container .ng-input{left:0}.ng-select.ng-select-multiple .ng-select-container .ng-value-container{margin:-4px 0}.ng-select.ng-select-multiple .ng-select-container .ng-value-container .ng-value{margin:4px;border-radius:16px;line-height:18px;font-size:.875em;background-color:#e8eaf7}.ng-select.ng-select-multiple .ng-select-container .ng-value-container .ng-value.ng-value-disabled{background-color:rgba(0,0,0,.1);color:rgba(0,0,0,.38)}.ng-select.ng-select-multiple .ng-select-container .ng-value-container .ng-value .ng-value-label{display:inline-block;margin:0 8px}.ng-select.ng-select-multiple .ng-select-container .ng-value-container .ng-value .ng-value-icon{display:inline-block;width:18px;height:18px;border-radius:100%;background-color:#d9dcf2;text-align:center}.ng-select.ng-select-multiple .ng-select-container .ng-value-container .ng-value .ng-value-icon:hover{background-color:#c9cfec}.ng-select.ng-select-multiple .ng-select-container .ng-value-container .ng-value .ng-value-icon.left{margin-left:-4px}.ng-select.ng-select-multiple .ng-select-container .ng-value-container .ng-value .ng-value-icon.right,[dir=rtl] .ng-select.ng-select-multiple .ng-select-container .ng-value-container .ng-value .ng-value-icon.left{margin-right:-4px}[dir=rtl] .ng-select.ng-select-multiple .ng-select-container .ng-value-container .ng-value .ng-value-icon.right{margin-left:-4px}.ng-select.ng-select-multiple .ng-select-container .ng-value-container .ng-input>input{font:inherit;padding:0}.ng-select .ng-clear-wrapper{height:18px;color:rgba(0,0,0,.54);text-align:center}.ng-select .ng-clear-wrapper:hover .ng-clear{color:#f44336}.ng-select .ng-arrow-wrapper{width:18px}.ng-select .ng-arrow-wrapper .ng-arrow{border-color:rgba(0,0,0,.54) transparent transparent;border-style:solid;border-width:5px 5px 2.5px}.ng-dropdown-panel{left:0;background:#fff}.ng-dropdown-panel.ng-select-bottom{top:100%;border-bottom-left-radius:4px;border-bottom-right-radius:4px;box-shadow:0 2px 4px -1px rgba(0,0,0,.2),0 4px 5px 0 rgba(0,0,0,.14),0 1px 10px 0 rgba(0,0,0,.12)}.ng-dropdown-panel.ng-select-top{bottom:100%;border-top-left-radius:4px;border-top-right-radius:4px;box-shadow:0 2px 4px -1px rgba(0,0,0,.2),0 4px 5px 0 rgba(0,0,0,.14),0 1px 10px 0 rgba(0,0,0,.12)}.ng-dropdown-panel.multiple .ng-option.selected{background:#fff}.ng-dropdown-panel.multiple .ng-option.marked{background:#eff1fa}.ng-dropdown-panel .ng-dropdown-header{padding:14px 16px;border-bottom:1px solid rgba(0,0,0,.12)}.ng-dropdown-panel .ng-dropdown-footer{padding:14px 16px;border-top:1px solid rgba(0,0,0,.12)}.ng-dropdown-panel .ng-dropdown-panel-items .ng-optgroup{height:3em;padding:14px 16px;font-weight:500;color:rgba(0,0,0,.54);cursor:pointer;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.ng-dropdown-panel .ng-dropdown-panel-items .ng-optgroup.ng-option-marked{background:#eff1fa}.ng-dropdown-panel .ng-dropdown-panel-items .ng-optgroup.ng-option-disabled{cursor:default}.ng-dropdown-panel .ng-dropdown-panel-items .ng-optgroup.ng-option-selected{background:rgba(0,0,0,.12);color:#3f51b5}.ng-dropdown-panel .ng-dropdown-panel-items .ng-option{position:relative;padding:14px 16px;color:rgba(0,0,0,.87);text-overflow:ellipsis;text-decoration:none;text-align:left;white-space:nowrap;overflow:hidden}[dir=rtl] .ng-dropdown-panel .ng-dropdown-panel-items .ng-option{text-align:right}.ng-dropdown-panel .ng-dropdown-panel-items .ng-option.ng-option-marked{background:#eff1fa;color:rgba(0,0,0,.87)}.ng-dropdown-panel .ng-dropdown-panel-items .ng-option.ng-option-selected{background:rgba(0,0,0,.12);color:#3f51b5}.ng-dropdown-panel .ng-dropdown-panel-items .ng-option.ng-option-disabled{color:rgba(0,0,0,.38)}.ng-dropdown-panel .ng-dropdown-panel-items .ng-option.ng-option-child{padding-left:32px}[dir=rtl] .ng-dropdown-panel .ng-dropdown-panel-items .ng-option.ng-option-child{padding-right:32px;padding-left:0}.ng-dropdown-panel .ng-dropdown-panel-items .ng-option .ng-tag-label{padding-right:5px;font-size:80%;font-weight:400;color:rgba(0,0,0,.38)}[dir=rtl] .ng-dropdown-panel .ng-dropdown-panel-items .ng-option .ng-tag-label{padding-left:5px;padding-right:0}"]
                    }] }
        ];
        /** @nocollapse */
        MtxSelectComponent.ctorParameters = function () { return [
            { type: a11y.FocusMonitor },
            { type: core.ElementRef },
            { type: core.ChangeDetectorRef },
            { type: forms.NgControl, decorators: [{ type: core.Optional }, { type: core.Self }] }
        ]; };
        MtxSelectComponent.propDecorators = {
            ngSelect: [{ type: core.ViewChild, args: ['ngSelect', { static: true },] }],
            optionTemplate: [{ type: core.ContentChild, args: [MtxSelectOptionTemplateDirective, { read: core.TemplateRef },] }],
            optgroupTemplate: [{ type: core.ContentChild, args: [MtxSelectOptgroupTemplateDirective, { read: core.TemplateRef },] }],
            labelTemplate: [{ type: core.ContentChild, args: [MtxSelectLabelTemplateDirective, { read: core.TemplateRef },] }],
            multiLabelTemplate: [{ type: core.ContentChild, args: [MtxSelectMultiLabelTemplateDirective, { read: core.TemplateRef },] }],
            headerTemplate: [{ type: core.ContentChild, args: [MtxSelectHeaderTemplateDirective, { read: core.TemplateRef },] }],
            footerTemplate: [{ type: core.ContentChild, args: [MtxSelectFooterTemplateDirective, { read: core.TemplateRef },] }],
            notFoundTemplate: [{ type: core.ContentChild, args: [MtxSelectNotFoundTemplateDirective, { read: core.TemplateRef },] }],
            typeToSearchTemplate: [{ type: core.ContentChild, args: [MtxSelectTypeToSearchTemplateDirective, { read: core.TemplateRef },] }],
            loadingTextTemplate: [{ type: core.ContentChild, args: [MtxSelectLoadingTextTemplateDirective, { read: core.TemplateRef },] }],
            tagTemplate: [{ type: core.ContentChild, args: [MtxSelectTagTemplateDirective, { read: core.TemplateRef },] }],
            loadingSpinnerTemplate: [{ type: core.ContentChild, args: [MtxSelectLoadingSpinnerTemplateDirective, { read: core.TemplateRef },] }],
            mtxOptions: [{ type: core.ContentChildren, args: [MtxOptionComponent, { descendants: true },] }],
            addTag: [{ type: core.Input }],
            addTagText: [{ type: core.Input }],
            appearance: [{ type: core.Input }],
            appendTo: [{ type: core.Input }],
            bindLabel: [{ type: core.Input }],
            bindValue: [{ type: core.Input }],
            closeOnSelect: [{ type: core.Input }],
            clearAllText: [{ type: core.Input }],
            clearable: [{ type: core.Input }],
            clearOnBackspace: [{ type: core.Input }],
            compareWith: [{ type: core.Input }],
            dropdownPosition: [{ type: core.Input }],
            groupBy: [{ type: core.Input }],
            groupValue: [{ type: core.Input }],
            selectableGroup: [{ type: core.Input }],
            selectableGroupAsModel: [{ type: core.Input }],
            hideSelected: [{ type: core.Input }],
            isOpen: [{ type: core.Input }],
            loading: [{ type: core.Input }],
            loadingText: [{ type: core.Input }],
            labelForId: [{ type: core.Input }],
            markFirst: [{ type: core.Input }],
            maxSelectedItems: [{ type: core.Input }],
            multiple: [{ type: core.Input }],
            notFoundText: [{ type: core.Input }],
            searchable: [{ type: core.Input }],
            readonly: [{ type: core.Input }],
            searchFn: [{ type: core.Input }],
            searchWhileComposing: [{ type: core.Input }],
            clearSearchOnAdd: [{ type: core.Input }],
            selectOnTab: [{ type: core.Input }],
            trackByFn: [{ type: core.Input }],
            inputAttrs: [{ type: core.Input }],
            tabIndex: [{ type: core.Input }],
            openOnEnter: [{ type: core.Input }],
            minTermLength: [{ type: core.Input }],
            keyDownFn: [{ type: core.Input }],
            virtualScroll: [{ type: core.Input }],
            typeToSearchText: [{ type: core.Input }],
            typeahead: [{ type: core.Input }],
            blur: [{ type: core.Output }],
            focus: [{ type: core.Output }],
            change: [{ type: core.Output }],
            open: [{ type: core.Output }],
            close: [{ type: core.Output }],
            search: [{ type: core.Output }],
            clear: [{ type: core.Output }],
            add: [{ type: core.Output }],
            remove: [{ type: core.Output }],
            scroll: [{ type: core.Output }],
            scrollToEnd: [{ type: core.Output }],
            items: [{ type: core.Input }],
            value: [{ type: core.Input }],
            id: [{ type: core.Input }],
            placeholder: [{ type: core.Input }],
            required: [{ type: core.Input }],
            disabled: [{ type: core.Input }]
        };
        return MtxSelectComponent;
    }());
    if (false) {
        /** @type {?} */
        MtxSelectComponent.prototype.ngSelect;
        /** @type {?} */
        MtxSelectComponent.prototype.optionTemplate;
        /** @type {?} */
        MtxSelectComponent.prototype.optgroupTemplate;
        /** @type {?} */
        MtxSelectComponent.prototype.labelTemplate;
        /** @type {?} */
        MtxSelectComponent.prototype.multiLabelTemplate;
        /** @type {?} */
        MtxSelectComponent.prototype.headerTemplate;
        /** @type {?} */
        MtxSelectComponent.prototype.footerTemplate;
        /** @type {?} */
        MtxSelectComponent.prototype.notFoundTemplate;
        /** @type {?} */
        MtxSelectComponent.prototype.typeToSearchTemplate;
        /** @type {?} */
        MtxSelectComponent.prototype.loadingTextTemplate;
        /** @type {?} */
        MtxSelectComponent.prototype.tagTemplate;
        /** @type {?} */
        MtxSelectComponent.prototype.loadingSpinnerTemplate;
        /** @type {?} */
        MtxSelectComponent.prototype.mtxOptions;
        /**
         * MtxSelect options
         * @type {?}
         */
        MtxSelectComponent.prototype.addTag;
        /** @type {?} */
        MtxSelectComponent.prototype.addTagText;
        /** @type {?} */
        MtxSelectComponent.prototype.appearance;
        /** @type {?} */
        MtxSelectComponent.prototype.appendTo;
        /** @type {?} */
        MtxSelectComponent.prototype.bindLabel;
        /** @type {?} */
        MtxSelectComponent.prototype.bindValue;
        /** @type {?} */
        MtxSelectComponent.prototype.closeOnSelect;
        /** @type {?} */
        MtxSelectComponent.prototype.clearAllText;
        /** @type {?} */
        MtxSelectComponent.prototype.clearable;
        /** @type {?} */
        MtxSelectComponent.prototype.clearOnBackspace;
        /** @type {?} */
        MtxSelectComponent.prototype.compareWith;
        /** @type {?} */
        MtxSelectComponent.prototype.dropdownPosition;
        /** @type {?} */
        MtxSelectComponent.prototype.groupBy;
        /** @type {?} */
        MtxSelectComponent.prototype.groupValue;
        /** @type {?} */
        MtxSelectComponent.prototype.selectableGroup;
        /** @type {?} */
        MtxSelectComponent.prototype.selectableGroupAsModel;
        /** @type {?} */
        MtxSelectComponent.prototype.hideSelected;
        /** @type {?} */
        MtxSelectComponent.prototype.isOpen;
        /** @type {?} */
        MtxSelectComponent.prototype.loading;
        /** @type {?} */
        MtxSelectComponent.prototype.loadingText;
        /** @type {?} */
        MtxSelectComponent.prototype.labelForId;
        /** @type {?} */
        MtxSelectComponent.prototype.markFirst;
        /** @type {?} */
        MtxSelectComponent.prototype.maxSelectedItems;
        /** @type {?} */
        MtxSelectComponent.prototype.multiple;
        /** @type {?} */
        MtxSelectComponent.prototype.notFoundText;
        /** @type {?} */
        MtxSelectComponent.prototype.searchable;
        /** @type {?} */
        MtxSelectComponent.prototype.readonly;
        /** @type {?} */
        MtxSelectComponent.prototype.searchFn;
        /** @type {?} */
        MtxSelectComponent.prototype.searchWhileComposing;
        /** @type {?} */
        MtxSelectComponent.prototype.clearSearchOnAdd;
        /** @type {?} */
        MtxSelectComponent.prototype.selectOnTab;
        /** @type {?} */
        MtxSelectComponent.prototype.trackByFn;
        /** @type {?} */
        MtxSelectComponent.prototype.inputAttrs;
        /** @type {?} */
        MtxSelectComponent.prototype.tabIndex;
        /** @type {?} */
        MtxSelectComponent.prototype.openOnEnter;
        /** @type {?} */
        MtxSelectComponent.prototype.minTermLength;
        /** @type {?} */
        MtxSelectComponent.prototype.keyDownFn;
        /** @type {?} */
        MtxSelectComponent.prototype.virtualScroll;
        /** @type {?} */
        MtxSelectComponent.prototype.typeToSearchText;
        /** @type {?} */
        MtxSelectComponent.prototype.typeahead;
        /** @type {?} */
        MtxSelectComponent.prototype.blur;
        /** @type {?} */
        MtxSelectComponent.prototype.focus;
        /** @type {?} */
        MtxSelectComponent.prototype.change;
        /** @type {?} */
        MtxSelectComponent.prototype.open;
        /** @type {?} */
        MtxSelectComponent.prototype.close;
        /** @type {?} */
        MtxSelectComponent.prototype.search;
        /** @type {?} */
        MtxSelectComponent.prototype.clear;
        /** @type {?} */
        MtxSelectComponent.prototype.add;
        /** @type {?} */
        MtxSelectComponent.prototype.remove;
        /** @type {?} */
        MtxSelectComponent.prototype.scroll;
        /** @type {?} */
        MtxSelectComponent.prototype.scrollToEnd;
        /**
         * @type {?}
         * @private
         */
        MtxSelectComponent.prototype._items;
        /**
         * @type {?}
         * @private
         */
        MtxSelectComponent.prototype._itemsAreUsed;
        /**
         * @type {?}
         * @private
         */
        MtxSelectComponent.prototype._destroy$;
        /**
         * @type {?}
         * @private
         */
        MtxSelectComponent.prototype._value;
        /**
         * Implemented as part of MatFormFieldControl.
         * @type {?}
         */
        MtxSelectComponent.prototype.stateChanges;
        /**
         * @type {?}
         * @private
         */
        MtxSelectComponent.prototype._id;
        /**
         * Unique id for this input.
         * @type {?}
         * @private
         */
        MtxSelectComponent.prototype._uid;
        /**
         * @type {?}
         * @private
         */
        MtxSelectComponent.prototype._placeholder;
        /**
         * @type {?}
         * @private
         */
        MtxSelectComponent.prototype._focused;
        /**
         * @type {?}
         * @private
         */
        MtxSelectComponent.prototype._required;
        /**
         * @type {?}
         * @private
         */
        MtxSelectComponent.prototype._disabled;
        /** @type {?} */
        MtxSelectComponent.prototype.errorState;
        /**
         * A name for this control that can be used by `mat-form-field`.
         * @type {?}
         */
        MtxSelectComponent.prototype.controlType;
        /**
         * The aria-describedby attribute on the select for improved a11y.
         * @type {?}
         */
        MtxSelectComponent.prototype._ariaDescribedby;
        /**
         * `View -> model callback called when value changes`
         * @type {?}
         */
        MtxSelectComponent.prototype._onChange;
        /**
         * `View -> model callback called when select has been touched`
         * @type {?}
         */
        MtxSelectComponent.prototype._onTouched;
        /**
         * @type {?}
         * @private
         */
        MtxSelectComponent.prototype._focusMonitor;
        /**
         * @type {?}
         * @private
         */
        MtxSelectComponent.prototype._elementRef;
        /**
         * @type {?}
         * @private
         */
        MtxSelectComponent.prototype._changeDetectorRef;
        /** @type {?} */
        MtxSelectComponent.prototype.ngControl;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: select.module.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var MtxSelectModule = /** @class */ (function () {
        function MtxSelectModule() {
        }
        MtxSelectModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [common.CommonModule, forms.FormsModule, forms.ReactiveFormsModule, ngSelect.NgSelectModule],
                        exports: [
                            MtxSelectComponent,
                            MtxOptionComponent,
                            MtxSelectOptgroupTemplateDirective,
                            MtxSelectOptionTemplateDirective,
                            MtxSelectLabelTemplateDirective,
                            MtxSelectMultiLabelTemplateDirective,
                            MtxSelectHeaderTemplateDirective,
                            MtxSelectFooterTemplateDirective,
                            MtxSelectNotFoundTemplateDirective,
                            MtxSelectTypeToSearchTemplateDirective,
                            MtxSelectLoadingTextTemplateDirective,
                            MtxSelectTagTemplateDirective,
                            MtxSelectLoadingSpinnerTemplateDirective,
                        ],
                        declarations: [
                            MtxSelectComponent,
                            MtxOptionComponent,
                            MtxSelectOptgroupTemplateDirective,
                            MtxSelectOptionTemplateDirective,
                            MtxSelectLabelTemplateDirective,
                            MtxSelectMultiLabelTemplateDirective,
                            MtxSelectHeaderTemplateDirective,
                            MtxSelectFooterTemplateDirective,
                            MtxSelectNotFoundTemplateDirective,
                            MtxSelectTypeToSearchTemplateDirective,
                            MtxSelectLoadingTextTemplateDirective,
                            MtxSelectTagTemplateDirective,
                            MtxSelectLoadingSpinnerTemplateDirective,
                        ],
                    },] }
        ];
        return MtxSelectModule;
    }());

    exports.MtxSelectComponent = MtxSelectComponent;
    exports.MtxSelectModule = MtxSelectModule;
    exports.ɵa = MtxSelectOptionTemplateDirective;
    exports.ɵb = MtxSelectOptgroupTemplateDirective;
    exports.ɵc = MtxSelectLabelTemplateDirective;
    exports.ɵd = MtxSelectMultiLabelTemplateDirective;
    exports.ɵe = MtxSelectHeaderTemplateDirective;
    exports.ɵf = MtxSelectFooterTemplateDirective;
    exports.ɵg = MtxSelectNotFoundTemplateDirective;
    exports.ɵh = MtxSelectTypeToSearchTemplateDirective;
    exports.ɵi = MtxSelectLoadingTextTemplateDirective;
    exports.ɵj = MtxSelectTagTemplateDirective;
    exports.ɵk = MtxSelectLoadingSpinnerTemplateDirective;
    exports.ɵl = MtxOptionComponent;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=mtxSelect.umd.js.map
