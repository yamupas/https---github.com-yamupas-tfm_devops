!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?e(exports,require("@angular/core"),require("@angular/common"),require("@angular/forms"),require("@angular/material/table"),require("@angular/material/sort"),require("@angular/material/paginator"),require("@angular/material/checkbox"),require("@angular/material/button"),require("@angular/material/progress-bar"),require("@angular/material/chips"),require("@angular/material/tooltip"),require("@angular/material/icon"),require("@angular/material/select"),require("@angular/material/form-field"),require("@angular/material/menu"),require("@angular/cdk/drag-drop"),require("@ng-matero/extensions/dialog"),require("@angular/animations"),require("@angular/cdk/collections"),require("photoviewer")):"function"==typeof define&&define.amd?define("@ng-matero/extensions/data-grid",["exports","@angular/core","@angular/common","@angular/forms","@angular/material/table","@angular/material/sort","@angular/material/paginator","@angular/material/checkbox","@angular/material/button","@angular/material/progress-bar","@angular/material/chips","@angular/material/tooltip","@angular/material/icon","@angular/material/select","@angular/material/form-field","@angular/material/menu","@angular/cdk/drag-drop","@ng-matero/extensions/dialog","@angular/animations","@angular/cdk/collections","photoviewer"],e):e(((t=t||self)["ng-matero"]=t["ng-matero"]||{},t["ng-matero"].extensions=t["ng-matero"].extensions||{},t["ng-matero"].extensions["data-grid"]={}),t.ng.core,t.ng.common,t.ng.forms,t.ng.material.table,t.ng.material.sort,t.ng.material.paginator,t.ng.material.checkbox,t.ng.material.button,t.ng.material.progressBar,t.ng.material.chips,t.ng.material.tooltip,t.ng.material.icon,t.ng.material.select,t.ng.material.formField,t.ng.material.menu,t.ng.cdk.dragDrop,t["ng-matero"].extensions.dialog,t.ng.animations,t.ng.cdk.collections,t.PhotoViewer)}(this,(function(t,e,n,r,o,a,l,i,c,s,d,m,p,g,u,h,x,b,f,y,w){"use strict";w=w&&Object.prototype.hasOwnProperty.call(w,"default")?w.default:w;var C=function(){function t(){}return t.prototype.getCellValue=function(t,e){var n=e.field?e.field.split("."):[],r="";return n.forEach((function(e,n){r=0===n?t[e]:r&&r[e]})),r},t.prototype.str2arr=function(t){return t.replace(/[\r\n\s]/g,"").split(",")},t.decorators=[{type:e.Injectable}],t.ctorParameters=function(){return[]},t}(),S=function(){function t(t){this._dataGridSrv=t,this.columns=[],this.data=[],this.length=0,this.loading=!1,this.tooltip=!0,this.pageOnFront=!0,this.showPaginator=!0,this.pageDisabled=!1,this.showFirstLastButtons=!0,this.pageIndex=0,this.pageSize=10,this.pageSizeOptions=[10,50,100],this.hidePageSize=!1,this.page=new e.EventEmitter,this.sortOnFront=!0,this.sortChange=new e.EventEmitter,this.rowHover=!1,this.rowStriped=!1,this.expansionRowStates=[],this.expandable=!1,this.expansionChange=new e.EventEmitter,this.multiSelectable=!0,this.rowSelection=new y.SelectionModel(!0,[]),this.rowSelected=[],this.rowSelectable=!1,this.hideRowSelectionCheckbox=!1,this.rowSelectionFormatter={},this.rowClassFormatter={},this.rowSelectionChange=new e.EventEmitter,this.cellSelection=[],this.cellSelectable=!0,this.cellSelectionChange=new e.EventEmitter,this.showToolbar=!1,this.toolbarTitle="",this.columnMenuData=[],this.showColumnMenuButton=!0,this.columnMenuButtonText="",this.columnMenuButtonType="stroked",this.columnMenuButtonColor="",this.columnMenuButtonClass="",this.columnMenuButtonIcon="",this.columnHideable=!0,this.columnHidingChecked="show",this.columnHidingChange=new e.EventEmitter,this.columnMovable=!0,this.columnMovingChange=new e.EventEmitter,this.columnPinnable=!0,this.columnPinningChange=new e.EventEmitter,this.noResultText="No records found",this.showSummary=!1,this.showSidebar=!1}return Object.defineProperty(t.prototype,"_hasNoResult",{get:function(){return!(this.data&&0!==this.data.length||this.loading)},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"_whetherShowSummary",{get:function(){return this.showSummary},enumerable:!0,configurable:!0}),t.prototype._getColData=function(t,e){return t.map((function(t){return t[e.field]}))},t.prototype._formatSummary=function(t,e,n){return this._isString(t)?t:this._isFunction(t)?t(this._getColData(e,n),n):void 0},t.prototype._isTemplateRef=function(t){return t instanceof e.TemplateRef},t.prototype._isString=function(t){return"[object String]"===Object.prototype.toString.call(t)},t.prototype._isFunction=function(t){return"[object Function]"===Object.prototype.toString.call(t)},t.prototype.ngOnInit=function(){},t.prototype.ngOnChanges=function(){var t,e=this;this._countPinnedPosition(),this.displayedColumns=this.columns.filter((function(t){return!t.hide})).map((function(t){return t.field})),this.showColumnMenuButton&&(this.columnMenuData=this.columns.map((function(t){return{label:t.header,field:t.field,show:!t.hide,hide:t.hide,disabled:t.disabled}}))),this.rowSelectable&&!this.hideRowSelectionCheckbox&&this.displayedColumns.unshift("MtxGridCheckboxColumnDef"),this.expandable&&(this.expansionRowStates=[],null===(t=this.data)||void 0===t||t.forEach((function(t){e.expansionRowStates.push({expanded:!1})}))),this.dataSource=new o.MatTableDataSource(this.data),this.pageOnFront&&(this.dataSource.paginator=this.paginator),this.sortOnFront&&(this.dataSource.sort=this.sort),this.rowSelectable&&(this.rowSelection=new y.SelectionModel(this.multiSelectable,this.rowSelected))},t.prototype.ngOnDestroy=function(){},t.prototype._countPinnedPosition=function(){var t=function(t,e){return t+parseFloat(e.width||"80px")},e=this.columns.filter((function(t){return t.pinned&&"left"===t.pinned}));e.forEach((function(n,r){n.left=e.slice(0,r).reduce(t,0)+"px"}));var n=this.columns.filter((function(t){return t.pinned&&"right"===t.pinned})).reverse();n.forEach((function(e,r){e.right=n.slice(0,r).reduce(t,0)+"px"}))},t.prototype._isOddRow=function(t,e){return void 0===t?e%2:t%2},t.prototype._getIndex=function(t,e){return void 0===t?e:t},t.prototype._handleSortChange=function(t){this.sortChange.emit(t)},t.prototype._handleExpansionChange=function(t,e,n,r){this.expandable&&(this.expansionRowStates[r].expanded=!this.expansionRowStates[r].expanded),this.expansionChange.emit({opened:t.expended,data:e,index:r,column:n})},t.prototype._selectCell=function(t,e,n){if(this._selectedCell!==t){var r=this._dataGridSrv.getCellValue(e,n);this.cellSelection=[],this.cellSelection.push({cellData:r,rowData:e,colDef:n}),this.cellSelectionChange.emit(this.cellSelection),this._selectedCell&&this._selectedCell.deselect()}this._selectedCell=t.selected?t:void 0},t.prototype._selectRow=function(t,e){!this.rowSelectable||this.rowSelectionFormatter.disabled&&this.rowSelectionFormatter.disabled(e)||this.rowSelectionFormatter.hideCheckbox&&this.rowSelectionFormatter.hideCheckbox(e)||(t.ctrlKey||t.metaKey||this.rowSelection.clear(),this._toggleNormalCheckbox(e))},t.prototype._isAllSelected=function(){return this.rowSelection.selected.length===this.dataSource.data.length},t.prototype._toggleMasterCheckbox=function(){var t=this;this._isAllSelected()?this.rowSelection.clear():this.dataSource.data.forEach((function(e){return t.rowSelection.select(e)})),this.rowSelectionChange.emit(this.rowSelection.selected)},t.prototype._toggleNormalCheckbox=function(t){this.rowSelection.toggle(t),this.rowSelectionChange.emit(this.rowSelection.selected)},t.prototype._handleColumnHidingChange=function(t){this.columnHidingChange.emit(t),this.displayedColumns=Object.assign([],t),this.rowSelectable&&!this.hideRowSelectionCheckbox&&this.displayedColumns.unshift("MtxGridCheckboxColumnDef")},t.prototype._handleColumnMovingChange=function(t){this.columnMovingChange.emit(t),this.displayedColumns=Object.assign([],t),this.rowSelectable&&!this.hideRowSelectionCheckbox&&this.displayedColumns.unshift("MtxGridCheckboxColumnDef")},t.prototype.toggleExpansion=function(t){if(!this.expandable)throw new Error("The `expandable` should be set true.");return this.expansionRowStates[t].expanded=!this.expansionRowStates[t].expanded,this.expansionRowStates[t].expanded},t.decorators=[{type:e.Component,args:[{selector:"mtx-grid",exportAs:"mtxGrid",template:'\x3c!-- Progress Bar--\x3e\r\n<mat-progress-bar class="mtx-grid-progress" mode="indeterminate" *ngIf="loading"></mat-progress-bar>\r\n\r\n\x3c!-- Toolbar --\x3e\r\n<div class="mtx-grid-toolbar" *ngIf="showToolbar">\r\n  <div class="mtx-grid-toolbar-title" *ngIf="toolbarTitle">{{toolbarTitle}}</div>\r\n  <div class="mtx-grid-toolbar-template">\r\n    <ng-template [ngIf]="toolbarTemplate">\r\n      <ng-template [ngTemplateOutlet]="toolbarTemplate"></ng-template>\r\n    </ng-template>\r\n  </div>\r\n  <div class="mtx-grid-toolbar-actions">\r\n    <mtx-grid-column-menu *ngIf="showColumnMenuButton"\r\n                          [columns]="columnMenuData"\r\n                          [buttonText]="columnMenuButtonText"\r\n                          [buttonType]="columnMenuButtonType"\r\n                          [buttonColor]="columnMenuButtonColor"\r\n                          [buttonClass]="columnMenuButtonClass"\r\n                          [buttonIcon]="columnMenuButtonIcon"\r\n                          [selectable]="columnHideable"\r\n                          [selectedType]="columnHidingChecked"\r\n                          [sortable]="columnMovable"\r\n                          (selectionChange)="_handleColumnHidingChange($event)"\r\n                          (sortChange)="_handleColumnMovingChange($event)">\r\n    </mtx-grid-column-menu>\r\n  </div>\r\n</div>\r\n\r\n<div class="mtx-grid-main mtx-grid-layout">\r\n  \x3c!-- Table Content --\x3e\r\n  <div class="mtx-grid-content mtx-grid-layout">\r\n    <table mat-table\r\n           [ngClass]="{\'mat-table-hover\': rowHover, \'mat-table-striped\': rowStriped, \'mat-table-expandable\': expandable}"\r\n           [dataSource]="dataSource" [multiTemplateDataRows]="expandable"\r\n           matSort (matSortChange)="_handleSortChange($event)" [trackBy]="trackBy">\r\n\r\n      <ng-container *ngIf="rowSelectable && !hideRowSelectionCheckbox"\r\n                    matColumnDef="MtxGridCheckboxColumnDef">\r\n        <th mat-header-cell *matHeaderCellDef class="mtx-grid-checkbox-cell">\r\n          <mat-checkbox *ngIf="multiSelectable"\r\n                        [checked]="rowSelection.hasValue() && _isAllSelected()"\r\n                        [indeterminate]="rowSelection.hasValue() && !_isAllSelected()"\r\n                        (change)="$event ? _toggleMasterCheckbox() : null">\r\n          </mat-checkbox>\r\n        </th>\r\n        <td mat-cell *matCellDef="let row;" class="mtx-grid-checkbox-cell">\r\n          <mat-checkbox *ngIf="!(rowSelectionFormatter.hideCheckbox && rowSelectionFormatter.hideCheckbox(row))"\r\n                        [disabled]="rowSelectionFormatter.disabled && rowSelectionFormatter.disabled(row)"\r\n                        [checked]="rowSelection.isSelected(row)"\r\n                        (click)="$event.stopPropagation()"\r\n                        (change)="$event ? _toggleNormalCheckbox(row) : null">\r\n          </mat-checkbox>\r\n        </td>\r\n        <td mat-footer-cell *matFooterCellDef></td>\r\n      </ng-container>\r\n\r\n      <ng-container *ngFor="let col of columns;">\r\n        <ng-container [matColumnDef]="col.field"\r\n                      [sticky]="col.pinned===\'left\'"\r\n                      [stickyEnd]="col.pinned===\'right\'">\r\n\r\n          <th mat-header-cell *matHeaderCellDef\r\n              [ngClass]="{\'mat-table-sticky-left\': col.pinned === \'left\', \'mat-table-sticky-right\': col.pinned === \'right\'}"\r\n              [ngStyle]="{\'width\': col.width, \'min-width\': col.width, \'left\': col.left, \'right\': col.right}">\r\n            <div class="mat-header-cell-inner">\r\n\r\n              <ng-template [ngIf]="_isTemplateRef(headerTemplate)" [ngIfElse]="headerTpl">\r\n                <ng-template [ngTemplateOutlet]="headerTemplate"\r\n                             [ngTemplateOutletContext]="{ $implicit: col, colDef: col }">\r\n                </ng-template>\r\n              </ng-template>\r\n              <ng-template #headerTpl>\r\n                <ng-template [ngIf]="headerTemplate && _isTemplateRef(headerTemplate[col.field])"\r\n                             [ngIfElse]="defaultHeaderTpl">\r\n                  <ng-template [ngTemplateOutlet]="headerTemplate[col.field]"\r\n                               [ngTemplateOutletContext]="{ $implicit: col, colDef: col }">\r\n                  </ng-template>\r\n                </ng-template>\r\n              </ng-template>\r\n              <ng-template #defaultHeaderTpl>\r\n                <div mat-sort-header [disabled]="!col.sortable">\r\n                  <span class="mtx-grid-expanison-placeholder" *ngIf="col.showExpand"></span>\r\n                  <span>{{col.header}}</span>\r\n                  <mat-icon class="mat-sort-header-icon" *ngIf="col.sortable">sort</mat-icon>\r\n                </div>\r\n              </ng-template>\r\n\r\n            </div>\r\n          </th>\r\n\r\n          <td mat-cell *matCellDef="let row; let index = index; let dataIndex = dataIndex;"\r\n              [ngClass]="{\'mat-table-sticky-left\': col.pinned === \'left\', \'mat-table-sticky-right\': col.pinned === \'right\'}"\r\n              [ngStyle]="{\'width\': col.width, \'min-width\': col.width, \'left\': col.left, \'right\': col.right}"\r\n              mtx-selectable-cell (cellSelectionChange)="_selectCell($event, row, col)">\r\n\r\n            <ng-template [ngIf]="_isTemplateRef(cellTemplate)" [ngIfElse]="cellTpl">\r\n              <ng-template [ngTemplateOutlet]="cellTemplate"\r\n                           [ngTemplateOutletContext]="{ $implicit: row, rowData: row, index: _getIndex(index, dataIndex), colDef: col }">\r\n              </ng-template>\r\n            </ng-template>\r\n            <ng-template #cellTpl>\r\n              <ng-template [ngIf]="cellTemplate && _isTemplateRef(cellTemplate[col.field])"\r\n                           [ngIfElse]="colDefCellTpl">\r\n                <ng-template [ngTemplateOutlet]="cellTemplate[col.field]"\r\n                             [ngTemplateOutletContext]="{ $implicit: row, rowData: row, index: _getIndex(index, dataIndex), colDef: col }">\r\n                </ng-template>\r\n              </ng-template>\r\n            </ng-template>\r\n            <ng-template #colDefCellTpl>\r\n              <ng-template [ngIf]="col.cellTemplate" [ngIfElse]="defaultCellTpl"\r\n                           [ngTemplateOutlet]="col.cellTemplate"\r\n                           [ngTemplateOutletContext]="{ $implicit: row, rowData: row, index: _getIndex(index, dataIndex), colDef: col }">\r\n              </ng-template>\r\n            </ng-template>\r\n            <ng-template #defaultCellTpl>\r\n              <button *ngIf="col.showExpand" mat-icon-button mtx-expansion-toggle\r\n                      (toggleChange)="_handleExpansionChange($event, row, col, dataIndex);">\r\n                <mat-icon>keyboard_arrow_right</mat-icon>\r\n              </button>\r\n\r\n              <mtx-grid-cell [rowData]="row" [colDef]="col"></mtx-grid-cell>\r\n            </ng-template>\r\n\r\n          </td>\r\n\r\n          <td mat-footer-cell *matFooterCellDef\r\n              [ngClass]="{\'mat-table-sticky-left\': col.pinned === \'left\', \'mat-table-sticky-right\': col.pinned === \'right\'}"\r\n              [ngStyle]="{\'width\': col.width, \'min-width\': col.width, \'left\': col.left, \'right\': col.right}">\r\n            <span class="mtx-grid-expanison-placeholder" *ngIf="col.showExpand"></span>\r\n\r\n            <ng-template [ngIf]="_isTemplateRef(summaryTemplate)" [ngIfElse]="summaryTpl">\r\n              <ng-template [ngTemplateOutlet]="summaryTemplate"\r\n                           [ngTemplateOutletContext]="{ $implicit: col, colDef: col, data: data }">\r\n              </ng-template>\r\n            </ng-template>\r\n            <ng-template #summaryTpl>\r\n              <ng-template [ngIf]="summaryTemplate && _isTemplateRef(summaryTemplate[col.field])"\r\n                           [ngIfElse]="defaultSummaryTpl">\r\n                <ng-template [ngTemplateOutlet]="summaryTemplate[col.field]"\r\n                             [ngTemplateOutletContext]="{ $implicit: _getColData(data, col), colData: _getColData(data, col), colDef: col }">\r\n                </ng-template>\r\n              </ng-template>\r\n            </ng-template>\r\n            <ng-template #defaultSummaryTpl>\r\n              <span [innerHTML]="_formatSummary(col.summary, data, col)"></span>\r\n            </ng-template>\r\n\r\n          </td>\r\n        </ng-container>\r\n      </ng-container>\r\n\r\n      <tr mat-header-row *matHeaderRowDef="displayedColumns; sticky: true"></tr>\r\n      <tr mat-row\r\n          *matRowDef="let row; let index = index; let dataIndex = dataIndex; columns: displayedColumns;"\r\n          [ngClass]="{\'selected\': rowSelection.isSelected(row), \'mat-row-odd\': _isOddRow(index, dataIndex)}"\r\n          (click)="_selectRow($event, row)">\r\n      </tr>\r\n      <ng-container *ngIf="_whetherShowSummary">\r\n        <tr mat-footer-row *matFooterRowDef="displayedColumns; sticky: true"></tr>\r\n      </ng-container>\r\n\r\n      <ng-container *ngIf="expandable">\r\n        \x3c!-- Expanded Content Column - The expandable row is made up of this one column that spans across all columns --\x3e\r\n        <ng-container matColumnDef="MtxGridExpansionColumnDef">\r\n          <td mat-cell *matCellDef="let row; let dataIndex = dataIndex"\r\n              [attr.colspan]="displayedColumns.length">\r\n            <div class="mtx-grid-expanison-detail"\r\n                 [@expansion]="expansionRowStates[dataIndex].expanded ? \'expanded\' : \'collapsed\'">\r\n              <ng-template [ngTemplateOutlet]="expansionTemplate"\r\n                           [ngTemplateOutletContext]="{ $implicit: row, rowData: row, index: dataIndex }">\r\n              </ng-template>\r\n            </div>\r\n          </td>\r\n        </ng-container>\r\n\r\n        <tr mat-row [ngClass]="{\'mtx-grid-expanison\': true,\r\n                                \'expanded\': expansionRowStates[dataIndex].expanded,\r\n                                \'collapsed\': !expansionRowStates[dataIndex].expanded}"\r\n            *matRowDef="let row; columns: [\'MtxGridExpansionColumnDef\']; let dataIndex = dataIndex">\r\n        </tr>\r\n      </ng-container>\r\n\r\n    </table>\r\n  </div>\r\n\r\n  \x3c!-- Tool Sidebar --\x3e\r\n  <div class="mtx-grid-sidebar" *ngIf="showSidebar"></div>\r\n</div>\r\n\r\n\x3c!-- Paginator --\x3e\r\n<mat-paginator [class.mat-paginator-hidden]="!showPaginator || _hasNoResult"\r\n               [showFirstLastButtons]="showFirstLastButtons"\r\n               [length]="length"\r\n               [pageIndex]="pageIndex"\r\n               [pageSize]="pageSize"\r\n               [pageSizeOptions]="pageSizeOptions"\r\n               [hidePageSize]="hidePageSize"\r\n               (page)="page.emit($event)"\r\n               [disabled]="pageDisabled">\r\n</mat-paginator>\r\n\r\n\x3c!-- No Result --\x3e\r\n<div class="mtx-grid-no-result" *ngIf="_hasNoResult">\r\n  <ng-template [ngIf]="noResultTemplate" [ngIfElse]="defaultNoResultTpl">\r\n    <ng-template [ngTemplateOutlet]="noResultTemplate"></ng-template>\r\n  </ng-template>\r\n  <ng-template #defaultNoResultTpl>{{noResultText}}</ng-template>\r\n</div>\r\n',host:{class:"mtx-grid"},encapsulation:e.ViewEncapsulation.None,changeDetection:e.ChangeDetectionStrategy.OnPush,animations:[f.trigger("expansion",[f.state("collapsed",f.style({height:"0",minHeight:"0",visibility:"hidden"})),f.state("expanded",f.style({height:"*",visibility:"visible"})),f.transition("expanded <=> collapsed",f.animate("225ms cubic-bezier(0.4, 0.0, 0.2, 1)"))])],styles:[".mtx-grid{position:relative;display:block;width:100%;border:1px solid rgba(0,0,0,.15)}.mtx-grid .mtx-grid-progress{position:absolute;top:0;z-index:109}.mtx-grid .mtx-grid-toolbar{display:flex;justify-content:space-between;align-items:center;min-height:48px;padding:8px;border-bottom:1px solid rgba(0,0,0,.15)}.mtx-grid .mtx-grid-layout{display:flex;flex:1 1 auto;overflow:auto}.mtx-grid .mtx-grid-content{width:0}.mtx-grid .mtx-grid-sidebar{width:30px;border-left:1px solid rgba(0,0,0,.15)}[dir=rtl] .mtx-grid .mtx-grid-sidebar{border-left:none;border-right:1px solid rgba(0,0,0,.15)}.mtx-grid .mat-table{flex:none;min-width:100%;border-collapse:separate}.mtx-grid .mat-table.mat-table-striped .mat-row-odd{background-color:rgba(0,0,0,.03)}.mtx-grid .mat-table.mat-table-hover .mat-row:hover{background-color:rgba(0,0,0,.05)}.mtx-grid .mat-footer-row,.mtx-grid .mat-header-row,.mtx-grid .mat-row{align-items:stretch}.mtx-grid .mat-cell,.mtx-grid .mat-footer-cell,.mtx-grid .mat-header-cell{min-width:80px;padding:4px 10px;box-sizing:border-box}.mtx-grid .mat-cell:first-of-type,.mtx-grid .mat-footer-cell:first-of-type,.mtx-grid .mat-header-cell:first-of-type{padding-left:24px}.mtx-grid .mat-cell:first-of-type.mtx-grid-checkbox-cell,.mtx-grid .mat-footer-cell:first-of-type.mtx-grid-checkbox-cell,.mtx-grid .mat-header-cell:first-of-type.mtx-grid-checkbox-cell{padding-left:10px;padding-right:10px}[dir=rtl] .mtx-grid .mat-cell:first-of-type,[dir=rtl] .mtx-grid .mat-footer-cell:first-of-type,[dir=rtl] .mtx-grid .mat-header-cell:first-of-type{padding-left:4px;padding-right:24px}[dir=rtl] .mtx-grid .mat-cell:first-of-type.mtx-grid-checkbox-cell,[dir=rtl] .mtx-grid .mat-footer-cell:first-of-type.mtx-grid-checkbox-cell,[dir=rtl] .mtx-grid .mat-header-cell:first-of-type.mtx-grid-checkbox-cell{padding-left:10px;padding-right:10px}.mtx-grid .mat-cell:last-of-type,.mtx-grid .mat-footer-cell:last-of-type,.mtx-grid .mat-header-cell:last-of-type{padding-right:24px}[dir=rtl] .mtx-grid .mat-cell:last-of-type,[dir=rtl] .mtx-grid .mat-footer-cell:last-of-type,[dir=rtl] .mtx-grid .mat-header-cell:last-of-type{padding-left:24px;padding-right:4px}.mtx-grid .mat-table-sticky-left,.mtx-grid .mat-table-sticky-right{flex:none}.mtx-grid .mat-table-sticky-left{border-right:1px solid rgba(0,0,0,.15)}[dir=rtl] .mtx-grid .mat-table-sticky-left{border-right-width:0;border-left:1px solid rgba(0,0,0,.15)}.mtx-grid .mat-table-sticky-right{border-left:1px solid rgba(0,0,0,.15)}[dir=rtl] .mtx-grid .mat-table-sticky-right{border-left-width:0;border-right:1px solid rgba(0,0,0,.15)}.mtx-grid .mtx-grid-expanison{height:0;overflow:hidden}.mtx-grid .mtx-grid-expanison .mat-cell{padding-top:0;padding-bottom:0}.mtx-grid .mtx-grid-expanison.collapsed .mat-cell{border-bottom-width:0}.mtx-grid .mtx-grid-expanison-detail{display:flex;align-items:center;min-height:48px;overflow:hidden}.mtx-grid .mtx-grid-expanison-placeholder{display:inline-block;width:40px;height:40px;vertical-align:middle}.mtx-grid .mat-row.selected{background-color:rgba(0,0,0,.05)}.mtx-grid .mat-row:last-of-type .mat-cell{border-bottom-width:0}.mtx-grid .mat-cell .mat-cell-img{width:30px;border-radius:4px;cursor:pointer}.mtx-grid .mat-cell .mat-chip{color:rgba(0,0,0,.87)}.mtx-grid .mat-cell .mat-cell-action-button .mat-icon{width:18px;height:18px;font-size:18px;line-height:18px}.mtx-grid .mat-cell .mat-icon-button.expanded .mat-icon{transform:rotate(90deg)}.mtx-grid .mat-cell.selected{box-shadow:inset 0 0 0 1px #29b6f6}.mtx-grid .mat-paginator{border-top:1px solid rgba(0,0,0,.15)}.mtx-grid .mat-paginator-hidden{display:none}.mtx-grid .mtx-grid-checkbox-cell{flex:none;justify-content:center;min-width:40px}.mtx-grid .mtx-grid-checkbox-cell .mat-checkbox{display:flex}.mtx-grid .mtx-grid-checkbox-cell .mat-checkbox-inner-container{margin-left:0}.mtx-grid .mtx-grid-no-result{display:flex;justify-content:center;align-items:center;min-height:150px}.mtx-grid .mat-sort-header-icon{width:18px;height:18px;margin:0 4px;font-size:18px}.mtx-grid .mat-header-cell-inner{display:flex;align-items:center}.mtx-grid .mat-footer-row .mat-footer-cell{border-bottom-width:0;border-top:1px solid rgba(0,0,0,.12);background-color:rgba(0,0,0,.06)}"]}]}],t.ctorParameters=function(){return[{type:C}]},t.propDecorators={paginator:[{type:e.ViewChild,args:[l.MatPaginator,{static:!0}]}],sort:[{type:e.ViewChild,args:[a.MatSort,{static:!0}]}],displayedColumns:[{type:e.Input}],columns:[{type:e.Input}],data:[{type:e.Input}],length:[{type:e.Input}],loading:[{type:e.Input}],trackBy:[{type:e.Input}],tooltip:[{type:e.Input}],pageOnFront:[{type:e.Input}],showPaginator:[{type:e.Input}],pageDisabled:[{type:e.Input}],showFirstLastButtons:[{type:e.Input}],pageIndex:[{type:e.Input}],pageSize:[{type:e.Input}],pageSizeOptions:[{type:e.Input}],hidePageSize:[{type:e.Input}],page:[{type:e.Output}],sortOnFront:[{type:e.Input}],sortChange:[{type:e.Output}],rowHover:[{type:e.Input}],rowStriped:[{type:e.Input}],expandable:[{type:e.Input}],expansionTemplate:[{type:e.Input}],expansionChange:[{type:e.Output}],multiSelectable:[{type:e.Input}],rowSelected:[{type:e.Input}],rowSelectable:[{type:e.Input}],hideRowSelectionCheckbox:[{type:e.Input}],rowSelectionFormatter:[{type:e.Input}],rowClassFormatter:[{type:e.Input}],rowSelectionChange:[{type:e.Output}],cellSelectable:[{type:e.Input}],cellSelectionChange:[{type:e.Output}],showToolbar:[{type:e.Input}],toolbarTitle:[{type:e.Input}],toolbarTemplate:[{type:e.Input}],showColumnMenuButton:[{type:e.Input}],columnMenuButtonText:[{type:e.Input}],columnMenuButtonType:[{type:e.Input}],columnMenuButtonColor:[{type:e.Input}],columnMenuButtonClass:[{type:e.Input}],columnMenuButtonIcon:[{type:e.Input}],columnHideable:[{type:e.Input}],columnHidingChecked:[{type:e.Input}],columnHidingChange:[{type:e.Output}],columnMovable:[{type:e.Input}],columnMovingChange:[{type:e.Output}],columnPinnable:[{type:e.Input}],columnPinningChange:[{type:e.Output}],noResultText:[{type:e.Input}],noResultTemplate:[{type:e.Input}],headerTemplate:[{type:e.Input}],cellTemplate:[{type:e.Input}],showSummary:[{type:e.Input}],summaryTemplate:[{type:e.Input}],showSidebar:[{type:e.Input}]},t}();var I=function(){function t(t,e){this._dialog=t,this._dataGridSrv=e,this.rowData={},this._colValue=""}return t.prototype.ngOnInit=function(){this._colValue=this._dataGridSrv.getCellValue(this.rowData,this.colDef)},t.prototype._handleActionConfirm=function(t,e,n,r){t.preventDefault(),t.stopPropagation(),this._dialog.confirm(e,(function(){return n(r)}))},t.prototype._handleActionClick=function(t,e,n){t.preventDefault(),t.stopPropagation(),e.click(n)},t.prototype._onPreview=function(t,e){void 0===e&&(e=!1);var n=[],r={};e?this._dataGridSrv.str2arr(t).forEach((function(t,e){n.push({title:e+1,src:t})})):(this._dataGridSrv.str2arr(t).forEach((function(t,e){n.push({src:t})})),r={title:!1,footToolbar:["zoomIn","zoomOut","rotateRight","rotateLeft","actualSize"]}),this._viewer=new w(n,r)},t.decorators=[{type:e.Component,args:[{selector:"mtx-grid-cell",exportAs:"mtxGridCell",template:'\x3c!-- Formatting --\x3e\r\n<ng-container *ngIf="colDef.formatter; else defaultFormattingTpl">\r\n  <span [innerHTML]="colDef.formatter(rowData, colDef)"></span>\r\n</ng-container>\r\n\r\n\x3c!-- TODO: --\x3e\r\n<ng-template #defaultFormattingTpl>\r\n  <ng-container [ngSwitch]="colDef.type">\r\n    \x3c!-- Tag --\x3e\r\n    <ng-container *ngSwitchCase="\'tag\'">\r\n      <mat-chip-list *ngIf="colDef.tag[_colValue]; else tagEmptyTpl">\r\n        <mat-chip color="primary" [ngClass]="[\'bg-\' + colDef.tag[_colValue].color]">\r\n          {{colDef.tag[_colValue].text}}\r\n        </mat-chip>\r\n      </mat-chip-list>\r\n      <ng-template #tagEmptyTpl>{{_colValue}}</ng-template>\r\n    </ng-container>\r\n    \x3c!-- Image --\x3e\r\n    <ng-container *ngSwitchCase="\'image\'">\r\n      <img class="mat-cell-img" [src]="_colValue" (click)="_onPreview(_colValue)">\r\n    </ng-container>\r\n    \x3c!-- Link --\x3e\r\n    <ng-container *ngSwitchCase="\'link\'">\r\n      <a [href]="_colValue" target="_blank">{{_colValue}}</a>\r\n    </ng-container>\r\n    \x3c!-- Buttons --\x3e\r\n    <ng-container *ngSwitchCase="\'button\'">\r\n      <ng-container *ngFor="let btn of colDef.buttons; index as i; last as isLast;">\r\n        <ng-container *ngIf="!btn.iif || btn.iif(rowData)">\r\n          <ng-container *ngIf="btn.pop; else btnDefaultTpl">\r\n            <button class="mat-cell-action-button"\r\n                    *ngIf="btn.type===\'basic\'"\r\n                    mat-button\r\n                    [color]="btn.color || \'primary\'"\r\n                    [matTooltip]="btn.tooltip"\r\n                    (click)="_handleActionConfirm($event, btn.popTitle, btn.click, rowData)">\r\n              <mat-icon *ngIf="btn.icon">{{btn.icon}}</mat-icon> {{btn.text}}\r\n            </button>\r\n            <button class="mat-cell-action-button"\r\n                    *ngIf="!btn.type || btn.type===\'icon\'"\r\n                    mat-icon-button\r\n                    [color]="btn.color || \'primary\'"\r\n                    [matTooltip]="btn.tooltip"\r\n                    (click)="_handleActionConfirm($event, btn.popTitle, btn.click, rowData)">\r\n              <mat-icon>{{btn.icon}}</mat-icon>\r\n            </button>\r\n          </ng-container>\r\n          <ng-template #btnDefaultTpl>\r\n            <button class="mat-cell-action-button"\r\n                    *ngIf="btn.type===\'basic\'"\r\n                    mat-button\r\n                    [color]="btn.color || \'primary\'"\r\n                    [matTooltip]="btn.tooltip"\r\n                    (click)="_handleActionClick($event, btn, rowData)">\r\n              <mat-icon *ngIf="btn.icon">{{btn.icon}}</mat-icon> {{btn.text}}\r\n            </button>\r\n            <button class="mat-cell-action-button"\r\n                    *ngIf="!btn.type || btn.type===\'icon\'"\r\n                    mat-icon-button\r\n                    [color]="btn.color || \'primary\'"\r\n                    [matTooltip]="btn.tooltip"\r\n                    (click)="_handleActionClick($event, btn, rowData)">\r\n              <mat-icon>{{btn.icon}}</mat-icon>\r\n            </button>\r\n          </ng-template>\r\n        </ng-container>\r\n      </ng-container>\r\n    </ng-container>\r\n    \x3c!-- Number --\x3e\r\n    <ng-container *ngSwitchCase="\'number\'">\r\n      {{(_colValue | number) || \'--\'}}\r\n    </ng-container>\r\n    \x3c!-- Currency --\x3e\r\n    <ng-container *ngSwitchCase="\'currency\'">\r\n      {{(_colValue | currency) || \'--\'}}\r\n    </ng-container>\r\n    \x3c!-- Percent --\x3e\r\n    <ng-container *ngSwitchCase="\'percent\'">\r\n      {{(_colValue | percent) || \'--\'}}\r\n    </ng-container>\r\n    \x3c!-- Boolean --\x3e\r\n    <ng-container *ngSwitchCase="\'boolean\'">\r\n      {{_colValue}}\r\n    </ng-container>\r\n    \x3c!-- Default --\x3e\r\n    <ng-container *ngSwitchDefault>\r\n      {{_colValue || \'--\'}}\r\n    </ng-container>\r\n  </ng-container>\r\n</ng-template>\r\n'}]}],t.ctorParameters=function(){return[{type:b.MtxDialog},{type:C}]},t.propDecorators={rowData:[{type:e.Input}],colDef:[{type:e.Input}]},t}();var T=function(){function t(){this.columns=[],this.selectable=!0,this.selectedType="show",this.sortable=!0,this.dndSortable=!0,this._buttonText="",this.buttonType="stroked",this.buttonColor="",this.buttonClass="",this.buttonIcon="",this.selectionChange=new e.EventEmitter,this.sortChange=new e.EventEmitter}return Object.defineProperty(t.prototype,"buttonText",{get:function(){var t="Columns "+("show"===this.selectedType?"Shown":"Hidden");return this._buttonText?this._buttonText:t},set:function(t){this._buttonText=t},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"columnFields",{get:function(){var t=this;return this.columns.filter((function(e){return"show"===t.selectedType?e.show:!e.hide})).map((function(t){return t.field}))},enumerable:!0,configurable:!0}),t.prototype.ngOnInit=function(){},t.prototype._handleDroped=function(t){x.moveItemInArray(this.columns,t.previousIndex,t.currentIndex),this.sortChange.emit(this.columnFields)},t.prototype._handleSelection=function(t){this.selectionChange.emit(this.columnFields)},t.decorators=[{type:e.Component,args:[{selector:"mtx-grid-column-menu",exportAs:"mtxGridColumnMenu",template:'<ng-container [ngSwitch]="buttonType">\r\n  <ng-container *ngSwitchCase="\'raised\'">\r\n    <button [ngClass]="buttonClass" mat-raised-button [color]="buttonColor"\r\n            [matMenuTriggerFor]="menu">\r\n      <mat-icon *ngIf="buttonIcon">{{buttonIcon}}</mat-icon> {{buttonText}}\r\n    </button>\r\n  </ng-container>\r\n  <ng-container *ngSwitchCase="\'stroked\'">\r\n    <button [ngClass]="buttonClass" mat-stroked-button [color]="buttonColor"\r\n            [matMenuTriggerFor]="menu">\r\n      <mat-icon *ngIf="buttonIcon">{{buttonIcon}}</mat-icon> {{buttonText}}\r\n    </button>\r\n  </ng-container>\r\n  <ng-container *ngSwitchCase="\'flat\'">\r\n    <button [ngClass]="buttonClass" mat-flat-button [color]="buttonColor"\r\n            [matMenuTriggerFor]="menu">\r\n      <mat-icon *ngIf="buttonIcon">{{buttonIcon}}</mat-icon> {{buttonText}}\r\n    </button>\r\n  </ng-container>\r\n  <ng-container *ngSwitchCase="\'icon\'">\r\n    <button [ngClass]="buttonClass" mat-icon-button [color]="buttonColor"\r\n            [matMenuTriggerFor]="menu">\r\n      <mat-icon *ngIf="buttonIcon">{{buttonIcon}}</mat-icon>\r\n    </button>\r\n  </ng-container>\r\n  <ng-container *ngSwitchCase="\'fab\'">\r\n    <button [ngClass]="buttonClass" mat-fab [color]="buttonColor" [matMenuTriggerFor]="menu">\r\n      <mat-icon *ngIf="buttonIcon">{{buttonIcon}}</mat-icon> {{buttonText}}\r\n    </button>\r\n  </ng-container>\r\n  <ng-container *ngSwitchCase="\'mini-fab\'">\r\n    <button [ngClass]="buttonClass" mat-mini-fab [color]="buttonColor"\r\n            [matMenuTriggerFor]="menu">\r\n      <mat-icon *ngIf="buttonIcon">{{buttonIcon}}</mat-icon> {{buttonText}}\r\n    </button>\r\n  </ng-container>\r\n  <ng-container *ngSwitchDefault>\r\n    <button [ngClass]="buttonClass" mat-button [color]="buttonColor" [matMenuTriggerFor]="menu">\r\n      <mat-icon *ngIf="buttonIcon">{{buttonIcon}}</mat-icon> {{buttonText}}\r\n    </button>\r\n  </ng-container>\r\n</ng-container>\r\n\r\n<mat-menu #menu="matMenu" class="mtx-grid-column-menu">\r\n  <div class="mtx-grid-column-menu-inner"\r\n       (click)="$event.stopPropagation()"\r\n       (keydown)="$event.stopPropagation()">\r\n\r\n    <div class="mtx-grid-column-menu-list"\r\n         cdkDropList (cdkDropListDropped)="_handleDroped($event)"\r\n         *ngIf="sortable">\r\n      <div class="mtx-grid-column-menu-item" *ngFor="let col of columns"\r\n           cdkDrag [cdkDragDisabled]="selectedType === \'show\'? !col.show : col.hide">\r\n        <mat-icon cdkDragHandle>drag_handle</mat-icon>\r\n        <ng-template [ngTemplateOutlet]="checkboxList"\r\n                     [ngTemplateOutletContext]="{ $implicit: col }">\r\n        </ng-template>\r\n      </div>\r\n    </div>\r\n\r\n    <div class="mtx-grid-column-menu-list" *ngIf="!sortable">\r\n      <div class="mtx-grid-column-menu-item" *ngFor="let col of columns">\r\n        <ng-template [ngTemplateOutlet]="checkboxList"\r\n                     [ngTemplateOutletContext]="{ $implicit: col }">\r\n        </ng-template>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</mat-menu>\r\n\r\n<ng-template #checkboxList let-col>\r\n  <mat-checkbox class="mtx-grid-column-menu-item-label"\r\n                *ngIf="selectable"\r\n                [(ngModel)]="col[selectedType]"\r\n                [disabled]="col.disabled"\r\n                (change)="_handleSelection($event)">\r\n    {{col.label}}\r\n  </mat-checkbox>\r\n  <span class="mtx-grid-column-menu-item-label" *ngIf="!selectable">{{col.label}}</span>\r\n</ng-template>\r\n',encapsulation:e.ViewEncapsulation.None,changeDetection:e.ChangeDetectionStrategy.OnPush,styles:[".mtx-grid-column-menu .mat-menu-content{padding:0}.mtx-grid-column-menu-inner{padding:16px}.mtx-grid-column-menu-list{display:block;max-width:100%}.mtx-grid-column-menu-list.cdk-drop-list-dragging .mtx-grid-column-menu-item:not(.cdk-drag-placeholder){transition:transform 250ms cubic-bezier(0,0,.2,1)}.mtx-grid-column-menu-list.cdk-drop-list .mtx-grid-column-menu-item-label{padding:0 4px}.mtx-grid-column-menu-item{display:flex;flex-direction:row;align-items:center;padding:4px 0;color:rgba(0,0,0,.87)}.mtx-grid-column-menu-item.cdk-drag-disabled .cdk-drag-handle{opacity:.35;cursor:no-drop}.mtx-grid-column-menu-item .cdk-drag-handle{cursor:move}.mtx-grid-column-menu-item.cdk-drag-preview{box-shadow:0 3px 3px -2px rgba(0,0,0,.2),0 3px 4px 0 rgba(0,0,0,.14),0 1px 8px 0 rgba(0,0,0,.12)}.mtx-grid-column-menu-item.cdk-drag-placeholder{opacity:0}.mtx-grid-column-menu-item.cdk-drag-animating{transition:transform 250ms cubic-bezier(0,0,.2,1)}"]}]}],t.ctorParameters=function(){return[]},t.propDecorators={columns:[{type:e.Input}],selectable:[{type:e.Input}],selectedType:[{type:e.Input}],sortable:[{type:e.Input}],dndSortable:[{type:e.Input}],buttonText:[{type:e.Input}],buttonType:[{type:e.Input}],buttonColor:[{type:e.Input}],buttonClass:[{type:e.Input}],buttonIcon:[{type:e.Input}],selectionChange:[{type:e.Output}],sortChange:[{type:e.Output}]},t}();var v=function(){function t(){this._opened=!1,this.toggleChange=new e.EventEmitter}return Object.defineProperty(t.prototype,"expended",{get:function(){return this._opened},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"expandableRow",{set:function(t){t!==this._row&&(this._row=t)},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"template",{set:function(t){t!==this._tplRef&&(this._tplRef=t)},enumerable:!0,configurable:!0}),t.prototype.onClick=function(t){t.preventDefault(),t.stopPropagation(),this.toggle()},t.prototype.toggle=function(){this._opened=!this._opened,this.toggleChange.emit(this)},t.decorators=[{type:e.Directive,args:[{selector:"[mtx-expansion-toggle]"}]}],t.ctorParameters=function(){return[]},t.propDecorators={expended:[{type:e.HostBinding,args:["class.expanded"]}],expandableRow:[{type:e.Input}],template:[{type:e.Input,args:["expansionRowTpl"]}],toggleChange:[{type:e.Output}],onClick:[{type:e.HostListener,args:["click",["$event"]]}]},t}();var k=function(){function t(t){this._dataGrid=t,this._selected=!1,this.shiftKeyPressed=!1,this.ctrlKeyPressed=!1,this.cellSelectionChange=new e.EventEmitter}return Object.defineProperty(t.prototype,"selected",{get:function(){return this._selected},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"matSelectableRowData",{set:function(t){t!==this._rowData&&(this._rowData=t)},enumerable:!0,configurable:!0}),t.prototype.onClick=function(t){this.ctrlKeyPressed=t.ctrlKey,this.shiftKeyPressed=t.shiftKey,this._dataGrid.cellSelectable&&this.select()},t.prototype.select=function(){this._selected=!0,this.cellSelectionChange.emit(this)},t.prototype.deselect=function(){this._selected=!1,this.cellSelectionChange.emit(this)},t.prototype.toggle=function(){this._selected=!this._selected,this.cellSelectionChange.emit(this)},t.decorators=[{type:e.Directive,args:[{selector:"[mtx-selectable-cell]"}]}],t.ctorParameters=function(){return[{type:S}]},t.propDecorators={selected:[{type:e.HostBinding,args:["class.selected"]}],matSelectableRowData:[{type:e.Input}],cellSelectionChange:[{type:e.Output}],onClick:[{type:e.HostListener,args:["click",["$event"]]}]},t}();var _=function(){function t(){}return t.decorators=[{type:e.NgModule,args:[{imports:[n.CommonModule,r.FormsModule,o.MatTableModule,a.MatSortModule,l.MatPaginatorModule,i.MatCheckboxModule,c.MatButtonModule,s.MatProgressBarModule,d.MatChipsModule,m.MatTooltipModule,p.MatIconModule,b.MtxDialogModule,g.MatSelectModule,u.MatFormFieldModule,h.MatMenuModule,x.DragDropModule],exports:[S,I,T,v,k],declarations:[S,I,T,v,k],providers:[C]}]}],t}();t.MtxGridCellComponent=I,t.MtxGridCellSelectionDirective=k,t.MtxGridColumnMenuComponent=T,t.MtxGridComponent=S,t.MtxGridExpansionToggleDirective=v,t.MtxGridModule=_,t.MtxGridService=C,Object.defineProperty(t,"__esModule",{value:!0})}));
//# sourceMappingURL=mtxGrid.umd.min.js.map