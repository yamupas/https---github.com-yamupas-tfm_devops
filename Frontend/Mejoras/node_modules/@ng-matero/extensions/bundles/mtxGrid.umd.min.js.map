{"version":3,"sources":["ng://@ng-matero/extensions/data-grid/grid.service.ts","ng://@ng-matero/extensions/data-grid/grid.component.ts","ng://@ng-matero/extensions/data-grid/cell.component.ts","ng://@ng-matero/extensions/data-grid/column-menu.component.ts","ng://@ng-matero/extensions/data-grid/expansion-toggle.directive.ts","ng://@ng-matero/extensions/data-grid/cell-selection.directive.ts","ng://@ng-matero/extensions/data-grid/grid.module.ts"],"names":["MtxGridService","prototype","getCellValue","data","col","keyArr","field","split","tmp","forEach","key","i","str2arr","str","replace","Injectable","MtxGridComponent","_dataGridSrv","this","columns","length","loading","tooltip","pageOnFront","showPaginator","pageDisabled","showFirstLastButtons","pageIndex","pageSize","pageSizeOptions","hidePageSize","page","EventEmitter","sortOnFront","sortChange","rowHover","rowStriped","expansionRowStates","expandable","expansionChange","multiSelectable","rowSelection","SelectionModel","rowSelected","rowSelectable","hideRowSelectionCheckbox","rowSelectionFormatter","rowClassFormatter","rowSelectionChange","cellSelection","cellSelectable","cellSelectionChange","showToolbar","toolbarTitle","columnMenuData","showColumnMenuButton","columnMenuButtonText","columnMenuButtonType","columnMenuButtonColor","columnMenuButtonClass","columnMenuButtonIcon","columnHideable","columnHidingChecked","columnHidingChange","columnMovable","columnMovingChange","columnPinnable","columnPinningChange","noResultText","showSummary","showSidebar","Object","defineProperty","_getColData","colDef","map","item","_formatSummary","summary","_isString","_isFunction","_isTemplateRef","obj","TemplateRef","fn","toString","call","ngOnInit","ngOnChanges","_this","_countPinnedPosition","displayedColumns","filter","hide","label","show","disabled","unshift","_a","_","push","expanded","dataSource","MatTableDataSource","paginator","sort","ngOnDestroy","count","acc","cur","parseFloat","width","pinnedLeftCols","pinned","idx","left","slice","reduce","pinnedRightCols","reverse","right","_isOddRow","index","dataIndex","_getIndex","_handleSortChange","emit","_handleExpansionChange","expansionRef","rowData","column","opened","expended","_selectCell","cellRef","_selectedCell","colValue","cellData","deselect","selected","undefined","_selectRow","event","hideCheckbox","ctrlKey","metaKey","clear","_toggleNormalCheckbox","_isAllSelected","_toggleMasterCheckbox","row","select","toggle","_handleColumnHidingChange","assign","_handleColumnMovingChange","toggleExpansion","Error","Component","args","selector","exportAs","template","host","class","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","animations","trigger","state","style","height","minHeight","visibility","transition","animate","ViewChild","MatPaginator","static","MatSort","Input","Output","MtxGridCellComponent","_dialog","_colValue","_handleActionConfirm","title","preventDefault","stopPropagation","confirm","_handleActionClick","btn","click","_onPreview","urlStr","multi","imgs","options","url","src","footToolbar","_viewer","PhotoViewer","MtxDialog","MtxGridColumnMenuComponent","selectable","selectedType","sortable","dndSortable","_buttonText","buttonType","buttonColor","buttonClass","buttonIcon","selectionChange","defaultText","value","_handleDroped","moveItemInArray","previousIndex","currentIndex","columnFields","_handleSelection","e","MtxGridExpansionToggleDirective","_opened","toggleChange","_row","_tplRef","onClick","Directive","HostBinding","HostListener","MtxGridCellSelectionDirective","_dataGrid","_selected","shiftKeyPressed","ctrlKeyPressed","_rowData","shiftKey","MtxGridModule","NgModule","imports","CommonModule","FormsModule","MatTableModule","MatSortModule","MatPaginatorModule","MatCheckboxModule","MatButtonModule","MatProgressBarModule","MatChipsModule","MatTooltipModule","MatIconModule","MtxDialogModule","MatSelectModule","MatFormFieldModule","MatMenuModule","DragDropModule","exports","declarations","providers"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { MtxGridColumn } from './grid.interface';\r\n\r\n@Injectable()\r\nexport class MtxGridService {\r\n  constructor() {}\r\n\r\n  /**\r\n   * Get cell value from column key\r\n   * @param data row data\r\n   * @param col  column definition e.g. `a.b.c`\r\n   */\r\n  getCellValue(data: {}, col: MtxGridColumn) {\r\n    const keyArr = col.field ? col.field.split('.') : [];\r\n\r\n    let tmp = '';\r\n\r\n    keyArr.forEach((key: string, i: number) => {\r\n      if (i === 0) {\r\n        tmp = data[key];\r\n      } else {\r\n        tmp = tmp && tmp[key];\r\n      }\r\n    });\r\n    return tmp;\r\n  }\r\n\r\n  /**\r\n   * Remove white spaces in a string and convert string to array\r\n   * @param str string\r\n   */\r\n  str2arr(str: string) {\r\n    return str.replace(/[\\r\\n\\s]/g, '').split(',');\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  OnInit,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  ViewEncapsulation,\r\n  ChangeDetectionStrategy,\r\n  ViewChild,\r\n  OnChanges,\r\n  TemplateRef,\r\n  TrackByFunction,\r\n  OnDestroy,\r\n} from '@angular/core';\r\nimport { trigger, state, style, transition, animate } from '@angular/animations';\r\nimport { SelectionModel } from '@angular/cdk/collections';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\nimport { MatPaginator, PageEvent } from '@angular/material/paginator';\r\nimport { Sort, MatSort } from '@angular/material/sort';\r\n\r\nimport {\r\n  MtxGridColumn,\r\n  MtxGridColumnSelectionItem,\r\n  MtxGridCellTemplate,\r\n  MtxGridRowSelectionFormatter,\r\n  MtxGridRowClassFormatter,\r\n} from './grid.interface';\r\nimport { MtxGridCellSelectionDirective } from './cell-selection.directive';\r\nimport { MtxGridExpansionToggleDirective } from './expansion-toggle.directive';\r\nimport { MtxGridService } from './grid.service';\r\n\r\n@Component({\r\n  selector: 'mtx-grid',\r\n  exportAs: 'mtxGrid',\r\n  templateUrl: './grid.component.html',\r\n  styleUrls: ['./grid.component.scss'],\r\n  host: {\r\n    class: 'mtx-grid',\r\n  },\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  animations: [\r\n    trigger('expansion', [\r\n      state('collapsed', style({ height: '0', minHeight: '0', visibility: 'hidden' })),\r\n      state('expanded', style({ height: '*', visibility: 'visible' })),\r\n      transition('expanded <=> collapsed', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)')),\r\n    ]),\r\n  ],\r\n})\r\nexport class MtxGridComponent implements OnInit, OnChanges, OnDestroy {\r\n  @ViewChild(MatPaginator, { static: true }) paginator: MatPaginator;\r\n  @ViewChild(MatSort, { static: true }) sort: MatSort;\r\n\r\n  dataSource: MatTableDataSource<any>;\r\n\r\n  @Input() displayedColumns: string[];\r\n\r\n  @Input() columns: MtxGridColumn[] = [];\r\n  @Input() data = [];\r\n  @Input() length = 0;\r\n  @Input() loading = false;\r\n\r\n  // Tracking function\r\n  @Input() trackBy: TrackByFunction<any>;\r\n\r\n  /** Whether to show tooltip on columns */\r\n  @Input() tooltip = true;\r\n\r\n  /** Whether to page on the front end */\r\n  @Input() pageOnFront = true;\r\n  @Input() showPaginator = true;\r\n  @Input() pageDisabled = false;\r\n  @Input() showFirstLastButtons = true;\r\n  @Input() pageIndex = 0;\r\n  @Input() pageSize = 10;\r\n  @Input() pageSizeOptions = [10, 50, 100];\r\n  @Input() hidePageSize = false;\r\n  @Output() page = new EventEmitter<PageEvent>();\r\n\r\n  /** Sort */\r\n\r\n  @Input() sortOnFront = true;\r\n  @Output() sortChange = new EventEmitter<Sort>();\r\n\r\n  /** Hover & Striped style */\r\n\r\n  @Input() rowHover = false;\r\n  @Input() rowStriped = false;\r\n\r\n  /** Expandable row */\r\n\r\n  expansionRowStates = [];\r\n\r\n  @Input() expandable = false;\r\n  @Input() expansionTemplate: TemplateRef<any>;\r\n  @Output() expansionChange = new EventEmitter<any>();\r\n\r\n  /** Whether support multiple row/cell selection */\r\n\r\n  @Input() multiSelectable = true;\r\n\r\n  /** Row selection */\r\n\r\n  rowSelection: SelectionModel<any> = new SelectionModel<any>(true, []);\r\n\r\n  @Input() rowSelected = [];\r\n  @Input() rowSelectable = false;\r\n  @Input() hideRowSelectionCheckbox = false;\r\n  @Input() rowSelectionFormatter: MtxGridRowSelectionFormatter = {};\r\n  @Input() rowClassFormatter: MtxGridRowClassFormatter = {};\r\n  @Output() rowSelectionChange = new EventEmitter<any[]>();\r\n\r\n  /** Cell selection */\r\n\r\n  cellSelection = [];\r\n\r\n  @Input() cellSelectable = true;\r\n  @Output() cellSelectionChange = new EventEmitter<any[]>();\r\n\r\n  private _selectedCell: MtxGridCellSelectionDirective;\r\n\r\n  /** Toolbar */\r\n\r\n  @Input() showToolbar = false;\r\n  @Input() toolbarTitle = '';\r\n  @Input() toolbarTemplate: TemplateRef<any>;\r\n\r\n  columnMenuData: MtxGridColumnSelectionItem[] = [];\r\n\r\n  @Input() showColumnMenuButton = true;\r\n  @Input() columnMenuButtonText = '';\r\n  @Input() columnMenuButtonType = 'stroked';\r\n  @Input() columnMenuButtonColor = '';\r\n  @Input() columnMenuButtonClass = '';\r\n  @Input() columnMenuButtonIcon = '';\r\n\r\n  @Input() columnHideable = true;\r\n  @Input() columnHidingChecked: 'show' | 'hide' = 'show';\r\n  @Output() columnHidingChange = new EventEmitter<string[]>();\r\n\r\n  @Input() columnMovable = true;\r\n  @Output() columnMovingChange = new EventEmitter<string[]>();\r\n\r\n  @Input() columnPinnable = true;\r\n  @Output() columnPinningChange = new EventEmitter<string[]>();\r\n\r\n  /** No Result */\r\n  @Input() noResultText = 'No records found';\r\n  @Input() noResultTemplate: TemplateRef<any>;\r\n\r\n  get _hasNoResult() {\r\n    return (!this.data || this.data.length === 0) && !this.loading;\r\n  }\r\n\r\n  /** thead */\r\n  @Input() headerTemplate: TemplateRef<any> | MtxGridCellTemplate;\r\n\r\n  /** tbody */\r\n  @Input() cellTemplate: TemplateRef<any> | MtxGridCellTemplate;\r\n\r\n  /** tfoot */\r\n  @Input() showSummary = false;\r\n  @Input() summaryTemplate: TemplateRef<any> | MtxGridCellTemplate;\r\n\r\n  // TODO:\r\n  get _whetherShowSummary() {\r\n    return this.showSummary;\r\n  }\r\n\r\n  /** Sidebar */\r\n  @Input() showSidebar = false;\r\n\r\n  _getColData(data: any, colDef: MtxGridColumn) {\r\n    return data.map((item: any) => item[colDef.field]);\r\n  }\r\n\r\n  _formatSummary(summary: any, data: any, colDef: MtxGridColumn) {\r\n    if (this._isString(summary)) {\r\n      return summary;\r\n    } else if (this._isFunction(summary)) {\r\n      const colData = this._getColData(data, colDef);\r\n      return summary(colData, colDef);\r\n    }\r\n  }\r\n\r\n  constructor(private _dataGridSrv: MtxGridService) {}\r\n\r\n  _isTemplateRef(obj: any) {\r\n    return obj instanceof TemplateRef;\r\n  }\r\n\r\n  _isString(fn: any) {\r\n    return Object.prototype.toString.call(fn) === '[object String]';\r\n  }\r\n\r\n  _isFunction(fn: any) {\r\n    return Object.prototype.toString.call(fn) === '[object Function]';\r\n  }\r\n\r\n  ngOnInit() {}\r\n\r\n  // Waiting for async data\r\n  ngOnChanges() {\r\n    this._countPinnedPosition();\r\n\r\n    this.displayedColumns = this.columns.filter(item => !item.hide).map(item => item.field);\r\n\r\n    if (this.showColumnMenuButton) {\r\n      this.columnMenuData = this.columns.map(item => {\r\n        return {\r\n          label: item.header as string,\r\n          field: item.field,\r\n          show: !item.hide,\r\n          hide: item.hide,\r\n          disabled: item.disabled,\r\n        };\r\n      });\r\n    }\r\n\r\n    if (this.rowSelectable && !this.hideRowSelectionCheckbox) {\r\n      this.displayedColumns.unshift('MtxGridCheckboxColumnDef');\r\n    }\r\n\r\n    // We should copy each item of data for expansion data\r\n    if (this.expandable) {\r\n      this.expansionRowStates = []; // reset\r\n\r\n      this.data?.forEach(_ => {\r\n        this.expansionRowStates.push({ expanded: false });\r\n      });\r\n    }\r\n\r\n    // TODO:\r\n    this.dataSource = new MatTableDataSource<any>(this.data);\r\n\r\n    if (this.pageOnFront) {\r\n      this.dataSource.paginator = this.paginator;\r\n    }\r\n\r\n    if (this.sortOnFront) {\r\n      this.dataSource.sort = this.sort;\r\n    }\r\n\r\n    if (this.rowSelectable) {\r\n      this.rowSelection = new SelectionModel<any>(this.multiSelectable, this.rowSelected);\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {}\r\n\r\n  _countPinnedPosition() {\r\n    const count = (acc: number, cur: MtxGridColumn) => acc + parseFloat(cur.width || '80px');\r\n\r\n    const pinnedLeftCols = this.columns.filter(col => col.pinned && col.pinned === 'left');\r\n    pinnedLeftCols.forEach((item, idx) => {\r\n      item.left = pinnedLeftCols.slice(0, idx).reduce(count, 0) + 'px';\r\n    });\r\n\r\n    const pinnedRightCols = this.columns\r\n      .filter(col => col.pinned && col.pinned === 'right')\r\n      .reverse();\r\n    pinnedRightCols.forEach((item, idx) => {\r\n      item.right = pinnedRightCols.slice(0, idx).reduce(count, 0) + 'px';\r\n    });\r\n  }\r\n\r\n  _isOddRow(index: number, dataIndex: number) {\r\n    return typeof index === 'undefined' ? dataIndex % 2 : index % 2;\r\n  }\r\n\r\n  _getIndex(index: number, dataIndex: number) {\r\n    return typeof index === 'undefined' ? dataIndex : index;\r\n  }\r\n\r\n  _handleSortChange(sort: Sort) {\r\n    this.sortChange.emit(sort);\r\n  }\r\n\r\n  /** Expansion change event */\r\n  _handleExpansionChange(\r\n    expansionRef: MtxGridExpansionToggleDirective,\r\n    rowData: any,\r\n    column: any,\r\n    index: number\r\n  ) {\r\n    if (this.expandable) {\r\n      this.expansionRowStates[index].expanded = !this.expansionRowStates[index].expanded;\r\n    }\r\n    this.expansionChange.emit({ opened: expansionRef.expended, data: rowData, index, column });\r\n  }\r\n\r\n  /** Cell select event */\r\n  _selectCell(cellRef: MtxGridCellSelectionDirective, rowData: any, colDef: any): void {\r\n    // If not the same cell\r\n    if (this._selectedCell !== cellRef) {\r\n      const colValue = this._dataGridSrv.getCellValue(rowData, colDef);\r\n      this.cellSelection = []; // reset\r\n      this.cellSelection.push({ cellData: colValue, rowData, colDef });\r\n\r\n      this.cellSelectionChange.emit(this.cellSelection);\r\n\r\n      if (this._selectedCell) {\r\n        this._selectedCell.deselect(); // the selectedCell will be undefined\r\n      }\r\n    }\r\n\r\n    this._selectedCell = cellRef.selected ? cellRef : undefined;\r\n  }\r\n\r\n  /** Row select event */\r\n  _selectRow(event: MouseEvent, rowData: any) {\r\n    if (\r\n      this.rowSelectable &&\r\n      !(this.rowSelectionFormatter.disabled && this.rowSelectionFormatter.disabled(rowData)) &&\r\n      !(this.rowSelectionFormatter.hideCheckbox && this.rowSelectionFormatter.hideCheckbox(rowData))\r\n    ) {\r\n      // metaKey -> command key\r\n      if (!event.ctrlKey && !event.metaKey) {\r\n        this.rowSelection.clear();\r\n      }\r\n\r\n      this._toggleNormalCheckbox(rowData);\r\n    }\r\n  }\r\n\r\n  /** Whether the number of selected elements matches the total number of rows. */\r\n  _isAllSelected() {\r\n    const numSelected = this.rowSelection.selected.length;\r\n    const numRows = this.dataSource.data.length;\r\n    return numSelected === numRows;\r\n  }\r\n\r\n  /** Select all rows if they are not all selected; otherwise clear selection. */\r\n  _toggleMasterCheckbox() {\r\n    this._isAllSelected()\r\n      ? this.rowSelection.clear()\r\n      : this.dataSource.data.forEach(row => this.rowSelection.select(row));\r\n    this.rowSelectionChange.emit(this.rowSelection.selected);\r\n  }\r\n\r\n  /** Select normal row */\r\n  _toggleNormalCheckbox(row: any) {\r\n    this.rowSelection.toggle(row);\r\n    this.rowSelectionChange.emit(this.rowSelection.selected);\r\n  }\r\n\r\n  /** Column change event */\r\n\r\n  _handleColumnHidingChange(columns: string[]) {\r\n    this.columnHidingChange.emit(columns);\r\n\r\n    this.displayedColumns = Object.assign([], columns);\r\n\r\n    if (this.rowSelectable && !this.hideRowSelectionCheckbox) {\r\n      this.displayedColumns.unshift('MtxGridCheckboxColumnDef');\r\n    }\r\n  }\r\n\r\n  _handleColumnMovingChange(columns: string[]) {\r\n    this.columnMovingChange.emit(columns);\r\n\r\n    this.displayedColumns = Object.assign([], columns);\r\n\r\n    if (this.rowSelectable && !this.hideRowSelectionCheckbox) {\r\n      this.displayedColumns.unshift('MtxGridCheckboxColumnDef');\r\n    }\r\n  }\r\n\r\n  /** Customize expansion event */\r\n  toggleExpansion(index: number) {\r\n    if (!this.expandable) {\r\n      throw new Error('The `expandable` should be set true.');\r\n    }\r\n    this.expansionRowStates[index].expanded = !this.expansionRowStates[index].expanded;\r\n    return this.expansionRowStates[index].expanded;\r\n  }\r\n}\r\n","import { Component, OnInit, Input } from '@angular/core';\r\nimport { MtxDialog } from '@ng-matero/extensions/dialog';\r\nimport { MtxGridColumn, MtxGridColumnButton } from './grid.interface';\r\nimport { MtxGridService } from './grid.service';\r\nimport PhotoViewer from 'photoviewer';\r\n\r\n@Component({\r\n  selector: 'mtx-grid-cell',\r\n  exportAs: 'mtxGridCell',\r\n  templateUrl: './cell.component.html',\r\n})\r\nexport class MtxGridCellComponent implements OnInit {\r\n  /** Row data */\r\n  @Input() rowData = {};\r\n\r\n  /** Column definition */\r\n  @Input() colDef: MtxGridColumn;\r\n\r\n  _colValue = '';\r\n\r\n  _viewer: PhotoViewer;\r\n\r\n  constructor(private _dialog: MtxDialog, private _dataGridSrv: MtxGridService) {}\r\n\r\n  ngOnInit() {\r\n    this._colValue = this._dataGridSrv.getCellValue(this.rowData, this.colDef);\r\n  }\r\n\r\n  _handleActionConfirm(event: MouseEvent, title: string, fn?: (p: any) => void, data?: any) {\r\n    event.preventDefault();\r\n    event.stopPropagation();\r\n    this._dialog.confirm(title, () => fn(data));\r\n  }\r\n\r\n  _handleActionClick(event: MouseEvent, btn: MtxGridColumnButton, rowData: any) {\r\n    event.preventDefault();\r\n    event.stopPropagation();\r\n    btn.click(rowData);\r\n  }\r\n\r\n  /** Preview big image */\r\n  _onPreview(urlStr: string, multi = false) {\r\n    const imgs = [];\r\n\r\n    let options: PhotoViewer.Options = {};\r\n\r\n    if (multi) {\r\n      this._dataGridSrv.str2arr(urlStr).forEach((url, index) => {\r\n        imgs.push({ title: index + 1, src: url });\r\n      });\r\n    } else {\r\n      this._dataGridSrv.str2arr(urlStr).forEach((url, index) => {\r\n        imgs.push({ src: url });\r\n      });\r\n\r\n      options = {\r\n        title: false,\r\n        footToolbar: ['zoomIn', 'zoomOut', 'rotateRight', 'rotateLeft', 'actualSize'],\r\n      };\r\n    }\r\n\r\n    this._viewer = new PhotoViewer(imgs, options);\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  OnInit,\r\n  Input,\r\n  ViewEncapsulation,\r\n  ChangeDetectionStrategy,\r\n  Output,\r\n  EventEmitter,\r\n} from '@angular/core';\r\nimport { CdkDragDrop, moveItemInArray } from '@angular/cdk/drag-drop';\r\nimport { MtxGridColumnSelectionItem } from './grid.interface';\r\n\r\n@Component({\r\n  selector: 'mtx-grid-column-menu',\r\n  exportAs: 'mtxGridColumnMenu',\r\n  templateUrl: './column-menu.component.html',\r\n  styleUrls: ['./column-menu.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class MtxGridColumnMenuComponent implements OnInit {\r\n  @Input() columns = [];\r\n  @Input() selectable = true;\r\n  @Input() selectedType: 'show' | 'hide' = 'show';\r\n  @Input() sortable = true;\r\n  @Input() dndSortable = true;\r\n\r\n  @Input() get buttonText() {\r\n    const defaultText = `Columns ${this.selectedType === 'show' ? 'Shown' : 'Hidden'}`;\r\n    const text = this._buttonText ? this._buttonText : defaultText;\r\n    return text;\r\n  }\r\n  set buttonText(value: string) {\r\n    this._buttonText = value;\r\n  }\r\n  private _buttonText = '';\r\n\r\n  @Input() buttonType: 'raised' | 'stroked' | 'flat' | 'icon' | 'fab' | 'mini-fab' | '' = 'stroked';\r\n  @Input() buttonColor: 'primary' | 'accent' | 'warn' | '' = '';\r\n  @Input() buttonClass = '';\r\n  @Input() buttonIcon = '';\r\n\r\n  @Output() selectionChange = new EventEmitter<string[]>();\r\n  @Output() sortChange = new EventEmitter<string[]>();\r\n\r\n  get columnFields(): string[] {\r\n    const fields = this.columns\r\n      .filter((item: MtxGridColumnSelectionItem) =>\r\n        this.selectedType === 'show' ? item.show : !item.hide\r\n      )\r\n      .map((item: MtxGridColumnSelectionItem) => item.field);\r\n    return fields;\r\n  }\r\n\r\n  constructor() {}\r\n\r\n  ngOnInit() {}\r\n\r\n  _handleDroped(event: CdkDragDrop<string[]>) {\r\n    moveItemInArray(this.columns, event.previousIndex, event.currentIndex);\r\n    this.sortChange.emit(this.columnFields);\r\n  }\r\n\r\n  _handleSelection(e: any) {\r\n    this.selectionChange.emit(this.columnFields);\r\n  }\r\n}\r\n","import {\r\n  Directive,\r\n  EventEmitter,\r\n  HostBinding,\r\n  HostListener,\r\n  Input,\r\n  Output,\r\n  TemplateRef,\r\n} from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[mtx-expansion-toggle]',\r\n})\r\nexport class MtxGridExpansionToggleDirective {\r\n  private _opened = false;\r\n  private _row: any;\r\n  private _tplRef: TemplateRef<any>;\r\n\r\n  @HostBinding('class.expanded')\r\n  get expended(): boolean {\r\n    return this._opened;\r\n  }\r\n\r\n  @Input()\r\n  set expandableRow(value: any) {\r\n    if (value !== this._row) {\r\n      this._row = value;\r\n    }\r\n  }\r\n\r\n  @Input('expansionRowTpl')\r\n  set template(value: TemplateRef<any>) {\r\n    if (value !== this._tplRef) {\r\n      this._tplRef = value;\r\n    }\r\n  }\r\n\r\n  @Output() toggleChange = new EventEmitter<MtxGridExpansionToggleDirective>();\r\n\r\n  constructor() {}\r\n\r\n  @HostListener('click', ['$event'])\r\n  onClick(event: MouseEvent): void {\r\n    event.preventDefault();\r\n    event.stopPropagation();\r\n    this.toggle();\r\n  }\r\n\r\n  toggle(): void {\r\n    this._opened = !this._opened;\r\n    this.toggleChange.emit(this);\r\n  }\r\n}\r\n","import {\r\n  Directive,\r\n  EventEmitter,\r\n  HostBinding,\r\n  HostListener,\r\n  Input,\r\n  Output,\r\n} from '@angular/core';\r\n\r\nimport { MtxGridComponent } from './grid.component';\r\n\r\n@Directive({\r\n  selector: '[mtx-selectable-cell]',\r\n})\r\nexport class MtxGridCellSelectionDirective {\r\n  private _selected = false;\r\n  private _rowData: any;\r\n\r\n  shiftKeyPressed = false;\r\n  ctrlKeyPressed = false;\r\n\r\n  @HostBinding('class.selected')\r\n  get selected(): boolean {\r\n    return this._selected;\r\n  }\r\n\r\n  @Input()\r\n  set matSelectableRowData(value: any) {\r\n    if (value !== this._rowData) {\r\n      this._rowData = value;\r\n    }\r\n  }\r\n\r\n  @Output() cellSelectionChange = new EventEmitter<MtxGridCellSelectionDirective>();\r\n\r\n  constructor(private _dataGrid: MtxGridComponent) { }\r\n\r\n  @HostListener('click', ['$event'])\r\n  onClick(event: MouseEvent): void {\r\n    this.ctrlKeyPressed = event.ctrlKey;\r\n    this.shiftKeyPressed = event.shiftKey;\r\n\r\n    if (this._dataGrid.cellSelectable) {\r\n      this.select();\r\n    }\r\n  }\r\n\r\n  select(): void {\r\n    this._selected = true;\r\n    this.cellSelectionChange.emit(this);\r\n  }\r\n\r\n  deselect(): void {\r\n    this._selected = false;\r\n    this.cellSelectionChange.emit(this);\r\n  }\r\n\r\n  toggle(): void {\r\n    this._selected = !this._selected;\r\n    this.cellSelectionChange.emit(this);\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { MatTableModule } from '@angular/material/table';\r\nimport { MatSortModule } from '@angular/material/sort';\r\nimport { MatPaginatorModule } from '@angular/material/paginator';\r\nimport { MatCheckboxModule } from '@angular/material/checkbox';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\r\nimport { MatChipsModule } from '@angular/material/chips';\r\nimport { MatTooltipModule } from '@angular/material/tooltip';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { DragDropModule } from '@angular/cdk/drag-drop';\r\n\r\nimport { MtxDialogModule } from '@ng-matero/extensions/dialog';\r\nimport { MtxGridComponent } from './grid.component';\r\nimport { MtxGridCellComponent } from './cell.component';\r\nimport { MtxGridColumnMenuComponent } from './column-menu.component';\r\nimport { MtxGridExpansionToggleDirective } from './expansion-toggle.directive';\r\nimport { MtxGridCellSelectionDirective } from './cell-selection.directive';\r\nimport { MtxGridService } from './grid.service';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    MatTableModule,\r\n    MatSortModule,\r\n    MatPaginatorModule,\r\n    MatCheckboxModule,\r\n    MatButtonModule,\r\n    MatProgressBarModule,\r\n    MatChipsModule,\r\n    MatTooltipModule,\r\n    MatIconModule,\r\n    MtxDialogModule,\r\n    MatSelectModule,\r\n    MatFormFieldModule,\r\n    MatMenuModule,\r\n    DragDropModule,\r\n  ],\r\n  exports: [\r\n    MtxGridComponent,\r\n    MtxGridCellComponent,\r\n    MtxGridColumnMenuComponent,\r\n    MtxGridExpansionToggleDirective,\r\n    MtxGridCellSelectionDirective,\r\n  ],\r\n  declarations: [\r\n    MtxGridComponent,\r\n    MtxGridCellComponent,\r\n    MtxGridColumnMenuComponent,\r\n    MtxGridExpansionToggleDirective,\r\n    MtxGridCellSelectionDirective,\r\n  ],\r\n  providers: [MtxGridService],\r\n})\r\nexport class MtxGridModule {}\r\n"]}