{"version":3,"sources":["ng://@ng-matero/extensions/color-picker/color-picker.component.ts","ng://@ng-matero/extensions/color-picker/color-picker.module.ts"],"names":["nextUniqueId","MtxColorPickerComponent","_focusMonitor","_elementRef","_changeDetectorRef","_zone","ngControl","_formField","_document","_this","this","_value","stateChanges","Subject","_uid","_focused","_required","_disabled","errorState","controlType","_onChange","_onTouched","colorChange","EventEmitter","_panelOpen","_canOpenOnNextFocus","_windowBlurHandler","activeElement","nativeElement","monitor","subscribe","origin","next","valueAccessor","Object","defineProperty","prototype","newValue","_id","value","_placeholder","focused","empty","coerceBooleanProperty","ngOnInit","ngDoCheck","invalid","touched","ngAfterViewInit","window","runOutsideAngular","addEventListener","_supportsShadowDom","element","rootNode","getRootNode","_isInsideShadowRoot","ShadowRoot","ngOnDestroy","complete","stopMonitoring","setDescribedByIds","ids","_ariaDescribedby","join","onContainerClick","writeValue","markForCheck","registerOnChange","fn","registerOnTouched","_handleFocus","trigger","openMenu","_closingActionsSubscription","merge","_getOutsideClickStream","pipe","event","closeMenu","unsubscribe","_openPanel","_closePanel","_onColorChanged","model","color","hex","emit","$event","fromEvent","filter","clickTarget","composedPath","target","formField","contains","Component","args","selector","exportAs","template","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","providers","provide","MatFormFieldControl","useExisting","FocusMonitor","ElementRef","ChangeDetectorRef","NgZone","NgControl","decorators","type","Optional","Self","MatFormField","Host","Inject","DOCUMENT","Input","Output","ViewChild","MatMenuTrigger","static","MtxColorPickerModule","NgModule","imports","CommonModule","FormsModule","MatMenuModule","MatFormFieldModule","MatInputModule","ColorChromeModule","exports","declarations"],"mappings":"spCAgCIA,EAAe,eA4IjB,SAAAC,EACUC,EACAC,EACAC,EACAC,EACmBC,EACCC,EACUC,GAPxC,IAAAC,EAAAC,KACUA,KAAAR,cAAAA,EACAQ,KAAAP,YAAAA,EACAO,KAAAN,mBAAAA,EACAM,KAAAL,MAAAA,EACmBK,KAAAJ,UAAAA,EACCI,KAAAH,WAAAA,EACUG,KAAAF,UAAAA,EAtHhCE,KAAAC,OAAS,GAGRD,KAAAE,aAA8B,IAAIC,EAAAA,QAGnCH,KAAAI,KAAO,oBAAoBd,IA4B3BU,KAAAK,UAAW,EAkBXL,KAAAM,WAAY,EAUZN,KAAAO,WAAY,EAEpBP,KAAAQ,YAAa,EAGbR,KAAAS,YAAc,mBAMdT,KAAAU,UAAS,aAGTV,KAAAW,WAAU,aAGSX,KAAAY,YAAc,IAAIC,EAAAA,aAKrCb,KAAAc,YAAa,EAaLd,KAAAe,qBAAsB,EAMtBf,KAAAgB,mBAAkB,WAIxBjB,EAAKgB,oBACHhB,EAAKD,UAAUmB,gBAAkBlB,EAAKN,YAAYyB,eAAiBnB,EAAKe,YAY1EtB,EAAc2B,QAAQ1B,GAAa,GAAM2B,WAAS,SAACC,GAC7CtB,EAAKM,WAAagB,GACpBtB,EAAKY,aAEPZ,EAAKM,WAAagB,EAClBtB,EAAKG,aAAaoB,UAGE,MAAlBtB,KAAKJ,YACPI,KAAKJ,UAAU2B,cAAgBvB,MAmIrC,OA7QEwB,OAAAC,eACIlC,EAAAmC,UAAA,QAAK,KADT,WAEE,OAAO1B,KAAKC,YAEd,SAAU0B,GACR3B,KAAKC,OAAS0B,EACd3B,KAAKU,UAAUiB,GACf3B,KAAKE,aAAaoB,wCAWpBE,OAAAC,eACIlC,EAAAmC,UAAA,KAAE,KADN,WAEE,OAAO1B,KAAK4B,SAEd,SAAOC,GACL7B,KAAK4B,IAAMC,GAAS7B,KAAKI,KACzBJ,KAAKE,aAAaoB,wCAKpBE,OAAAC,eACIlC,EAAAmC,UAAA,cAAW,KADf,WAEE,OAAO1B,KAAK8B,kBAEd,SAAgBD,GACd7B,KAAK8B,aAAeD,EACpB7B,KAAKE,aAAaoB,wCAKpBE,OAAAC,eAAIlC,EAAAmC,UAAA,UAAO,KAAX,WACE,OAAO1B,KAAKK,UAAYL,KAAKc,4CAI/BU,OAAAC,eAAIlC,EAAAmC,UAAA,QAAK,KAAT,WACE,OAAQ1B,KAAK6B,uCAGfL,OAAAC,eAAIlC,EAAAmC,UAAA,mBAAgB,KAApB,WACE,OAAO1B,KAAK+B,UAAY/B,KAAKgC,uCAG/BR,OAAAC,eACIlC,EAAAmC,UAAA,WAAQ,KADZ,WAEE,OAAO1B,KAAKM,eAEd,SAAauB,GACX7B,KAAKM,UAAY2B,EAAAA,sBAAsBJ,GACvC7B,KAAKE,aAAaoB,wCAIpBE,OAAAC,eACIlC,EAAAmC,UAAA,WAAQ,KADZ,WAEE,OAAO1B,KAAKO,eAEd,SAAasB,GACX7B,KAAKO,UAAY0B,EAAAA,sBAAsBJ,GACvC7B,KAAKE,aAAaoB,wCAyEpB/B,EAAAmC,UAAAQ,SAAA,aAEA3C,EAAAmC,UAAAS,UAAA,WACMnC,KAAKJ,YACPI,KAAKQ,WAAaR,KAAKJ,UAAUwC,SAAWpC,KAAKJ,UAAUyC,QAC3DrC,KAAKE,aAAaoB,SAItB/B,EAAAmC,UAAAY,gBAAA,WAAA,IAAAvC,EAAAC,KACE,GAAsB,oBAAXuC,SACTvC,KAAKL,MAAM6C,mBAAiB,WAC1BD,OAAOE,iBAAiB,OAAQ1C,EAAKiB,uBAGnC0B,EAAAA,sBAAsB,KAClBC,EAAU3C,KAAKP,YAAYyB,cAC3B0B,EAAWD,EAAQE,YAAcF,EAAQE,cAAgB,KAI/D7C,KAAK8C,oBAAsBF,aAAoB,OAAgBG,aAKrExD,EAAAmC,UAAAsB,YAAA,WACEhD,KAAKE,aAAa+C,WAClBjD,KAAKR,cAAc0D,eAAelD,KAAKP,cAIzCF,EAAAmC,UAAAyB,kBAAA,SAAkBC,GAChBpD,KAAKqD,iBAAmBD,EAAIE,KAAK,MAInC/D,EAAAmC,UAAA6B,iBAAA,aAQAhE,EAAAmC,UAAA8B,WAAA,SAAW3B,GACT7B,KAAKC,OAAS4B,GAAS,GACvB7B,KAAKN,mBAAmB+D,gBAU1BlE,EAAAmC,UAAAgC,iBAAA,SAAiBC,GACf3D,KAAKU,UAAYiD,GAUnBpE,EAAAmC,UAAAkC,kBAAA,SAAkBD,GAChB3D,KAAKW,WAAagD,GAIpBpE,EAAAmC,UAAAmC,aAAA,WAAA,IAAA9D,EAAAC,KACEA,KAAK8D,QAAQC,WAEb/D,KAAKgE,4BAA8BC,EAAAA,MAAMjE,KAAKkE,0BAC3CC,OACA/C,WAAS,SAACgD,GACTrE,EAAK+D,QAAQO,YACbtE,EAAKiE,4BAA4BM,kBAKvC/E,EAAAmC,UAAA6C,WAAA,WACMvE,KAAKK,WACPL,KAAKc,YAAa,IAKtBvB,EAAAmC,UAAA8C,YAAA,WACMxE,KAAKc,aACPd,KAAKc,YAAa,EAClBd,KAAKN,mBAAmB+D,eACxBzD,KAAKW,eAKTpB,EAAAmC,UAAA+C,gBAAA,SAAgBC,GACd1E,KAAK6B,MAAQ6C,EAAMC,MAAMC,IACzB5E,KAAKY,YAAYiE,KAAK,CAAEF,MAAOD,EAAMC,MAAOG,OAAQJ,EAAMI,UAIpDvF,EAAAmC,UAAAwC,uBAAR,WAAA,IAAAnE,EAAAC,KACE,OAAOiE,EAAAA,MACLc,EAAAA,UAAU/E,KAAKF,UAAW,SAC1BiF,EAAAA,UAAU/E,KAAKF,UAAW,aAC1BqE,KACAa,EAAAA,QAAM,SAACZ,OAGCa,EAAelF,EAAK+C,qBAAuBsB,EAAMc,aACnDd,EAAMc,eAAe,GACrBd,EAAMe,OACJC,EAAYrF,EAAKF,WAAaE,EAAKF,WAAWJ,YAAYyB,cAAgB,KAEhF,QACE+D,IAAgBlF,EAAKN,YAAYyB,eAC/BkE,GAAcA,EAAUC,SAASJ,6BA1R5CK,EAAAA,UAASC,KAAA,CAAC,CACTC,SAAU,mBACVC,SAAU,iBACVC,SAAA,2qBAEAC,cAAeC,EAAAA,kBAAkBC,KACjCC,gBAAiBC,EAAAA,wBAAwBC,OACzCC,UAAW,CAAC,CAAEC,QAASC,EAAAA,oBAAqBC,YAAa7G,iWAnBlD8G,EAAAA,oBAbPC,EAAAA,kBAJAC,EAAAA,yBAaAC,EAAAA,cAG6BC,EAAAA,UAASC,WAAA,CAAA,CAAAC,KA4JnCC,EAAAA,UAAQ,CAAAD,KAAIE,EAAAA,cAxJaC,EAAAA,aAAYJ,WAAA,CAAA,CAAAC,KAyJrCC,EAAAA,UAAQ,CAAAD,KAAII,EAAAA,uCACZH,EAAAA,UAAQ,CAAAD,KAAIK,EAAAA,OAAMzB,KAAA,CAAC0B,EAAAA,8CA/HrBC,EAAAA,kBAkBAA,EAAAA,2BAWAA,EAAAA,wBAwBAA,EAAAA,wBAUAA,EAAAA,2BAyBAC,EAAAA,wBAEAC,EAAAA,UAAS7B,KAAA,CAAC8B,EAAAA,eAAgB,CAAEC,QAAQ,OAmLvC/H,sBCtTA,SAAAgI,KAYmC,2BAZlCC,EAAAA,SAAQjC,KAAA,CAAC,CACRkC,QAAS,CACPC,EAAAA,aACAC,EAAAA,YACAC,EAAAA,cACAC,EAAAA,mBACAC,EAAAA,eACAC,EAAAA,mBAEFC,QAAS,CAACzI,GACV0I,aAAc,CAAC1I,OAEkBgI","sourcesContent":["import {\n  Component,\n  OnInit,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  OnDestroy,\n  Optional,\n  Self,\n  ElementRef,\n  Input,\n  Output,\n  EventEmitter,\n  Inject,\n  DoCheck,\n  ViewChild,\n  Host,\n  AfterViewInit,\n  NgZone,\n} from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\nimport { ControlValueAccessor, NgControl } from '@angular/forms';\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { _supportsShadowDom } from '@angular/cdk/platform';\nimport { MatFormFieldControl, MatFormField } from '@angular/material/form-field';\nimport { MatMenuTrigger } from '@angular/material/menu';\nimport { Subject, Observable, merge, fromEvent, Subscription } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\nimport { Color } from 'ngx-color';\n\nlet nextUniqueId = 0;\n\n@Component({\n  selector: 'mtx-color-picker',\n  exportAs: 'mtxColorPicker',\n  templateUrl: './color-picker.component.html',\n  styleUrls: ['./color-picker.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [{ provide: MatFormFieldControl, useExisting: MtxColorPickerComponent }],\n})\nexport class MtxColorPickerComponent\n  implements\n    OnInit,\n    OnDestroy,\n    DoCheck,\n    AfterViewInit,\n    ControlValueAccessor,\n    MatFormFieldControl<any> {\n  /** Value of the color picker control. */\n  @Input()\n  get value(): string | null {\n    return this._value;\n  }\n  set value(newValue: string | null) {\n    this._value = newValue;\n    this._onChange(newValue);\n    this.stateChanges.next();\n  }\n  private _value = '';\n\n  /** Implemented as part of MatFormFieldControl. */\n  readonly stateChanges: Subject<void> = new Subject<void>();\n\n  /** Unique id for this input. */\n  private _uid = `mtx-color-picker-${nextUniqueId++}`;\n\n  /** Unique id of the element. */\n  @Input()\n  get id(): string {\n    return this._id;\n  }\n  set id(value: string) {\n    this._id = value || this._uid;\n    this.stateChanges.next();\n  }\n  private _id: string;\n\n  /** Placeholder to be shown if value is empty. */\n  @Input()\n  get placeholder(): string {\n    return this._placeholder;\n  }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n  private _placeholder: string;\n\n  /** Whether the input is focused. */\n  get focused(): boolean {\n    return this._focused || this._panelOpen;\n  }\n  private _focused = false;\n\n  get empty(): boolean {\n    return !this.value;\n  }\n\n  get shouldLabelFloat(): boolean {\n    return this.focused || !this.empty;\n  }\n\n  @Input()\n  get required(): boolean {\n    return this._required;\n  }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n  private _required = false;\n\n  @Input()\n  get disabled(): boolean {\n    return this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n  private _disabled = false;\n\n  errorState = false;\n\n  /** A name for this control that can be used by `mat-form-field`. */\n  controlType = 'mtx-color-picker';\n\n  /** The aria-describedby attribute on the color picker for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when color picker has been touched` */\n  _onTouched = () => {};\n\n  /** Event emitted when the color changed */\n  @Output() readonly colorChange = new EventEmitter<{ color: Color; $event: MouseEvent }>();\n\n  @ViewChild(MatMenuTrigger, { static: true }) trigger: MatMenuTrigger;\n\n  /** Whether or not the overlay panel is open. */\n  _panelOpen = false;\n\n  /** The subscription for closing actions (some are bound to document). */\n  private _closingActionsSubscription: Subscription;\n\n  /** Whether the element is inside of a ShadowRoot component. */\n  private _isInsideShadowRoot: boolean;\n\n  /**\n   * Whether the color picker can open the next time it is focused. Used to prevent a focused,\n   * closed color picker from being reopened if the user switches to another browser tab and then\n   * comes back.\n   */\n  private _canOpenOnNextFocus = true;\n\n  /**\n   * Event handler for when the window is blurred. Needs to be an\n   * arrow function in order to preserve the context.\n   */\n  private _windowBlurHandler = () => {\n    // If the user blurred the window while the color picker is focused, it means that it'll be\n    // refocused when they come back. In this case we want to skip the first focus event, if the\n    // pane was closed, in order to avoid reopening it unintentionally.\n    this._canOpenOnNextFocus =\n      this._document.activeElement !== this._elementRef.nativeElement || this._panelOpen;\n  };\n\n  constructor(\n    private _focusMonitor: FocusMonitor,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _zone: NgZone,\n    @Optional() @Self() public ngControl: NgControl,\n    @Optional() @Host() private _formField: MatFormField,\n    @Optional() @Inject(DOCUMENT) private _document: any\n  ) {\n    _focusMonitor.monitor(_elementRef, true).subscribe(origin => {\n      if (this._focused && !origin) {\n        this._onTouched();\n      }\n      this._focused = !!origin;\n      this.stateChanges.next();\n    });\n\n    if (this.ngControl != null) {\n      this.ngControl.valueAccessor = this;\n    }\n  }\n\n  ngOnInit() {}\n\n  ngDoCheck(): void {\n    if (this.ngControl) {\n      this.errorState = this.ngControl.invalid && this.ngControl.touched;\n      this.stateChanges.next();\n    }\n  }\n\n  ngAfterViewInit() {\n    if (typeof window !== 'undefined') {\n      this._zone.runOutsideAngular(() => {\n        window.addEventListener('blur', this._windowBlurHandler);\n      });\n\n      if (_supportsShadowDom()) {\n        const element = this._elementRef.nativeElement;\n        const rootNode = element.getRootNode ? element.getRootNode() : null;\n\n        // We need to take the `ShadowRoot` off of `window`, because the built-in types are\n        // incorrect. See https://github.com/Microsoft/TypeScript/issues/27929.\n        this._isInsideShadowRoot = rootNode instanceof (window as any).ShadowRoot;\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this.stateChanges.complete();\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Implemented as part of MatFormFieldControl. */\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  /** Implemented as part of MatFormFieldControl. */\n  onContainerClick() {}\n\n  /**\n   * Sets the color-picker's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param value New value to be written to the model.\n   */\n  writeValue(value: string | null): void {\n    this._value = value || '';\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Saves a callback function to be invoked when the color-picker's value\n   * changes from user input. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the value changes.\n   */\n  registerOnChange(fn: any): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Saves a callback function to be invoked when the color picker is blurred\n   * by the user. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the component has been touched.\n   */\n  registerOnTouched(fn: any): void {\n    this._onTouched = fn;\n  }\n\n  /** Open panel with input focus event. */\n  _handleFocus() {\n    this.trigger.openMenu();\n\n    this._closingActionsSubscription = merge(this._getOutsideClickStream())\n      .pipe()\n      .subscribe(event => {\n        this.trigger.closeMenu();\n        this._closingActionsSubscription.unsubscribe();\n      });\n  }\n\n  /** Opens the overlay panel. */\n  _openPanel() {\n    if (this._focused) {\n      this._panelOpen = true;\n    }\n  }\n\n  /** Closes the overlay panel and focuses the host element. */\n  _closePanel() {\n    if (this._panelOpen) {\n      this._panelOpen = false;\n      this._changeDetectorRef.markForCheck();\n      this._onTouched();\n    }\n  }\n\n  /** The callback of color changed. */\n  _onColorChanged(model: { color: Color; $event: MouseEvent }) {\n    this.value = model.color.hex;\n    this.colorChange.emit({ color: model.color, $event: model.$event });\n  }\n\n  /** Stream of clicks outside of the color picker panel. */\n  private _getOutsideClickStream(): Observable<any> {\n    return merge(\n      fromEvent(this._document, 'click') as Observable<MouseEvent>,\n      fromEvent(this._document, 'touchend') as Observable<TouchEvent>\n    ).pipe(\n      filter(event => {\n        // If we're in the Shadow DOM, the event target will be the shadow root, so we have to\n        // fall back to check the first element in the path of the click event.\n        const clickTarget = (this._isInsideShadowRoot && event.composedPath\n          ? event.composedPath()[0]\n          : event.target) as HTMLElement;\n        const formField = this._formField ? this._formField._elementRef.nativeElement : null;\n\n        return (\n          clickTarget !== this._elementRef.nativeElement &&\n          (!formField || !formField.contains(clickTarget))\n        );\n      })\n    );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\n\nimport { ColorChromeModule } from 'ngx-color/chrome';\n\nimport { MtxColorPickerComponent } from './color-picker.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    MatMenuModule,\n    MatFormFieldModule,\n    MatInputModule,\n    ColorChromeModule,\n  ],\n  exports: [MtxColorPickerComponent],\n  declarations: [MtxColorPickerComponent],\n})\nexport class MtxColorPickerModule {}\n"]}