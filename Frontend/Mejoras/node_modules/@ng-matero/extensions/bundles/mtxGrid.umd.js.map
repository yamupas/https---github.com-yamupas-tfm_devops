{"version":3,"file":"mtxGrid.umd.js","sources":["ng://@ng-matero/extensions/data-grid/grid.interface.ts","ng://@ng-matero/extensions/data-grid/grid.service.ts","ng://@ng-matero/extensions/data-grid/grid.component.ts","ng://@ng-matero/extensions/data-grid/cell.component.ts","ng://@ng-matero/extensions/data-grid/column-menu.component.ts","ng://@ng-matero/extensions/data-grid/expansion-toggle.directive.ts","ng://@ng-matero/extensions/data-grid/cell-selection.directive.ts","ng://@ng-matero/extensions/data-grid/grid.module.ts"],"sourcesContent":["import { TemplateRef } from '@angular/core';\r\n\r\n/**\r\n * Tag\r\n */\r\nexport interface MtxGridColumnTag {\r\n  [key: number]: MtxGridColumnTagValue;\r\n  [key: string]: MtxGridColumnTagValue;\r\n}\r\nexport interface MtxGridColumnTagValue {\r\n  text?: string;\r\n  color?: string;\r\n}\r\n\r\n/**\r\n * Button\r\n */\r\nexport interface MtxGridColumnButton {\r\n  type?: 'basic' | 'icon';\r\n  text?: string;\r\n  icon?: string;\r\n  color?: 'primary' | 'accent' | 'warn';\r\n  click?: (record: any) => void;\r\n  pop?: boolean;\r\n  popTitle?: string;\r\n  children?: MtxGridColumnButton[];\r\n  iif?: (record: any) => boolean;\r\n  tooltip?: string;\r\n}\r\n\r\n/**\r\n * Grid\r\n */\r\nexport interface MtxGridColumn {\r\n  field: string;\r\n  header?: string;\r\n  hide?: boolean;\r\n  disabled?: boolean;\r\n  pinned?: 'left' | 'right';\r\n  left?: string;\r\n  right?: string;\r\n  width?: string;\r\n  resizable?: boolean;\r\n  sortable?: boolean | string;\r\n  type?: 'tag' | 'button' | 'link' | 'image' | 'number' | 'currency' | 'percent' | 'boolean';\r\n  tag?: MtxGridColumnTag;\r\n  buttons?: MtxGridColumnButton[];\r\n  formatter?: (rowData: any, colDef?: any) => void;\r\n  cellTemplate?: TemplateRef<any> | null;\r\n  showExpand?: boolean;\r\n  description?: string;\r\n  i18n?: string;\r\n  summary?: ((colData: any, colDef?: any) => void) | string;\r\n}\r\n\r\n/**\r\n * Column selection\r\n */\r\nexport interface MtxGridColumnSelectionItem {\r\n  label: string;\r\n  field: string;\r\n  show?: boolean;\r\n  hide?: boolean;\r\n  disabled?: boolean;\r\n}\r\n\r\n/**\r\n * Cell Template\r\n */\r\nexport interface MtxGridCellTemplate {\r\n  [key: string]: TemplateRef<any>;\r\n}\r\n\r\n/**\r\n * Row Selection Formatter\r\n */\r\nexport interface MtxGridRowSelectionFormatter {\r\n  disabled?: (rowData: any) => boolean;\r\n  hideCheckbox?: (rowData: any) => boolean;\r\n}\r\n\r\n/**\r\n * Row Class Formatter\r\n */\r\nexport interface MtxGridRowClassFormatter {\r\n  [className: string]: (rowData: any) => boolean;\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { MtxGridColumn } from './grid.interface';\r\n\r\n@Injectable()\r\nexport class MtxGridService {\r\n  constructor() {}\r\n\r\n  /**\r\n   * Get cell value from column key\r\n   * @param data row data\r\n   * @param col  column definition e.g. `a.b.c`\r\n   */\r\n  getCellValue(data: {}, col: MtxGridColumn) {\r\n    const keyArr = col.field ? col.field.split('.') : [];\r\n\r\n    let tmp = '';\r\n\r\n    keyArr.forEach((key: string, i: number) => {\r\n      if (i === 0) {\r\n        tmp = data[key];\r\n      } else {\r\n        tmp = tmp && tmp[key];\r\n      }\r\n    });\r\n    return tmp;\r\n  }\r\n\r\n  /**\r\n   * Remove white spaces in a string and convert string to array\r\n   * @param str string\r\n   */\r\n  str2arr(str: string) {\r\n    return str.replace(/[\\r\\n\\s]/g, '').split(',');\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  OnInit,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  ViewEncapsulation,\r\n  ChangeDetectionStrategy,\r\n  ViewChild,\r\n  OnChanges,\r\n  TemplateRef,\r\n  TrackByFunction,\r\n  OnDestroy,\r\n} from '@angular/core';\r\nimport { trigger, state, style, transition, animate } from '@angular/animations';\r\nimport { SelectionModel } from '@angular/cdk/collections';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\nimport { MatPaginator, PageEvent } from '@angular/material/paginator';\r\nimport { Sort, MatSort } from '@angular/material/sort';\r\n\r\nimport {\r\n  MtxGridColumn,\r\n  MtxGridColumnSelectionItem,\r\n  MtxGridCellTemplate,\r\n  MtxGridRowSelectionFormatter,\r\n  MtxGridRowClassFormatter,\r\n} from './grid.interface';\r\nimport { MtxGridCellSelectionDirective } from './cell-selection.directive';\r\nimport { MtxGridExpansionToggleDirective } from './expansion-toggle.directive';\r\nimport { MtxGridService } from './grid.service';\r\n\r\n@Component({\r\n  selector: 'mtx-grid',\r\n  exportAs: 'mtxGrid',\r\n  templateUrl: './grid.component.html',\r\n  styleUrls: ['./grid.component.scss'],\r\n  host: {\r\n    class: 'mtx-grid',\r\n  },\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  animations: [\r\n    trigger('expansion', [\r\n      state('collapsed', style({ height: '0', minHeight: '0', visibility: 'hidden' })),\r\n      state('expanded', style({ height: '*', visibility: 'visible' })),\r\n      transition('expanded <=> collapsed', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)')),\r\n    ]),\r\n  ],\r\n})\r\nexport class MtxGridComponent implements OnInit, OnChanges, OnDestroy {\r\n  @ViewChild(MatPaginator, { static: true }) paginator: MatPaginator;\r\n  @ViewChild(MatSort, { static: true }) sort: MatSort;\r\n\r\n  dataSource: MatTableDataSource<any>;\r\n\r\n  @Input() displayedColumns: string[];\r\n\r\n  @Input() columns: MtxGridColumn[] = [];\r\n  @Input() data = [];\r\n  @Input() length = 0;\r\n  @Input() loading = false;\r\n\r\n  // Tracking function\r\n  @Input() trackBy: TrackByFunction<any>;\r\n\r\n  /** Whether to show tooltip on columns */\r\n  @Input() tooltip = true;\r\n\r\n  /** Whether to page on the front end */\r\n  @Input() pageOnFront = true;\r\n  @Input() showPaginator = true;\r\n  @Input() pageDisabled = false;\r\n  @Input() showFirstLastButtons = true;\r\n  @Input() pageIndex = 0;\r\n  @Input() pageSize = 10;\r\n  @Input() pageSizeOptions = [10, 50, 100];\r\n  @Input() hidePageSize = false;\r\n  @Output() page = new EventEmitter<PageEvent>();\r\n\r\n  /** Sort */\r\n\r\n  @Input() sortOnFront = true;\r\n  @Output() sortChange = new EventEmitter<Sort>();\r\n\r\n  /** Hover & Striped style */\r\n\r\n  @Input() rowHover = false;\r\n  @Input() rowStriped = false;\r\n\r\n  /** Expandable row */\r\n\r\n  expansionRowStates = [];\r\n\r\n  @Input() expandable = false;\r\n  @Input() expansionTemplate: TemplateRef<any>;\r\n  @Output() expansionChange = new EventEmitter<any>();\r\n\r\n  /** Whether support multiple row/cell selection */\r\n\r\n  @Input() multiSelectable = true;\r\n\r\n  /** Row selection */\r\n\r\n  rowSelection: SelectionModel<any> = new SelectionModel<any>(true, []);\r\n\r\n  @Input() rowSelected = [];\r\n  @Input() rowSelectable = false;\r\n  @Input() hideRowSelectionCheckbox = false;\r\n  @Input() rowSelectionFormatter: MtxGridRowSelectionFormatter = {};\r\n  @Input() rowClassFormatter: MtxGridRowClassFormatter = {};\r\n  @Output() rowSelectionChange = new EventEmitter<any[]>();\r\n\r\n  /** Cell selection */\r\n\r\n  cellSelection = [];\r\n\r\n  @Input() cellSelectable = true;\r\n  @Output() cellSelectionChange = new EventEmitter<any[]>();\r\n\r\n  private _selectedCell: MtxGridCellSelectionDirective;\r\n\r\n  /** Toolbar */\r\n\r\n  @Input() showToolbar = false;\r\n  @Input() toolbarTitle = '';\r\n  @Input() toolbarTemplate: TemplateRef<any>;\r\n\r\n  columnMenuData: MtxGridColumnSelectionItem[] = [];\r\n\r\n  @Input() showColumnMenuButton = true;\r\n  @Input() columnMenuButtonText = '';\r\n  @Input() columnMenuButtonType = 'stroked';\r\n  @Input() columnMenuButtonColor = '';\r\n  @Input() columnMenuButtonClass = '';\r\n  @Input() columnMenuButtonIcon = '';\r\n\r\n  @Input() columnHideable = true;\r\n  @Input() columnHidingChecked: 'show' | 'hide' = 'show';\r\n  @Output() columnHidingChange = new EventEmitter<string[]>();\r\n\r\n  @Input() columnMovable = true;\r\n  @Output() columnMovingChange = new EventEmitter<string[]>();\r\n\r\n  @Input() columnPinnable = true;\r\n  @Output() columnPinningChange = new EventEmitter<string[]>();\r\n\r\n  /** No Result */\r\n  @Input() noResultText = 'No records found';\r\n  @Input() noResultTemplate: TemplateRef<any>;\r\n\r\n  get _hasNoResult() {\r\n    return (!this.data || this.data.length === 0) && !this.loading;\r\n  }\r\n\r\n  /** thead */\r\n  @Input() headerTemplate: TemplateRef<any> | MtxGridCellTemplate;\r\n\r\n  /** tbody */\r\n  @Input() cellTemplate: TemplateRef<any> | MtxGridCellTemplate;\r\n\r\n  /** tfoot */\r\n  @Input() showSummary = false;\r\n  @Input() summaryTemplate: TemplateRef<any> | MtxGridCellTemplate;\r\n\r\n  // TODO:\r\n  get _whetherShowSummary() {\r\n    return this.showSummary;\r\n  }\r\n\r\n  /** Sidebar */\r\n  @Input() showSidebar = false;\r\n\r\n  _getColData(data: any, colDef: MtxGridColumn) {\r\n    return data.map((item: any) => item[colDef.field]);\r\n  }\r\n\r\n  _formatSummary(summary: any, data: any, colDef: MtxGridColumn) {\r\n    if (this._isString(summary)) {\r\n      return summary;\r\n    } else if (this._isFunction(summary)) {\r\n      const colData = this._getColData(data, colDef);\r\n      return summary(colData, colDef);\r\n    }\r\n  }\r\n\r\n  constructor(private _dataGridSrv: MtxGridService) {}\r\n\r\n  _isTemplateRef(obj: any) {\r\n    return obj instanceof TemplateRef;\r\n  }\r\n\r\n  _isString(fn: any) {\r\n    return Object.prototype.toString.call(fn) === '[object String]';\r\n  }\r\n\r\n  _isFunction(fn: any) {\r\n    return Object.prototype.toString.call(fn) === '[object Function]';\r\n  }\r\n\r\n  ngOnInit() {}\r\n\r\n  // Waiting for async data\r\n  ngOnChanges() {\r\n    this._countPinnedPosition();\r\n\r\n    this.displayedColumns = this.columns.filter(item => !item.hide).map(item => item.field);\r\n\r\n    if (this.showColumnMenuButton) {\r\n      this.columnMenuData = this.columns.map(item => {\r\n        return {\r\n          label: item.header as string,\r\n          field: item.field,\r\n          show: !item.hide,\r\n          hide: item.hide,\r\n          disabled: item.disabled,\r\n        };\r\n      });\r\n    }\r\n\r\n    if (this.rowSelectable && !this.hideRowSelectionCheckbox) {\r\n      this.displayedColumns.unshift('MtxGridCheckboxColumnDef');\r\n    }\r\n\r\n    // We should copy each item of data for expansion data\r\n    if (this.expandable) {\r\n      this.expansionRowStates = []; // reset\r\n\r\n      this.data?.forEach(_ => {\r\n        this.expansionRowStates.push({ expanded: false });\r\n      });\r\n    }\r\n\r\n    // TODO:\r\n    this.dataSource = new MatTableDataSource<any>(this.data);\r\n\r\n    if (this.pageOnFront) {\r\n      this.dataSource.paginator = this.paginator;\r\n    }\r\n\r\n    if (this.sortOnFront) {\r\n      this.dataSource.sort = this.sort;\r\n    }\r\n\r\n    if (this.rowSelectable) {\r\n      this.rowSelection = new SelectionModel<any>(this.multiSelectable, this.rowSelected);\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {}\r\n\r\n  _countPinnedPosition() {\r\n    const count = (acc: number, cur: MtxGridColumn) => acc + parseFloat(cur.width || '80px');\r\n\r\n    const pinnedLeftCols = this.columns.filter(col => col.pinned && col.pinned === 'left');\r\n    pinnedLeftCols.forEach((item, idx) => {\r\n      item.left = pinnedLeftCols.slice(0, idx).reduce(count, 0) + 'px';\r\n    });\r\n\r\n    const pinnedRightCols = this.columns\r\n      .filter(col => col.pinned && col.pinned === 'right')\r\n      .reverse();\r\n    pinnedRightCols.forEach((item, idx) => {\r\n      item.right = pinnedRightCols.slice(0, idx).reduce(count, 0) + 'px';\r\n    });\r\n  }\r\n\r\n  _isOddRow(index: number, dataIndex: number) {\r\n    return typeof index === 'undefined' ? dataIndex % 2 : index % 2;\r\n  }\r\n\r\n  _getIndex(index: number, dataIndex: number) {\r\n    return typeof index === 'undefined' ? dataIndex : index;\r\n  }\r\n\r\n  _handleSortChange(sort: Sort) {\r\n    this.sortChange.emit(sort);\r\n  }\r\n\r\n  /** Expansion change event */\r\n  _handleExpansionChange(\r\n    expansionRef: MtxGridExpansionToggleDirective,\r\n    rowData: any,\r\n    column: any,\r\n    index: number\r\n  ) {\r\n    if (this.expandable) {\r\n      this.expansionRowStates[index].expanded = !this.expansionRowStates[index].expanded;\r\n    }\r\n    this.expansionChange.emit({ opened: expansionRef.expended, data: rowData, index, column });\r\n  }\r\n\r\n  /** Cell select event */\r\n  _selectCell(cellRef: MtxGridCellSelectionDirective, rowData: any, colDef: any): void {\r\n    // If not the same cell\r\n    if (this._selectedCell !== cellRef) {\r\n      const colValue = this._dataGridSrv.getCellValue(rowData, colDef);\r\n      this.cellSelection = []; // reset\r\n      this.cellSelection.push({ cellData: colValue, rowData, colDef });\r\n\r\n      this.cellSelectionChange.emit(this.cellSelection);\r\n\r\n      if (this._selectedCell) {\r\n        this._selectedCell.deselect(); // the selectedCell will be undefined\r\n      }\r\n    }\r\n\r\n    this._selectedCell = cellRef.selected ? cellRef : undefined;\r\n  }\r\n\r\n  /** Row select event */\r\n  _selectRow(event: MouseEvent, rowData: any) {\r\n    if (\r\n      this.rowSelectable &&\r\n      !(this.rowSelectionFormatter.disabled && this.rowSelectionFormatter.disabled(rowData)) &&\r\n      !(this.rowSelectionFormatter.hideCheckbox && this.rowSelectionFormatter.hideCheckbox(rowData))\r\n    ) {\r\n      // metaKey -> command key\r\n      if (!event.ctrlKey && !event.metaKey) {\r\n        this.rowSelection.clear();\r\n      }\r\n\r\n      this._toggleNormalCheckbox(rowData);\r\n    }\r\n  }\r\n\r\n  /** Whether the number of selected elements matches the total number of rows. */\r\n  _isAllSelected() {\r\n    const numSelected = this.rowSelection.selected.length;\r\n    const numRows = this.dataSource.data.length;\r\n    return numSelected === numRows;\r\n  }\r\n\r\n  /** Select all rows if they are not all selected; otherwise clear selection. */\r\n  _toggleMasterCheckbox() {\r\n    this._isAllSelected()\r\n      ? this.rowSelection.clear()\r\n      : this.dataSource.data.forEach(row => this.rowSelection.select(row));\r\n    this.rowSelectionChange.emit(this.rowSelection.selected);\r\n  }\r\n\r\n  /** Select normal row */\r\n  _toggleNormalCheckbox(row: any) {\r\n    this.rowSelection.toggle(row);\r\n    this.rowSelectionChange.emit(this.rowSelection.selected);\r\n  }\r\n\r\n  /** Column change event */\r\n\r\n  _handleColumnHidingChange(columns: string[]) {\r\n    this.columnHidingChange.emit(columns);\r\n\r\n    this.displayedColumns = Object.assign([], columns);\r\n\r\n    if (this.rowSelectable && !this.hideRowSelectionCheckbox) {\r\n      this.displayedColumns.unshift('MtxGridCheckboxColumnDef');\r\n    }\r\n  }\r\n\r\n  _handleColumnMovingChange(columns: string[]) {\r\n    this.columnMovingChange.emit(columns);\r\n\r\n    this.displayedColumns = Object.assign([], columns);\r\n\r\n    if (this.rowSelectable && !this.hideRowSelectionCheckbox) {\r\n      this.displayedColumns.unshift('MtxGridCheckboxColumnDef');\r\n    }\r\n  }\r\n\r\n  /** Customize expansion event */\r\n  toggleExpansion(index: number) {\r\n    if (!this.expandable) {\r\n      throw new Error('The `expandable` should be set true.');\r\n    }\r\n    this.expansionRowStates[index].expanded = !this.expansionRowStates[index].expanded;\r\n    return this.expansionRowStates[index].expanded;\r\n  }\r\n}\r\n","import { Component, OnInit, Input } from '@angular/core';\r\nimport { MtxDialog } from '@ng-matero/extensions/dialog';\r\nimport { MtxGridColumn, MtxGridColumnButton } from './grid.interface';\r\nimport { MtxGridService } from './grid.service';\r\nimport PhotoViewer from 'photoviewer';\r\n\r\n@Component({\r\n  selector: 'mtx-grid-cell',\r\n  exportAs: 'mtxGridCell',\r\n  templateUrl: './cell.component.html',\r\n})\r\nexport class MtxGridCellComponent implements OnInit {\r\n  /** Row data */\r\n  @Input() rowData = {};\r\n\r\n  /** Column definition */\r\n  @Input() colDef: MtxGridColumn;\r\n\r\n  _colValue = '';\r\n\r\n  _viewer: PhotoViewer;\r\n\r\n  constructor(private _dialog: MtxDialog, private _dataGridSrv: MtxGridService) {}\r\n\r\n  ngOnInit() {\r\n    this._colValue = this._dataGridSrv.getCellValue(this.rowData, this.colDef);\r\n  }\r\n\r\n  _handleActionConfirm(event: MouseEvent, title: string, fn?: (p: any) => void, data?: any) {\r\n    event.preventDefault();\r\n    event.stopPropagation();\r\n    this._dialog.confirm(title, () => fn(data));\r\n  }\r\n\r\n  _handleActionClick(event: MouseEvent, btn: MtxGridColumnButton, rowData: any) {\r\n    event.preventDefault();\r\n    event.stopPropagation();\r\n    btn.click(rowData);\r\n  }\r\n\r\n  /** Preview big image */\r\n  _onPreview(urlStr: string, multi = false) {\r\n    const imgs = [];\r\n\r\n    let options: PhotoViewer.Options = {};\r\n\r\n    if (multi) {\r\n      this._dataGridSrv.str2arr(urlStr).forEach((url, index) => {\r\n        imgs.push({ title: index + 1, src: url });\r\n      });\r\n    } else {\r\n      this._dataGridSrv.str2arr(urlStr).forEach((url, index) => {\r\n        imgs.push({ src: url });\r\n      });\r\n\r\n      options = {\r\n        title: false,\r\n        footToolbar: ['zoomIn', 'zoomOut', 'rotateRight', 'rotateLeft', 'actualSize'],\r\n      };\r\n    }\r\n\r\n    this._viewer = new PhotoViewer(imgs, options);\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  OnInit,\r\n  Input,\r\n  ViewEncapsulation,\r\n  ChangeDetectionStrategy,\r\n  Output,\r\n  EventEmitter,\r\n} from '@angular/core';\r\nimport { CdkDragDrop, moveItemInArray } from '@angular/cdk/drag-drop';\r\nimport { MtxGridColumnSelectionItem } from './grid.interface';\r\n\r\n@Component({\r\n  selector: 'mtx-grid-column-menu',\r\n  exportAs: 'mtxGridColumnMenu',\r\n  templateUrl: './column-menu.component.html',\r\n  styleUrls: ['./column-menu.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class MtxGridColumnMenuComponent implements OnInit {\r\n  @Input() columns = [];\r\n  @Input() selectable = true;\r\n  @Input() selectedType: 'show' | 'hide' = 'show';\r\n  @Input() sortable = true;\r\n  @Input() dndSortable = true;\r\n\r\n  @Input() get buttonText() {\r\n    const defaultText = `Columns ${this.selectedType === 'show' ? 'Shown' : 'Hidden'}`;\r\n    const text = this._buttonText ? this._buttonText : defaultText;\r\n    return text;\r\n  }\r\n  set buttonText(value: string) {\r\n    this._buttonText = value;\r\n  }\r\n  private _buttonText = '';\r\n\r\n  @Input() buttonType: 'raised' | 'stroked' | 'flat' | 'icon' | 'fab' | 'mini-fab' | '' = 'stroked';\r\n  @Input() buttonColor: 'primary' | 'accent' | 'warn' | '' = '';\r\n  @Input() buttonClass = '';\r\n  @Input() buttonIcon = '';\r\n\r\n  @Output() selectionChange = new EventEmitter<string[]>();\r\n  @Output() sortChange = new EventEmitter<string[]>();\r\n\r\n  get columnFields(): string[] {\r\n    const fields = this.columns\r\n      .filter((item: MtxGridColumnSelectionItem) =>\r\n        this.selectedType === 'show' ? item.show : !item.hide\r\n      )\r\n      .map((item: MtxGridColumnSelectionItem) => item.field);\r\n    return fields;\r\n  }\r\n\r\n  constructor() {}\r\n\r\n  ngOnInit() {}\r\n\r\n  _handleDroped(event: CdkDragDrop<string[]>) {\r\n    moveItemInArray(this.columns, event.previousIndex, event.currentIndex);\r\n    this.sortChange.emit(this.columnFields);\r\n  }\r\n\r\n  _handleSelection(e: any) {\r\n    this.selectionChange.emit(this.columnFields);\r\n  }\r\n}\r\n","import {\r\n  Directive,\r\n  EventEmitter,\r\n  HostBinding,\r\n  HostListener,\r\n  Input,\r\n  Output,\r\n  TemplateRef,\r\n} from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[mtx-expansion-toggle]',\r\n})\r\nexport class MtxGridExpansionToggleDirective {\r\n  private _opened = false;\r\n  private _row: any;\r\n  private _tplRef: TemplateRef<any>;\r\n\r\n  @HostBinding('class.expanded')\r\n  get expended(): boolean {\r\n    return this._opened;\r\n  }\r\n\r\n  @Input()\r\n  set expandableRow(value: any) {\r\n    if (value !== this._row) {\r\n      this._row = value;\r\n    }\r\n  }\r\n\r\n  @Input('expansionRowTpl')\r\n  set template(value: TemplateRef<any>) {\r\n    if (value !== this._tplRef) {\r\n      this._tplRef = value;\r\n    }\r\n  }\r\n\r\n  @Output() toggleChange = new EventEmitter<MtxGridExpansionToggleDirective>();\r\n\r\n  constructor() {}\r\n\r\n  @HostListener('click', ['$event'])\r\n  onClick(event: MouseEvent): void {\r\n    event.preventDefault();\r\n    event.stopPropagation();\r\n    this.toggle();\r\n  }\r\n\r\n  toggle(): void {\r\n    this._opened = !this._opened;\r\n    this.toggleChange.emit(this);\r\n  }\r\n}\r\n","import {\r\n  Directive,\r\n  EventEmitter,\r\n  HostBinding,\r\n  HostListener,\r\n  Input,\r\n  Output,\r\n} from '@angular/core';\r\n\r\nimport { MtxGridComponent } from './grid.component';\r\n\r\n@Directive({\r\n  selector: '[mtx-selectable-cell]',\r\n})\r\nexport class MtxGridCellSelectionDirective {\r\n  private _selected = false;\r\n  private _rowData: any;\r\n\r\n  shiftKeyPressed = false;\r\n  ctrlKeyPressed = false;\r\n\r\n  @HostBinding('class.selected')\r\n  get selected(): boolean {\r\n    return this._selected;\r\n  }\r\n\r\n  @Input()\r\n  set matSelectableRowData(value: any) {\r\n    if (value !== this._rowData) {\r\n      this._rowData = value;\r\n    }\r\n  }\r\n\r\n  @Output() cellSelectionChange = new EventEmitter<MtxGridCellSelectionDirective>();\r\n\r\n  constructor(private _dataGrid: MtxGridComponent) { }\r\n\r\n  @HostListener('click', ['$event'])\r\n  onClick(event: MouseEvent): void {\r\n    this.ctrlKeyPressed = event.ctrlKey;\r\n    this.shiftKeyPressed = event.shiftKey;\r\n\r\n    if (this._dataGrid.cellSelectable) {\r\n      this.select();\r\n    }\r\n  }\r\n\r\n  select(): void {\r\n    this._selected = true;\r\n    this.cellSelectionChange.emit(this);\r\n  }\r\n\r\n  deselect(): void {\r\n    this._selected = false;\r\n    this.cellSelectionChange.emit(this);\r\n  }\r\n\r\n  toggle(): void {\r\n    this._selected = !this._selected;\r\n    this.cellSelectionChange.emit(this);\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { MatTableModule } from '@angular/material/table';\r\nimport { MatSortModule } from '@angular/material/sort';\r\nimport { MatPaginatorModule } from '@angular/material/paginator';\r\nimport { MatCheckboxModule } from '@angular/material/checkbox';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\r\nimport { MatChipsModule } from '@angular/material/chips';\r\nimport { MatTooltipModule } from '@angular/material/tooltip';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { DragDropModule } from '@angular/cdk/drag-drop';\r\n\r\nimport { MtxDialogModule } from '@ng-matero/extensions/dialog';\r\nimport { MtxGridComponent } from './grid.component';\r\nimport { MtxGridCellComponent } from './cell.component';\r\nimport { MtxGridColumnMenuComponent } from './column-menu.component';\r\nimport { MtxGridExpansionToggleDirective } from './expansion-toggle.directive';\r\nimport { MtxGridCellSelectionDirective } from './cell-selection.directive';\r\nimport { MtxGridService } from './grid.service';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    MatTableModule,\r\n    MatSortModule,\r\n    MatPaginatorModule,\r\n    MatCheckboxModule,\r\n    MatButtonModule,\r\n    MatProgressBarModule,\r\n    MatChipsModule,\r\n    MatTooltipModule,\r\n    MatIconModule,\r\n    MtxDialogModule,\r\n    MatSelectModule,\r\n    MatFormFieldModule,\r\n    MatMenuModule,\r\n    DragDropModule,\r\n  ],\r\n  exports: [\r\n    MtxGridComponent,\r\n    MtxGridCellComponent,\r\n    MtxGridColumnMenuComponent,\r\n    MtxGridExpansionToggleDirective,\r\n    MtxGridCellSelectionDirective,\r\n  ],\r\n  declarations: [\r\n    MtxGridComponent,\r\n    MtxGridCellComponent,\r\n    MtxGridColumnMenuComponent,\r\n    MtxGridExpansionToggleDirective,\r\n    MtxGridCellSelectionDirective,\r\n  ],\r\n  providers: [MtxGridService],\r\n})\r\nexport class MtxGridModule {}\r\n"],"names":["Injectable","EventEmitter","SelectionModel","TemplateRef","MatTableDataSource","Component","ViewEncapsulation","ChangeDetectionStrategy","trigger","state","style","transition","animate","ViewChild","MatPaginator","MatSort","Input","Output","MtxDialog","moveItemInArray","Directive","HostBinding","HostListener","NgModule","CommonModule","FormsModule","MatTableModule","MatSortModule","MatPaginatorModule","MatCheckboxModule","MatButtonModule","MatProgressBarModule","MatChipsModule","MatTooltipModule","MatIconModule","MtxDialogModule","MatSelectModule","MatFormFieldModule","MatMenuModule","DragDropModule"],"mappings":"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"}