{"version":3,"file":"mtxColorPicker.js","sources":["ng://@ng-matero/extensions/color-picker/color-picker.component.ts","ng://@ng-matero/extensions/color-picker/color-picker.module.ts"],"sourcesContent":["import {\n  Component,\n  OnInit,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  OnDestroy,\n  Optional,\n  Self,\n  ElementRef,\n  Input,\n  Output,\n  EventEmitter,\n  Inject,\n  DoCheck,\n  ViewChild,\n  Host,\n  AfterViewInit,\n  NgZone,\n} from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\nimport { ControlValueAccessor, NgControl } from '@angular/forms';\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { _supportsShadowDom } from '@angular/cdk/platform';\nimport { MatFormFieldControl, MatFormField } from '@angular/material/form-field';\nimport { MatMenuTrigger } from '@angular/material/menu';\nimport { Subject, Observable, merge, fromEvent, Subscription } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\nimport { Color } from 'ngx-color';\n\nlet nextUniqueId = 0;\n\n@Component({\n  selector: 'mtx-color-picker',\n  exportAs: 'mtxColorPicker',\n  templateUrl: './color-picker.component.html',\n  styleUrls: ['./color-picker.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [{ provide: MatFormFieldControl, useExisting: MtxColorPickerComponent }],\n})\nexport class MtxColorPickerComponent\n  implements\n    OnInit,\n    OnDestroy,\n    DoCheck,\n    AfterViewInit,\n    ControlValueAccessor,\n    MatFormFieldControl<any> {\n  /** Value of the color picker control. */\n  @Input()\n  get value(): string | null {\n    return this._value;\n  }\n  set value(newValue: string | null) {\n    this._value = newValue;\n    this._onChange(newValue);\n    this.stateChanges.next();\n  }\n  private _value = '';\n\n  /** Implemented as part of MatFormFieldControl. */\n  readonly stateChanges: Subject<void> = new Subject<void>();\n\n  /** Unique id for this input. */\n  private _uid = `mtx-color-picker-${nextUniqueId++}`;\n\n  /** Unique id of the element. */\n  @Input()\n  get id(): string {\n    return this._id;\n  }\n  set id(value: string) {\n    this._id = value || this._uid;\n    this.stateChanges.next();\n  }\n  private _id: string;\n\n  /** Placeholder to be shown if value is empty. */\n  @Input()\n  get placeholder(): string {\n    return this._placeholder;\n  }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n  private _placeholder: string;\n\n  /** Whether the input is focused. */\n  get focused(): boolean {\n    return this._focused || this._panelOpen;\n  }\n  private _focused = false;\n\n  get empty(): boolean {\n    return !this.value;\n  }\n\n  get shouldLabelFloat(): boolean {\n    return this.focused || !this.empty;\n  }\n\n  @Input()\n  get required(): boolean {\n    return this._required;\n  }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n  private _required = false;\n\n  @Input()\n  get disabled(): boolean {\n    return this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n  private _disabled = false;\n\n  errorState = false;\n\n  /** A name for this control that can be used by `mat-form-field`. */\n  controlType = 'mtx-color-picker';\n\n  /** The aria-describedby attribute on the color picker for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when color picker has been touched` */\n  _onTouched = () => {};\n\n  /** Event emitted when the color changed */\n  @Output() readonly colorChange = new EventEmitter<{ color: Color; $event: MouseEvent }>();\n\n  @ViewChild(MatMenuTrigger, { static: true }) trigger: MatMenuTrigger;\n\n  /** Whether or not the overlay panel is open. */\n  _panelOpen = false;\n\n  /** The subscription for closing actions (some are bound to document). */\n  private _closingActionsSubscription: Subscription;\n\n  /** Whether the element is inside of a ShadowRoot component. */\n  private _isInsideShadowRoot: boolean;\n\n  /**\n   * Whether the color picker can open the next time it is focused. Used to prevent a focused,\n   * closed color picker from being reopened if the user switches to another browser tab and then\n   * comes back.\n   */\n  private _canOpenOnNextFocus = true;\n\n  /**\n   * Event handler for when the window is blurred. Needs to be an\n   * arrow function in order to preserve the context.\n   */\n  private _windowBlurHandler = () => {\n    // If the user blurred the window while the color picker is focused, it means that it'll be\n    // refocused when they come back. In this case we want to skip the first focus event, if the\n    // pane was closed, in order to avoid reopening it unintentionally.\n    this._canOpenOnNextFocus =\n      this._document.activeElement !== this._elementRef.nativeElement || this._panelOpen;\n  };\n\n  constructor(\n    private _focusMonitor: FocusMonitor,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _zone: NgZone,\n    @Optional() @Self() public ngControl: NgControl,\n    @Optional() @Host() private _formField: MatFormField,\n    @Optional() @Inject(DOCUMENT) private _document: any\n  ) {\n    _focusMonitor.monitor(_elementRef, true).subscribe(origin => {\n      if (this._focused && !origin) {\n        this._onTouched();\n      }\n      this._focused = !!origin;\n      this.stateChanges.next();\n    });\n\n    if (this.ngControl != null) {\n      this.ngControl.valueAccessor = this;\n    }\n  }\n\n  ngOnInit() {}\n\n  ngDoCheck(): void {\n    if (this.ngControl) {\n      this.errorState = this.ngControl.invalid && this.ngControl.touched;\n      this.stateChanges.next();\n    }\n  }\n\n  ngAfterViewInit() {\n    if (typeof window !== 'undefined') {\n      this._zone.runOutsideAngular(() => {\n        window.addEventListener('blur', this._windowBlurHandler);\n      });\n\n      if (_supportsShadowDom()) {\n        const element = this._elementRef.nativeElement;\n        const rootNode = element.getRootNode ? element.getRootNode() : null;\n\n        // We need to take the `ShadowRoot` off of `window`, because the built-in types are\n        // incorrect. See https://github.com/Microsoft/TypeScript/issues/27929.\n        this._isInsideShadowRoot = rootNode instanceof (window as any).ShadowRoot;\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this.stateChanges.complete();\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Implemented as part of MatFormFieldControl. */\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  /** Implemented as part of MatFormFieldControl. */\n  onContainerClick() {}\n\n  /**\n   * Sets the color-picker's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param value New value to be written to the model.\n   */\n  writeValue(value: string | null): void {\n    this._value = value || '';\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Saves a callback function to be invoked when the color-picker's value\n   * changes from user input. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the value changes.\n   */\n  registerOnChange(fn: any): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Saves a callback function to be invoked when the color picker is blurred\n   * by the user. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the component has been touched.\n   */\n  registerOnTouched(fn: any): void {\n    this._onTouched = fn;\n  }\n\n  /** Open panel with input focus event. */\n  _handleFocus() {\n    this.trigger.openMenu();\n\n    this._closingActionsSubscription = merge(this._getOutsideClickStream())\n      .pipe()\n      .subscribe(event => {\n        this.trigger.closeMenu();\n        this._closingActionsSubscription.unsubscribe();\n      });\n  }\n\n  /** Opens the overlay panel. */\n  _openPanel() {\n    if (this._focused) {\n      this._panelOpen = true;\n    }\n  }\n\n  /** Closes the overlay panel and focuses the host element. */\n  _closePanel() {\n    if (this._panelOpen) {\n      this._panelOpen = false;\n      this._changeDetectorRef.markForCheck();\n      this._onTouched();\n    }\n  }\n\n  /** The callback of color changed. */\n  _onColorChanged(model: { color: Color; $event: MouseEvent }) {\n    this.value = model.color.hex;\n    this.colorChange.emit({ color: model.color, $event: model.$event });\n  }\n\n  /** Stream of clicks outside of the color picker panel. */\n  private _getOutsideClickStream(): Observable<any> {\n    return merge(\n      fromEvent(this._document, 'click') as Observable<MouseEvent>,\n      fromEvent(this._document, 'touchend') as Observable<TouchEvent>\n    ).pipe(\n      filter(event => {\n        // If we're in the Shadow DOM, the event target will be the shadow root, so we have to\n        // fall back to check the first element in the path of the click event.\n        const clickTarget = (this._isInsideShadowRoot && event.composedPath\n          ? event.composedPath()[0]\n          : event.target) as HTMLElement;\n        const formField = this._formField ? this._formField._elementRef.nativeElement : null;\n\n        return (\n          clickTarget !== this._elementRef.nativeElement &&\n          (!formField || !formField.contains(clickTarget))\n        );\n      })\n    );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\n\nimport { ColorChromeModule } from 'ngx-color/chrome';\n\nimport { MtxColorPickerComponent } from './color-picker.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    MatMenuModule,\n    MatFormFieldModule,\n    MatInputModule,\n    ColorChromeModule,\n  ],\n  exports: [MtxColorPickerComponent],\n  declarations: [MtxColorPickerComponent],\n})\nexport class MtxColorPickerModule {}\n"],"names":[],"mappings":"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"}