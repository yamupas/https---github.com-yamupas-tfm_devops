{"version":3,"file":"mtxColorPicker.js","sources":["ng:/@ng-matero/extensions/color-picker/color-picker.component.ts","ng:/@ng-matero/extensions/color-picker/color-picker.module.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  Component,\n  OnInit,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  OnDestroy,\n  Optional,\n  Self,\n  ElementRef,\n  Input,\n  Output,\n  EventEmitter,\n  Inject,\n  DoCheck,\n  ViewChild,\n  Host,\n  AfterViewInit,\n  NgZone,\n} from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\nimport { ControlValueAccessor, NgControl } from '@angular/forms';\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { _supportsShadowDom } from '@angular/cdk/platform';\nimport { MatFormFieldControl, MatFormField } from '@angular/material/form-field';\nimport { MatMenuTrigger } from '@angular/material/menu';\nimport { Subject, Observable, merge, fromEvent, Subscription } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\nimport { Color } from 'ngx-color';\n\nlet nextUniqueId = 0;\n\n@Component({\n  selector: 'mtx-color-picker',\n  exportAs: 'mtxColorPicker',\n  templateUrl: './color-picker.component.html',\n  styleUrls: ['./color-picker.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [{ provide: MatFormFieldControl, useExisting: MtxColorPickerComponent }],\n})\nexport class MtxColorPickerComponent\n  implements\n    OnInit,\n    OnDestroy,\n    DoCheck,\n    AfterViewInit,\n    ControlValueAccessor,\n    MatFormFieldControl<any> {\n  /** Value of the color picker control. */\n  @Input()\n  get value(): string | null {\n    return this._value;\n  }\n  set value(newValue: string | null) {\n    this._value = newValue;\n    this._onChange(newValue);\n    this.stateChanges.next();\n  }\n  private _value = '';\n\n  /** Implemented as part of MatFormFieldControl. */\n  readonly stateChanges: Subject<void> = new Subject<void>();\n\n  /** Unique id for this input. */\n  private _uid = `mtx-color-picker-${nextUniqueId++}`;\n\n  /** Unique id of the element. */\n  @Input()\n  get id(): string {\n    return this._id;\n  }\n  set id(value: string) {\n    this._id = value || this._uid;\n    this.stateChanges.next();\n  }\n  private _id: string;\n\n  /** Placeholder to be shown if value is empty. */\n  @Input()\n  get placeholder(): string {\n    return this._placeholder;\n  }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n  private _placeholder: string;\n\n  /** Whether the input is focused. */\n  get focused(): boolean {\n    return this._focused || this._panelOpen;\n  }\n  private _focused = false;\n\n  get empty(): boolean {\n    return !this.value;\n  }\n\n  get shouldLabelFloat(): boolean {\n    return this.focused || !this.empty;\n  }\n\n  @Input()\n  get required(): boolean {\n    return this._required;\n  }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n  private _required = false;\n\n  @Input()\n  get disabled(): boolean {\n    return this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n  private _disabled = false;\n\n  errorState = false;\n\n  /** A name for this control that can be used by `mat-form-field`. */\n  controlType = 'mtx-color-picker';\n\n  /** The aria-describedby attribute on the color picker for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when color picker has been touched` */\n  _onTouched = () => {};\n\n  /** Event emitted when the color changed */\n  @Output() readonly colorChange = new EventEmitter<{ color: Color; $event: MouseEvent }>();\n\n  @ViewChild(MatMenuTrigger, { static: true }) trigger: MatMenuTrigger;\n\n  /** Whether or not the overlay panel is open. */\n  _panelOpen = false;\n\n  /** The subscription for closing actions (some are bound to document). */\n  private _closingActionsSubscription: Subscription;\n\n  /** Whether the element is inside of a ShadowRoot component. */\n  private _isInsideShadowRoot: boolean;\n\n  /**\n   * Whether the color picker can open the next time it is focused. Used to prevent a focused,\n   * closed color picker from being reopened if the user switches to another browser tab and then\n   * comes back.\n   */\n  private _canOpenOnNextFocus = true;\n\n  /**\n   * Event handler for when the window is blurred. Needs to be an\n   * arrow function in order to preserve the context.\n   */\n  private _windowBlurHandler = () => {\n    // If the user blurred the window while the color picker is focused, it means that it'll be\n    // refocused when they come back. In this case we want to skip the first focus event, if the\n    // pane was closed, in order to avoid reopening it unintentionally.\n    this._canOpenOnNextFocus =\n      this._document.activeElement !== this._elementRef.nativeElement || this._panelOpen;\n  };\n\n  constructor(\n    private _focusMonitor: FocusMonitor,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _zone: NgZone,\n    @Optional() @Self() public ngControl: NgControl,\n    @Optional() @Host() private _formField: MatFormField,\n    @Optional() @Inject(DOCUMENT) private _document: any\n  ) {\n    _focusMonitor.monitor(_elementRef, true).subscribe(origin => {\n      if (this._focused && !origin) {\n        this._onTouched();\n      }\n      this._focused = !!origin;\n      this.stateChanges.next();\n    });\n\n    if (this.ngControl != null) {\n      this.ngControl.valueAccessor = this;\n    }\n  }\n\n  ngOnInit() {}\n\n  ngDoCheck(): void {\n    if (this.ngControl) {\n      this.errorState = this.ngControl.invalid && this.ngControl.touched;\n      this.stateChanges.next();\n    }\n  }\n\n  ngAfterViewInit() {\n    if (typeof window !== 'undefined') {\n      this._zone.runOutsideAngular(() => {\n        window.addEventListener('blur', this._windowBlurHandler);\n      });\n\n      if (_supportsShadowDom()) {\n        const element = this._elementRef.nativeElement;\n        const rootNode = element.getRootNode ? element.getRootNode() : null;\n\n        // We need to take the `ShadowRoot` off of `window`, because the built-in types are\n        // incorrect. See https://github.com/Microsoft/TypeScript/issues/27929.\n        this._isInsideShadowRoot = rootNode instanceof (window as any).ShadowRoot;\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this.stateChanges.complete();\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Implemented as part of MatFormFieldControl. */\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  /** Implemented as part of MatFormFieldControl. */\n  onContainerClick() {}\n\n  /**\n   * Sets the color-picker's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param value New value to be written to the model.\n   */\n  writeValue(value: string | null): void {\n    this._value = value || '';\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Saves a callback function to be invoked when the color-picker's value\n   * changes from user input. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the value changes.\n   */\n  registerOnChange(fn: any): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Saves a callback function to be invoked when the color picker is blurred\n   * by the user. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the component has been touched.\n   */\n  registerOnTouched(fn: any): void {\n    this._onTouched = fn;\n  }\n\n  /** Open panel with input focus event. */\n  _handleFocus() {\n    this.trigger.openMenu();\n\n    this._closingActionsSubscription = merge(this._getOutsideClickStream())\n      .pipe()\n      .subscribe(event => {\n        this.trigger.closeMenu();\n        this._closingActionsSubscription.unsubscribe();\n      });\n  }\n\n  /** Opens the overlay panel. */\n  _openPanel() {\n    if (this._focused) {\n      this._panelOpen = true;\n    }\n  }\n\n  /** Closes the overlay panel and focuses the host element. */\n  _closePanel() {\n    if (this._panelOpen) {\n      this._panelOpen = false;\n      this._changeDetectorRef.markForCheck();\n      this._onTouched();\n    }\n  }\n\n  /** The callback of color changed. */\n  _onColorChanged(model: { color: Color; $event: MouseEvent }) {\n    this.value = model.color.hex;\n    this.colorChange.emit({ color: model.color, $event: model.$event });\n  }\n\n  /** Stream of clicks outside of the color picker panel. */\n  private _getOutsideClickStream(): Observable<any> {\n    return merge(\n      fromEvent(this._document, 'click') as Observable<MouseEvent>,\n      fromEvent(this._document, 'touchend') as Observable<TouchEvent>\n    ).pipe(\n      filter(event => {\n        // If we're in the Shadow DOM, the event target will be the shadow root, so we have to\n        // fall back to check the first element in the path of the click event.\n        const clickTarget = (this._isInsideShadowRoot && event.composedPath\n          ? event.composedPath()[0]\n          : event.target) as HTMLElement;\n        const formField = this._formField ? this._formField._elementRef.nativeElement : null;\n\n        return (\n          clickTarget !== this._elementRef.nativeElement &&\n          (!formField || !formField.contains(clickTarget))\n        );\n      })\n    );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\n\nimport { ColorChromeModule } from 'ngx-color/chrome';\n\nimport { MtxColorPickerComponent } from './color-picker.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    MatMenuModule,\n    MatFormFieldModule,\n    MatInputModule,\n    ColorChromeModule,\n  ],\n  exports: [MtxColorPickerComponent],\n  declarations: [MtxColorPickerComponent],\n})\nexport class MtxColorPickerModule {}\n"]}