import { Directive, TemplateRef, Component, ChangeDetectionStrategy, ElementRef, Input, EventEmitter, ViewEncapsulation, ChangeDetectorRef, Optional, Self, ViewChild, ContentChild, ContentChildren, Output, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { NgControl, FormsModule, ReactiveFormsModule } from '@angular/forms';
import { NgSelectModule } from '@ng-select/ng-select';
import { MatFormFieldControl } from '@angular/material/form-field';
import { coerceBooleanProperty } from '@angular/cdk/coercion';
import { FocusMonitor } from '@angular/cdk/a11y';
import { Subject, merge } from 'rxjs';
import { takeUntil, startWith } from 'rxjs/operators';

/**
 * @fileoverview added by tsickle
 * Generated from: templates.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/cdk/a11y';
import * as ɵngcc2 from '@angular/forms';
import * as ɵngcc3 from '@ng-select/ng-select';
import * as ɵngcc4 from '@angular/common';

const _c0 = ["*"];
const _c1 = ["ngSelect"];
function MtxSelectComponent_ng_container_2_ng_template_1_ng_template_0_Template(rf, ctx) { }
const _c2 = function (a0, a1, a2, a3) { return { item: a0, item$: a1, index: a2, searchTerm: a3 }; };
function MtxSelectComponent_ng_container_2_ng_template_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, MtxSelectComponent_ng_container_2_ng_template_1_ng_template_0_Template, 0, 0, "ng-template", 4);
} if (rf & 2) {
    const item_r13 = ctx.item;
    const index_r14 = ctx.index;
    const searchTerm_r15 = ctx.searchTerm;
    const ctx_r12 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx_r12.optionTemplate)("ngTemplateOutletContext", ɵngcc0.ɵɵpureFunction4(2, _c2, item_r13, item_r13, index_r14, searchTerm_r15));
} }
function MtxSelectComponent_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, MtxSelectComponent_ng_container_2_ng_template_1_Template, 1, 7, "ng-template", 3);
    ɵngcc0.ɵɵelementContainerEnd();
} }
function MtxSelectComponent_ng_container_3_ng_template_1_ng_template_0_Template(rf, ctx) { }
function MtxSelectComponent_ng_container_3_ng_template_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, MtxSelectComponent_ng_container_3_ng_template_1_ng_template_0_Template, 0, 0, "ng-template", 4);
} if (rf & 2) {
    const item_r18 = ctx.item;
    const index_r19 = ctx.index;
    const searchTerm_r20 = ctx.searchTerm;
    const ctx_r17 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx_r17.optgroupTemplate)("ngTemplateOutletContext", ɵngcc0.ɵɵpureFunction4(2, _c2, item_r18, item_r18, index_r19, searchTerm_r20));
} }
function MtxSelectComponent_ng_container_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, MtxSelectComponent_ng_container_3_ng_template_1_Template, 1, 7, "ng-template", 5);
    ɵngcc0.ɵɵelementContainerEnd();
} }
function MtxSelectComponent_ng_container_4_ng_template_1_ng_template_0_Template(rf, ctx) { }
const _c3 = function (a0, a1, a2) { return { item: a0, clear: a1, label: a2 }; };
function MtxSelectComponent_ng_container_4_ng_template_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, MtxSelectComponent_ng_container_4_ng_template_1_ng_template_0_Template, 0, 0, "ng-template", 4);
} if (rf & 2) {
    const item_r23 = ctx.item;
    const clear_r24 = ctx.clear;
    const label_r25 = ctx.label;
    const ctx_r22 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx_r22.labelTemplate)("ngTemplateOutletContext", ɵngcc0.ɵɵpureFunction3(2, _c3, item_r23, clear_r24, label_r25));
} }
function MtxSelectComponent_ng_container_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, MtxSelectComponent_ng_container_4_ng_template_1_Template, 1, 6, "ng-template", 6);
    ɵngcc0.ɵɵelementContainerEnd();
} }
function MtxSelectComponent_ng_container_5_ng_template_1_ng_template_0_Template(rf, ctx) { }
const _c4 = function (a0, a1) { return { items: a0, clear: a1 }; };
function MtxSelectComponent_ng_container_5_ng_template_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, MtxSelectComponent_ng_container_5_ng_template_1_ng_template_0_Template, 0, 0, "ng-template", 4);
} if (rf & 2) {
    const items_r28 = ctx.items;
    const clear_r29 = ctx.clear;
    const ctx_r27 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx_r27.multiLabelTemplate)("ngTemplateOutletContext", ɵngcc0.ɵɵpureFunction2(2, _c4, items_r28, clear_r29));
} }
function MtxSelectComponent_ng_container_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, MtxSelectComponent_ng_container_5_ng_template_1_Template, 1, 5, "ng-template", 7);
    ɵngcc0.ɵɵelementContainerEnd();
} }
function MtxSelectComponent_ng_container_6_ng_template_1_ng_template_0_Template(rf, ctx) { }
function MtxSelectComponent_ng_container_6_ng_template_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, MtxSelectComponent_ng_container_6_ng_template_1_ng_template_0_Template, 0, 0, "ng-template", 9);
} if (rf & 2) {
    const ctx_r31 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx_r31.headerTemplate);
} }
function MtxSelectComponent_ng_container_6_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, MtxSelectComponent_ng_container_6_ng_template_1_Template, 1, 1, "ng-template", 8);
    ɵngcc0.ɵɵelementContainerEnd();
} }
function MtxSelectComponent_ng_container_7_ng_template_1_ng_template_0_Template(rf, ctx) { }
function MtxSelectComponent_ng_container_7_ng_template_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, MtxSelectComponent_ng_container_7_ng_template_1_ng_template_0_Template, 0, 0, "ng-template", 9);
} if (rf & 2) {
    const ctx_r33 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx_r33.footerTemplate);
} }
function MtxSelectComponent_ng_container_7_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, MtxSelectComponent_ng_container_7_ng_template_1_Template, 1, 1, "ng-template", 10);
    ɵngcc0.ɵɵelementContainerEnd();
} }
function MtxSelectComponent_ng_container_8_ng_template_1_ng_template_0_Template(rf, ctx) { }
const _c5 = function (a0) { return { searchTerm: a0 }; };
function MtxSelectComponent_ng_container_8_ng_template_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, MtxSelectComponent_ng_container_8_ng_template_1_ng_template_0_Template, 0, 0, "ng-template", 4);
} if (rf & 2) {
    const searchTerm_r36 = ctx.searchTerm;
    const ctx_r35 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx_r35.notFoundTemplate)("ngTemplateOutletContext", ɵngcc0.ɵɵpureFunction1(2, _c5, searchTerm_r36));
} }
function MtxSelectComponent_ng_container_8_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, MtxSelectComponent_ng_container_8_ng_template_1_Template, 1, 4, "ng-template", 11);
    ɵngcc0.ɵɵelementContainerEnd();
} }
function MtxSelectComponent_ng_container_9_ng_template_1_ng_template_0_Template(rf, ctx) { }
function MtxSelectComponent_ng_container_9_ng_template_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, MtxSelectComponent_ng_container_9_ng_template_1_ng_template_0_Template, 0, 0, "ng-template", 9);
} if (rf & 2) {
    const ctx_r38 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx_r38.typeToSearchTemplate);
} }
function MtxSelectComponent_ng_container_9_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, MtxSelectComponent_ng_container_9_ng_template_1_Template, 1, 1, "ng-template", 12);
    ɵngcc0.ɵɵelementContainerEnd();
} }
function MtxSelectComponent_ng_container_10_ng_template_1_ng_template_0_Template(rf, ctx) { }
function MtxSelectComponent_ng_container_10_ng_template_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, MtxSelectComponent_ng_container_10_ng_template_1_ng_template_0_Template, 0, 0, "ng-template", 4);
} if (rf & 2) {
    const searchTerm_r41 = ctx.searchTerm;
    const ctx_r40 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx_r40.loadingTextTemplate)("ngTemplateOutletContext", ɵngcc0.ɵɵpureFunction1(2, _c5, searchTerm_r41));
} }
function MtxSelectComponent_ng_container_10_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, MtxSelectComponent_ng_container_10_ng_template_1_Template, 1, 4, "ng-template", 13);
    ɵngcc0.ɵɵelementContainerEnd();
} }
function MtxSelectComponent_ng_container_11_ng_template_1_ng_template_0_Template(rf, ctx) { }
function MtxSelectComponent_ng_container_11_ng_template_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, MtxSelectComponent_ng_container_11_ng_template_1_ng_template_0_Template, 0, 0, "ng-template", 4);
} if (rf & 2) {
    const searchTerm_r44 = ctx.searchTerm;
    const ctx_r43 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx_r43.tagTemplate)("ngTemplateOutletContext", ɵngcc0.ɵɵpureFunction1(2, _c5, searchTerm_r44));
} }
function MtxSelectComponent_ng_container_11_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, MtxSelectComponent_ng_container_11_ng_template_1_Template, 1, 4, "ng-template", 14);
    ɵngcc0.ɵɵelementContainerEnd();
} }
function MtxSelectComponent_ng_container_12_ng_template_1_ng_template_0_Template(rf, ctx) { }
function MtxSelectComponent_ng_container_12_ng_template_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, MtxSelectComponent_ng_container_12_ng_template_1_ng_template_0_Template, 0, 0, "ng-template", 9);
} if (rf & 2) {
    const ctx_r46 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx_r46.loadingSpinnerTemplate);
} }
function MtxSelectComponent_ng_container_12_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, MtxSelectComponent_ng_container_12_ng_template_1_Template, 1, 1, "ng-template", 15);
    ɵngcc0.ɵɵelementContainerEnd();
} }
class MtxSelectOptionTemplateDirective {
    /**
     * @param {?} template
     */
    constructor(template) {
        this.template = template;
    }
}
MtxSelectOptionTemplateDirective.ɵfac = function MtxSelectOptionTemplateDirective_Factory(t) { return new (t || MtxSelectOptionTemplateDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };
MtxSelectOptionTemplateDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MtxSelectOptionTemplateDirective, selectors: [["", "ng-option-tmp", ""]] });
/** @nocollapse */
MtxSelectOptionTemplateDirective.ctorParameters = () => [
    { type: TemplateRef }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MtxSelectOptionTemplateDirective, [{
        type: Directive,
        args: [{ selector: '[ng-option-tmp]' }]
    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, null); })();
if (false) {
    /** @type {?} */
    MtxSelectOptionTemplateDirective.prototype.template;
}
class MtxSelectOptgroupTemplateDirective {
    /**
     * @param {?} template
     */
    constructor(template) {
        this.template = template;
    }
}
MtxSelectOptgroupTemplateDirective.ɵfac = function MtxSelectOptgroupTemplateDirective_Factory(t) { return new (t || MtxSelectOptgroupTemplateDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };
MtxSelectOptgroupTemplateDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MtxSelectOptgroupTemplateDirective, selectors: [["", "ng-optgroup-tmp", ""]] });
/** @nocollapse */
MtxSelectOptgroupTemplateDirective.ctorParameters = () => [
    { type: TemplateRef }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MtxSelectOptgroupTemplateDirective, [{
        type: Directive,
        args: [{ selector: '[ng-optgroup-tmp]' }]
    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, null); })();
if (false) {
    /** @type {?} */
    MtxSelectOptgroupTemplateDirective.prototype.template;
}
class MtxSelectLabelTemplateDirective {
    /**
     * @param {?} template
     */
    constructor(template) {
        this.template = template;
    }
}
MtxSelectLabelTemplateDirective.ɵfac = function MtxSelectLabelTemplateDirective_Factory(t) { return new (t || MtxSelectLabelTemplateDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };
MtxSelectLabelTemplateDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MtxSelectLabelTemplateDirective, selectors: [["", "ng-label-tmp", ""]] });
/** @nocollapse */
MtxSelectLabelTemplateDirective.ctorParameters = () => [
    { type: TemplateRef }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MtxSelectLabelTemplateDirective, [{
        type: Directive,
        args: [{ selector: '[ng-label-tmp]' }]
    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, null); })();
if (false) {
    /** @type {?} */
    MtxSelectLabelTemplateDirective.prototype.template;
}
class MtxSelectMultiLabelTemplateDirective {
    /**
     * @param {?} template
     */
    constructor(template) {
        this.template = template;
    }
}
MtxSelectMultiLabelTemplateDirective.ɵfac = function MtxSelectMultiLabelTemplateDirective_Factory(t) { return new (t || MtxSelectMultiLabelTemplateDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };
MtxSelectMultiLabelTemplateDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MtxSelectMultiLabelTemplateDirective, selectors: [["", "ng-multi-label-tmp", ""]] });
/** @nocollapse */
MtxSelectMultiLabelTemplateDirective.ctorParameters = () => [
    { type: TemplateRef }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MtxSelectMultiLabelTemplateDirective, [{
        type: Directive,
        args: [{ selector: '[ng-multi-label-tmp]' }]
    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, null); })();
if (false) {
    /** @type {?} */
    MtxSelectMultiLabelTemplateDirective.prototype.template;
}
class MtxSelectHeaderTemplateDirective {
    /**
     * @param {?} template
     */
    constructor(template) {
        this.template = template;
    }
}
MtxSelectHeaderTemplateDirective.ɵfac = function MtxSelectHeaderTemplateDirective_Factory(t) { return new (t || MtxSelectHeaderTemplateDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };
MtxSelectHeaderTemplateDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MtxSelectHeaderTemplateDirective, selectors: [["", "ng-header-tmp", ""]] });
/** @nocollapse */
MtxSelectHeaderTemplateDirective.ctorParameters = () => [
    { type: TemplateRef }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MtxSelectHeaderTemplateDirective, [{
        type: Directive,
        args: [{ selector: '[ng-header-tmp]' }]
    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, null); })();
if (false) {
    /** @type {?} */
    MtxSelectHeaderTemplateDirective.prototype.template;
}
class MtxSelectFooterTemplateDirective {
    /**
     * @param {?} template
     */
    constructor(template) {
        this.template = template;
    }
}
MtxSelectFooterTemplateDirective.ɵfac = function MtxSelectFooterTemplateDirective_Factory(t) { return new (t || MtxSelectFooterTemplateDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };
MtxSelectFooterTemplateDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MtxSelectFooterTemplateDirective, selectors: [["", "ng-footer-tmp", ""]] });
/** @nocollapse */
MtxSelectFooterTemplateDirective.ctorParameters = () => [
    { type: TemplateRef }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MtxSelectFooterTemplateDirective, [{
        type: Directive,
        args: [{ selector: '[ng-footer-tmp]' }]
    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, null); })();
if (false) {
    /** @type {?} */
    MtxSelectFooterTemplateDirective.prototype.template;
}
class MtxSelectNotFoundTemplateDirective {
    /**
     * @param {?} template
     */
    constructor(template) {
        this.template = template;
    }
}
MtxSelectNotFoundTemplateDirective.ɵfac = function MtxSelectNotFoundTemplateDirective_Factory(t) { return new (t || MtxSelectNotFoundTemplateDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };
MtxSelectNotFoundTemplateDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MtxSelectNotFoundTemplateDirective, selectors: [["", "ng-notfound-tmp", ""]] });
/** @nocollapse */
MtxSelectNotFoundTemplateDirective.ctorParameters = () => [
    { type: TemplateRef }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MtxSelectNotFoundTemplateDirective, [{
        type: Directive,
        args: [{ selector: '[ng-notfound-tmp]' }]
    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, null); })();
if (false) {
    /** @type {?} */
    MtxSelectNotFoundTemplateDirective.prototype.template;
}
class MtxSelectTypeToSearchTemplateDirective {
    /**
     * @param {?} template
     */
    constructor(template) {
        this.template = template;
    }
}
MtxSelectTypeToSearchTemplateDirective.ɵfac = function MtxSelectTypeToSearchTemplateDirective_Factory(t) { return new (t || MtxSelectTypeToSearchTemplateDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };
MtxSelectTypeToSearchTemplateDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MtxSelectTypeToSearchTemplateDirective, selectors: [["", "ng-typetosearch-tmp", ""]] });
/** @nocollapse */
MtxSelectTypeToSearchTemplateDirective.ctorParameters = () => [
    { type: TemplateRef }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MtxSelectTypeToSearchTemplateDirective, [{
        type: Directive,
        args: [{ selector: '[ng-typetosearch-tmp]' }]
    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, null); })();
if (false) {
    /** @type {?} */
    MtxSelectTypeToSearchTemplateDirective.prototype.template;
}
class MtxSelectLoadingTextTemplateDirective {
    /**
     * @param {?} template
     */
    constructor(template) {
        this.template = template;
    }
}
MtxSelectLoadingTextTemplateDirective.ɵfac = function MtxSelectLoadingTextTemplateDirective_Factory(t) { return new (t || MtxSelectLoadingTextTemplateDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };
MtxSelectLoadingTextTemplateDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MtxSelectLoadingTextTemplateDirective, selectors: [["", "ng-loadingtext-tmp", ""]] });
/** @nocollapse */
MtxSelectLoadingTextTemplateDirective.ctorParameters = () => [
    { type: TemplateRef }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MtxSelectLoadingTextTemplateDirective, [{
        type: Directive,
        args: [{ selector: '[ng-loadingtext-tmp]' }]
    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, null); })();
if (false) {
    /** @type {?} */
    MtxSelectLoadingTextTemplateDirective.prototype.template;
}
class MtxSelectTagTemplateDirective {
    /**
     * @param {?} template
     */
    constructor(template) {
        this.template = template;
    }
}
MtxSelectTagTemplateDirective.ɵfac = function MtxSelectTagTemplateDirective_Factory(t) { return new (t || MtxSelectTagTemplateDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };
MtxSelectTagTemplateDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MtxSelectTagTemplateDirective, selectors: [["", "ng-tag-tmp", ""]] });
/** @nocollapse */
MtxSelectTagTemplateDirective.ctorParameters = () => [
    { type: TemplateRef }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MtxSelectTagTemplateDirective, [{
        type: Directive,
        args: [{ selector: '[ng-tag-tmp]' }]
    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, null); })();
if (false) {
    /** @type {?} */
    MtxSelectTagTemplateDirective.prototype.template;
}
class MtxSelectLoadingSpinnerTemplateDirective {
    /**
     * @param {?} template
     */
    constructor(template) {
        this.template = template;
    }
}
MtxSelectLoadingSpinnerTemplateDirective.ɵfac = function MtxSelectLoadingSpinnerTemplateDirective_Factory(t) { return new (t || MtxSelectLoadingSpinnerTemplateDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };
MtxSelectLoadingSpinnerTemplateDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MtxSelectLoadingSpinnerTemplateDirective, selectors: [["", "ng-loadingspinner-tmp", ""]] });
/** @nocollapse */
MtxSelectLoadingSpinnerTemplateDirective.ctorParameters = () => [
    { type: TemplateRef }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MtxSelectLoadingSpinnerTemplateDirective, [{
        type: Directive,
        args: [{ selector: '[ng-loadingspinner-tmp]' }]
    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, null); })();
if (false) {
    /** @type {?} */
    MtxSelectLoadingSpinnerTemplateDirective.prototype.template;
}

/**
 * @fileoverview added by tsickle
 * Generated from: option.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class MtxOptionComponent {
    /**
     * @param {?} elementRef
     */
    constructor(elementRef) {
        this.elementRef = elementRef;
        this.stateChange$ = new Subject();
        this._disabled = false;
    }
    /**
     * @return {?}
     */
    get disabled() {
        return this._disabled;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set disabled(value) {
        this._disabled = this._isDisabled(value);
    }
    /**
     * @return {?}
     */
    get label() {
        return (this.elementRef.nativeElement.textContent || '').trim();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes.disabled) {
            this.stateChange$.next({
                value: this.value,
                disabled: this._disabled,
            });
        }
    }
    /**
     * @return {?}
     */
    ngAfterViewChecked() {
        if (this.label !== this._previousLabel) {
            this._previousLabel = this.label;
            this.stateChange$.next({
                value: this.value,
                disabled: this._disabled,
                label: this.elementRef.nativeElement.innerHTML,
            });
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.stateChange$.complete();
    }
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    _isDisabled(value) {
        return value != null && `${value}` !== 'false';
    }
}
MtxOptionComponent.ɵfac = function MtxOptionComponent_Factory(t) { return new (t || MtxOptionComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
MtxOptionComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MtxOptionComponent, selectors: [["mtx-option"]], inputs: { disabled: "disabled", value: "value" }, exportAs: ["mtxOption"], features: [ɵngcc0.ɵɵNgOnChangesFeature], ngContentSelectors: _c0, decls: 1, vars: 0, template: function MtxOptionComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
/** @nocollapse */
MtxOptionComponent.ctorParameters = () => [
    { type: ElementRef }
];
MtxOptionComponent.propDecorators = {
    value: [{ type: Input }],
    disabled: [{ type: Input }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MtxOptionComponent, [{
        type: Component,
        args: [{
                selector: 'mtx-option',
                exportAs: 'mtxOption',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: `<ng-content></ng-content>`
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, { disabled: [{
            type: Input
        }], value: [{
            type: Input
        }] }); })();
if (false) {
    /** @type {?} */
    MtxOptionComponent.prototype.value;
    /** @type {?} */
    MtxOptionComponent.prototype.stateChange$;
    /**
     * @type {?}
     * @private
     */
    MtxOptionComponent.prototype._disabled;
    /**
     * @type {?}
     * @private
     */
    MtxOptionComponent.prototype._previousLabel;
    /** @type {?} */
    MtxOptionComponent.prototype.elementRef;
}

/**
 * @fileoverview added by tsickle
 * Generated from: select.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
let nextUniqueId = 0;
class MtxSelectComponent {
    /**
     * @param {?} _focusMonitor
     * @param {?} _elementRef
     * @param {?} _changeDetectorRef
     * @param {?} ngControl
     */
    constructor(_focusMonitor, _elementRef, _changeDetectorRef, ngControl) {
        this._focusMonitor = _focusMonitor;
        this._elementRef = _elementRef;
        this._changeDetectorRef = _changeDetectorRef;
        this.ngControl = ngControl;
        /**
         * MtxSelect options
         */
        this.addTag = false;
        this.addTagText = 'Add item';
        this.appearance = 'underline';
        this.closeOnSelect = true;
        this.clearAllText = 'Clear all';
        this.clearable = true;
        this.clearOnBackspace = true;
        this.dropdownPosition = 'auto';
        this.selectableGroup = false;
        this.selectableGroupAsModel = true;
        this.hideSelected = false;
        this.loading = false;
        this.loadingText = 'Loading...';
        this.labelForId = null;
        this.markFirst = true;
        this.multiple = false;
        this.notFoundText = 'No items found';
        this.searchable = true;
        this.readonly = false;
        this.searchFn = null;
        this.searchWhileComposing = true;
        this.clearSearchOnAdd = true;
        this.selectOnTab = false;
        this.trackByFn = null;
        this.inputAttrs = {};
        this.openOnEnter = true;
        this.minTermLength = 0;
        this.keyDownFn = (/**
         * @param {?} _
         * @return {?}
         */
        (_) => true);
        this.virtualScroll = false;
        this.typeToSearchText = 'Type to search';
        this.blur = new EventEmitter();
        this.focus = new EventEmitter();
        this.change = new EventEmitter();
        this.open = new EventEmitter();
        this.close = new EventEmitter();
        this.search = new EventEmitter();
        this.clear = new EventEmitter();
        this.add = new EventEmitter();
        this.remove = new EventEmitter();
        this.scroll = new EventEmitter();
        this.scrollToEnd = new EventEmitter();
        this._items = [];
        this._destroy$ = new Subject();
        this._value = null;
        /**
         * Implemented as part of MatFormFieldControl.
         */
        this.stateChanges = new Subject();
        /**
         * Unique id for this input.
         */
        this._uid = `mtx-select-${nextUniqueId++}`;
        this._focused = false;
        this._required = false;
        this._disabled = false;
        this.errorState = false;
        /**
         * A name for this control that can be used by `mat-form-field`.
         */
        this.controlType = 'mtx-select';
        /**
         * `View -> model callback called when value changes`
         */
        this._onChange = (/**
         * @return {?}
         */
        () => { });
        /**
         * `View -> model callback called when select has been touched`
         */
        this._onTouched = (/**
         * @return {?}
         */
        () => { });
        _focusMonitor.monitor(_elementRef, true).subscribe((/**
         * @param {?} origin
         * @return {?}
         */
        origin => {
            if (this._focused && !origin) {
                this._onTouched();
            }
            this._focused = !!origin;
            this.stateChanges.next();
        }));
        if (this.ngControl != null) {
            this.ngControl.valueAccessor = this;
        }
    }
    /**
     * @return {?}
     */
    get items() {
        return this._items;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set items(value) {
        this._itemsAreUsed = true;
        this._items = value;
    }
    /**
     * Value of the select control.
     * @return {?}
     */
    get value() {
        return this._value;
    }
    /**
     * @param {?} newValue
     * @return {?}
     */
    set value(newValue) {
        this._value = newValue;
        this._onChange(newValue);
        this.stateChanges.next();
    }
    /**
     * Unique id of the element.
     * @return {?}
     */
    get id() {
        return this._id;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set id(value) {
        this._id = value || this._uid;
        this.stateChanges.next();
    }
    /**
     * Placeholder to be shown if value is empty.
     * @return {?}
     */
    get placeholder() {
        return this._placeholder;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set placeholder(value) {
        this._placeholder = value;
        this.stateChanges.next();
    }
    /**
     * Whether the input is focused.
     * @return {?}
     */
    get focused() {
        return this._focused;
    }
    /**
     * @return {?}
     */
    get empty() {
        return !this.value || (Array.isArray(this.value) && this.value.length === 0);
    }
    /**
     * @return {?}
     */
    get shouldLabelFloat() {
        return this.focused || !this.empty;
    }
    /**
     * @return {?}
     */
    get required() {
        return this._required;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set required(value) {
        this._required = coerceBooleanProperty(value);
        this.stateChanges.next();
    }
    /**
     * @return {?}
     */
    get disabled() {
        return this._disabled;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set disabled(value) {
        this._disabled = coerceBooleanProperty(value);
        this.readonly = this._disabled;
        this.stateChanges.next();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        // Fix compareWith warning of undefined value
        // https://github.com/ng-select/ng-select/issues/1537
        if (this.compareWith) {
            this.ngSelect.compareWith = this.compareWith;
        }
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        if (!this._itemsAreUsed) {
            this._setItemsFromMtxOptions();
        }
    }
    /**
     * @return {?}
     */
    ngDoCheck() {
        if (this.ngControl) {
            this.errorState = this.ngControl.invalid && this.ngControl.touched;
            this.stateChanges.next();
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this._destroy$.next();
        this._destroy$.complete();
        this.stateChanges.complete();
        this._focusMonitor.stopMonitoring(this._elementRef);
    }
    /**
     * Implemented as part of MatFormFieldControl.
     * @param {?} ids
     * @return {?}
     */
    setDescribedByIds(ids) {
        this._ariaDescribedby = ids.join(' ');
    }
    /**
     * Implemented as part of MatFormFieldControl.
     * @param {?} isDisabled
     * @return {?}
     */
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    /**
     * Implemented as part of MatFormFieldControl.
     * @return {?}
     */
    onContainerClick() { }
    /**
     * Sets the select's value. Part of the ControlValueAccessor interface
     * required to integrate with Angular's core forms API.
     *
     * @param {?} value New value to be written to the model.
     * @return {?}
     */
    writeValue(value) {
        this._value = value;
        this._changeDetectorRef.markForCheck();
    }
    /**
     * Saves a callback function to be invoked when the select's value
     * changes from user input. Part of the ControlValueAccessor interface
     * required to integrate with Angular's core forms API.
     *
     * @param {?} fn Callback to be triggered when the value changes.
     * @return {?}
     */
    registerOnChange(fn) {
        this._onChange = fn;
    }
    /**
     * Saves a callback function to be invoked when the select is blurred
     * by the user. Part of the ControlValueAccessor interface required
     * to integrate with Angular's core forms API.
     *
     * @param {?} fn Callback to be triggered when the component has been touched.
     * @return {?}
     */
    registerOnTouched(fn) {
        this._onTouched = fn;
    }
    /**
     * NgSelect: _setItemsFromNgOptions
     * @private
     * @return {?}
     */
    _setItemsFromMtxOptions() {
        /** @type {?} */
        const mapMtxOptions = (/**
         * @param {?} options
         * @return {?}
         */
        (options) => {
            this.items = options.map((/**
             * @param {?} option
             * @return {?}
             */
            option => ({
                $ngOptionValue: option.value,
                $ngOptionLabel: option.elementRef.nativeElement.innerHTML,
                disabled: option.disabled,
            })));
            this.ngSelect.itemsList.setItems(this.items);
            if (this.ngSelect.hasValue) {
                this.ngSelect.itemsList.mapSelectedItems();
            }
            this.ngSelect.detectChanges();
        });
        /** @type {?} */
        const handleOptionChange = (/**
         * @return {?}
         */
        () => {
            /** @type {?} */
            const changedOrDestroyed = merge(this.mtxOptions.changes, this._destroy$);
            merge(...this.mtxOptions.map((/**
             * @param {?} option
             * @return {?}
             */
            option => option.stateChange$)))
                .pipe(takeUntil(changedOrDestroyed))
                .subscribe((/**
             * @param {?} option
             * @return {?}
             */
            option => {
                /** @type {?} */
                const item = this.ngSelect.itemsList.findItem(option.value);
                item.disabled = option.disabled;
                item.label = option.label || item.label;
                this.ngSelect.detectChanges();
            }));
        });
        this.mtxOptions.changes
            .pipe(startWith(this.mtxOptions), takeUntil(this._destroy$))
            .subscribe((/**
         * @param {?} options
         * @return {?}
         */
        options => {
            mapMtxOptions(options);
            handleOptionChange();
        }));
    }
}
MtxSelectComponent.ɵfac = function MtxSelectComponent_Factory(t) { return new (t || MtxSelectComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.NgControl, 10)); };
MtxSelectComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MtxSelectComponent, selectors: [["mtx-select"]], contentQueries: function MtxSelectComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, MtxSelectOptionTemplateDirective, true, TemplateRef);
        ɵngcc0.ɵɵcontentQuery(dirIndex, MtxSelectOptgroupTemplateDirective, true, TemplateRef);
        ɵngcc0.ɵɵcontentQuery(dirIndex, MtxSelectLabelTemplateDirective, true, TemplateRef);
        ɵngcc0.ɵɵcontentQuery(dirIndex, MtxSelectMultiLabelTemplateDirective, true, TemplateRef);
        ɵngcc0.ɵɵcontentQuery(dirIndex, MtxSelectHeaderTemplateDirective, true, TemplateRef);
        ɵngcc0.ɵɵcontentQuery(dirIndex, MtxSelectFooterTemplateDirective, true, TemplateRef);
        ɵngcc0.ɵɵcontentQuery(dirIndex, MtxSelectNotFoundTemplateDirective, true, TemplateRef);
        ɵngcc0.ɵɵcontentQuery(dirIndex, MtxSelectTypeToSearchTemplateDirective, true, TemplateRef);
        ɵngcc0.ɵɵcontentQuery(dirIndex, MtxSelectLoadingTextTemplateDirective, true, TemplateRef);
        ɵngcc0.ɵɵcontentQuery(dirIndex, MtxSelectTagTemplateDirective, true, TemplateRef);
        ɵngcc0.ɵɵcontentQuery(dirIndex, MtxSelectLoadingSpinnerTemplateDirective, true, TemplateRef);
        ɵngcc0.ɵɵcontentQuery(dirIndex, MtxOptionComponent, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.optionTemplate = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.optgroupTemplate = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.labelTemplate = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.multiLabelTemplate = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.headerTemplate = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.footerTemplate = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.notFoundTemplate = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.typeToSearchTemplate = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.loadingTextTemplate = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.tagTemplate = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.loadingSpinnerTemplate = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.mtxOptions = _t);
    } }, viewQuery: function MtxSelectComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵstaticViewQuery(_c1, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.ngSelect = _t.first);
    } }, hostAttrs: [1, "mtx-select"], hostVars: 4, hostBindings: function MtxSelectComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵattribute("id", ctx.id)("aria-describedby", ctx._ariaDescribedby || null);
        ɵngcc0.ɵɵclassProp("mtx-select-floating", ctx.shouldLabelFloat);
    } }, inputs: { addTag: "addTag", addTagText: "addTagText", appearance: "appearance", closeOnSelect: "closeOnSelect", clearAllText: "clearAllText", clearable: "clearable", clearOnBackspace: "clearOnBackspace", dropdownPosition: "dropdownPosition", selectableGroup: "selectableGroup", selectableGroupAsModel: "selectableGroupAsModel", hideSelected: "hideSelected", loading: "loading", loadingText: "loadingText", labelForId: "labelForId", markFirst: "markFirst", multiple: "multiple", notFoundText: "notFoundText", searchable: "searchable", readonly: "readonly", searchFn: "searchFn", searchWhileComposing: "searchWhileComposing", clearSearchOnAdd: "clearSearchOnAdd", selectOnTab: "selectOnTab", trackByFn: "trackByFn", inputAttrs: "inputAttrs", openOnEnter: "openOnEnter", minTermLength: "minTermLength", keyDownFn: "keyDownFn", virtualScroll: "virtualScroll", typeToSearchText: "typeToSearchText", items: "items", value: "value", id: "id", placeholder: "placeholder", required: "required", disabled: "disabled", appendTo: "appendTo", bindLabel: "bindLabel", bindValue: "bindValue", compareWith: "compareWith", groupBy: "groupBy", groupValue: "groupValue", isOpen: "isOpen", maxSelectedItems: "maxSelectedItems", tabIndex: "tabIndex", typeahead: "typeahead" }, outputs: { blur: "blur", focus: "focus", change: "change", open: "open", close: "close", search: "search", clear: "clear", add: "add", remove: "remove", scroll: "scroll", scrollToEnd: "scrollToEnd" }, exportAs: ["mtxSelect"], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: MatFormFieldControl, useExisting: MtxSelectComponent }])], decls: 13, vars: 53, consts: [[3, "ngModel", "placeholder", "items", "addTag", "addTagText", "appendTo", "appearance", "bindLabel", "bindValue", "closeOnSelect", "clearAllText", "clearable", "clearOnBackspace", "dropdownPosition", "groupBy", "groupValue", "hideSelected", "isOpen", "inputAttrs", "loading", "loadingText", "labelForId", "markFirst", "maxSelectedItems", "multiple", "notFoundText", "readonly", "typeahead", "typeToSearchText", "trackByFn", "searchable", "searchFn", "searchWhileComposing", "clearSearchOnAdd", "selectableGroup", "selectableGroupAsModel", "selectOnTab", "tabIndex", "openOnEnter", "minTermLength", "keyDownFn", "virtualScroll", "ngModelChange", "blur", "focus", "change", "open", "close", "search", "clear", "add", "remove", "scroll", "scrollToEnd"], ["ngSelect", ""], [4, "ngIf"], ["ng-option-tmp", ""], [3, "ngTemplateOutlet", "ngTemplateOutletContext"], ["ng-optgroup-tmp", ""], ["ng-label-tmp", ""], ["ng-multi-label-tmp", ""], ["ng-header-tmp", ""], [3, "ngTemplateOutlet"], ["ng-footer-tmp", ""], ["ng-notfound-tmp", ""], ["ng-typetosearch-tmp", ""], ["ng-loadingtext-tmp", ""], ["ng-tag-tmp", ""], ["ng-loadingspinner-tmp", ""]], template: function MtxSelectComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "ng-select", 0, 1);
        ɵngcc0.ɵɵlistener("ngModelChange", function MtxSelectComponent_Template_ng_select_ngModelChange_0_listener($event) { return ctx.value = $event; })("blur", function MtxSelectComponent_Template_ng_select_blur_0_listener($event) { return ctx.blur.emit($event); })("focus", function MtxSelectComponent_Template_ng_select_focus_0_listener($event) { return ctx.focus.emit($event); })("change", function MtxSelectComponent_Template_ng_select_change_0_listener($event) { return ctx.change.emit($event); })("open", function MtxSelectComponent_Template_ng_select_open_0_listener($event) { return ctx.open.emit($event); })("close", function MtxSelectComponent_Template_ng_select_close_0_listener($event) { return ctx.close.emit($event); })("search", function MtxSelectComponent_Template_ng_select_search_0_listener($event) { return ctx.search.emit($event); })("clear", function MtxSelectComponent_Template_ng_select_clear_0_listener($event) { return ctx.clear.emit($event); })("add", function MtxSelectComponent_Template_ng_select_add_0_listener($event) { return ctx.add.emit($event); })("remove", function MtxSelectComponent_Template_ng_select_remove_0_listener($event) { return ctx.remove.emit($event); })("scroll", function MtxSelectComponent_Template_ng_select_scroll_0_listener($event) { return ctx.scroll.emit($event); })("scrollToEnd", function MtxSelectComponent_Template_ng_select_scrollToEnd_0_listener($event) { return ctx.scrollToEnd.emit($event); });
        ɵngcc0.ɵɵtemplate(2, MtxSelectComponent_ng_container_2_Template, 2, 0, "ng-container", 2);
        ɵngcc0.ɵɵtemplate(3, MtxSelectComponent_ng_container_3_Template, 2, 0, "ng-container", 2);
        ɵngcc0.ɵɵtemplate(4, MtxSelectComponent_ng_container_4_Template, 2, 0, "ng-container", 2);
        ɵngcc0.ɵɵtemplate(5, MtxSelectComponent_ng_container_5_Template, 2, 0, "ng-container", 2);
        ɵngcc0.ɵɵtemplate(6, MtxSelectComponent_ng_container_6_Template, 2, 0, "ng-container", 2);
        ɵngcc0.ɵɵtemplate(7, MtxSelectComponent_ng_container_7_Template, 2, 0, "ng-container", 2);
        ɵngcc0.ɵɵtemplate(8, MtxSelectComponent_ng_container_8_Template, 2, 0, "ng-container", 2);
        ɵngcc0.ɵɵtemplate(9, MtxSelectComponent_ng_container_9_Template, 2, 0, "ng-container", 2);
        ɵngcc0.ɵɵtemplate(10, MtxSelectComponent_ng_container_10_Template, 2, 0, "ng-container", 2);
        ɵngcc0.ɵɵtemplate(11, MtxSelectComponent_ng_container_11_Template, 2, 0, "ng-container", 2);
        ɵngcc0.ɵɵtemplate(12, MtxSelectComponent_ng_container_12_Template, 2, 0, "ng-container", 2);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngModel", ctx.value)("placeholder", ctx.placeholder)("items", ctx.items)("addTag", ctx.addTag)("addTagText", ctx.addTagText)("appendTo", ctx.appendTo)("appearance", ctx.appearance)("bindLabel", ctx.bindLabel)("bindValue", ctx.bindValue)("closeOnSelect", ctx.closeOnSelect)("clearAllText", ctx.clearAllText)("clearable", ctx.clearable)("clearOnBackspace", ctx.clearOnBackspace)("dropdownPosition", ctx.dropdownPosition)("groupBy", ctx.groupBy)("groupValue", ctx.groupValue)("hideSelected", ctx.hideSelected)("isOpen", ctx.isOpen)("inputAttrs", ctx.inputAttrs)("loading", ctx.loading)("loadingText", ctx.loadingText)("labelForId", ctx.labelForId)("markFirst", ctx.markFirst)("maxSelectedItems", ctx.maxSelectedItems)("multiple", ctx.multiple)("notFoundText", ctx.notFoundText)("readonly", ctx.readonly)("typeahead", ctx.typeahead)("typeToSearchText", ctx.typeToSearchText)("trackByFn", ctx.trackByFn)("searchable", ctx.searchable)("searchFn", ctx.searchFn)("searchWhileComposing", ctx.searchWhileComposing)("clearSearchOnAdd", ctx.clearSearchOnAdd)("selectableGroup", ctx.selectableGroup)("selectableGroupAsModel", ctx.selectableGroupAsModel)("selectOnTab", ctx.selectOnTab)("tabIndex", ctx.tabIndex)("openOnEnter", ctx.openOnEnter)("minTermLength", ctx.minTermLength)("keyDownFn", ctx.keyDownFn)("virtualScroll", ctx.virtualScroll);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.optionTemplate);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.optgroupTemplate);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.labelTemplate);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.multiLabelTemplate);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.headerTemplate);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.footerTemplate);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.notFoundTemplate);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.typeToSearchTemplate);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.loadingTextTemplate);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.tagTemplate);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.loadingSpinnerTemplate);
    } }, directives: [ɵngcc3.NgSelectComponent, ɵngcc2.NgControlStatus, ɵngcc2.NgModel, ɵngcc4.NgIf, ɵngcc3.ɵf, MtxSelectOptionTemplateDirective, ɵngcc4.NgTemplateOutlet, ɵngcc3.ɵg, MtxSelectOptgroupTemplateDirective, ɵngcc3.ɵh, MtxSelectLabelTemplateDirective, ɵngcc3.ɵi, MtxSelectMultiLabelTemplateDirective, ɵngcc3.ɵj, MtxSelectHeaderTemplateDirective, ɵngcc3.ɵk, MtxSelectFooterTemplateDirective, ɵngcc3.ɵl, MtxSelectNotFoundTemplateDirective, ɵngcc3.ɵm, MtxSelectTypeToSearchTemplateDirective, ɵngcc3.ɵn, MtxSelectLoadingTextTemplateDirective, ɵngcc3.ɵo, MtxSelectTagTemplateDirective, ɵngcc3.ɵp, MtxSelectLoadingSpinnerTemplateDirective], styles: [".ng-select{padding-top:calc(.4375em + .84375em);margin-top:calc(-.4375em - .84375em);padding-bottom:.4375em;margin-bottom:-.4375em}.ng-select.ng-select-opened>.ng-select-container .ng-arrow{top:-2px;border-color:transparent transparent rgba(0,0,0,.54);border-width:0 5px 5px}.ng-select .ng-has-value .ng-placeholder{display:none}.ng-select .ng-select-container{align-items:center;color:rgba(0,0,0,.87)}.ng-select .ng-select-container .ng-value-container{align-items:center}.ng-select .ng-select-container .ng-value-container .ng-placeholder{color:rgba(102,102,102,.87);opacity:0;transition:opacity .2s}.mtx-select-floating .ng-select .ng-select-container .ng-value-container .ng-placeholder{opacity:1}.ng-select.ng-select-disabled .ng-value{color:rgba(0,0,0,.38)}.ng-select.ng-select-single.ng-select-filtered .ng-placeholder{display:initial;visibility:hidden}.ng-select.ng-select-single .ng-select-container .ng-value-container .ng-placeholder::after,.ng-select.ng-select-single .ng-select-container .ng-value-container .ng-value::after{display:inline-block;content:\"\"}.ng-select.ng-select-single .ng-select-container .ng-value-container .ng-input{left:0}.ng-select.ng-select-multiple .ng-select-container .ng-value-container{margin:-4px 0}.ng-select.ng-select-multiple .ng-select-container .ng-value-container .ng-value{margin:4px;border-radius:16px;line-height:18px;font-size:.875em;background-color:#e8eaf7}.ng-select.ng-select-multiple .ng-select-container .ng-value-container .ng-value.ng-value-disabled{background-color:rgba(0,0,0,.1);color:rgba(0,0,0,.38)}.ng-select.ng-select-multiple .ng-select-container .ng-value-container .ng-value .ng-value-label{display:inline-block;margin:0 8px}.ng-select.ng-select-multiple .ng-select-container .ng-value-container .ng-value .ng-value-icon{display:inline-block;width:18px;height:18px;border-radius:100%;background-color:#d9dcf2;text-align:center}.ng-select.ng-select-multiple .ng-select-container .ng-value-container .ng-value .ng-value-icon:hover{background-color:#c9cfec}.ng-select.ng-select-multiple .ng-select-container .ng-value-container .ng-value .ng-value-icon.left{margin-left:-4px}.ng-select.ng-select-multiple .ng-select-container .ng-value-container .ng-value .ng-value-icon.right,[dir=rtl] .ng-select.ng-select-multiple .ng-select-container .ng-value-container .ng-value .ng-value-icon.left{margin-right:-4px}[dir=rtl] .ng-select.ng-select-multiple .ng-select-container .ng-value-container .ng-value .ng-value-icon.right{margin-left:-4px}.ng-select.ng-select-multiple .ng-select-container .ng-value-container .ng-input>input{font:inherit;padding:0}.ng-select .ng-clear-wrapper{height:18px;color:rgba(0,0,0,.54);text-align:center}.ng-select .ng-clear-wrapper:hover .ng-clear{color:#f44336}.ng-select .ng-arrow-wrapper{width:18px}.ng-select .ng-arrow-wrapper .ng-arrow{border-color:rgba(0,0,0,.54) transparent transparent;border-style:solid;border-width:5px 5px 2.5px}.ng-dropdown-panel{left:0;background:#fff}.ng-dropdown-panel.ng-select-bottom{top:100%;border-bottom-left-radius:4px;border-bottom-right-radius:4px;box-shadow:0 2px 4px -1px rgba(0,0,0,.2),0 4px 5px 0 rgba(0,0,0,.14),0 1px 10px 0 rgba(0,0,0,.12)}.ng-dropdown-panel.ng-select-top{bottom:100%;border-top-left-radius:4px;border-top-right-radius:4px;box-shadow:0 2px 4px -1px rgba(0,0,0,.2),0 4px 5px 0 rgba(0,0,0,.14),0 1px 10px 0 rgba(0,0,0,.12)}.ng-dropdown-panel.multiple .ng-option.selected{background:#fff}.ng-dropdown-panel.multiple .ng-option.marked{background:#eff1fa}.ng-dropdown-panel .ng-dropdown-header{padding:14px 16px;border-bottom:1px solid rgba(0,0,0,.12)}.ng-dropdown-panel .ng-dropdown-footer{padding:14px 16px;border-top:1px solid rgba(0,0,0,.12)}.ng-dropdown-panel .ng-dropdown-panel-items .ng-optgroup{height:3em;padding:14px 16px;font-weight:500;color:rgba(0,0,0,.54);cursor:pointer;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.ng-dropdown-panel .ng-dropdown-panel-items .ng-optgroup.ng-option-marked{background:#eff1fa}.ng-dropdown-panel .ng-dropdown-panel-items .ng-optgroup.ng-option-disabled{cursor:default}.ng-dropdown-panel .ng-dropdown-panel-items .ng-optgroup.ng-option-selected{background:rgba(0,0,0,.12);color:#3f51b5}.ng-dropdown-panel .ng-dropdown-panel-items .ng-option{position:relative;padding:14px 16px;color:rgba(0,0,0,.87);text-overflow:ellipsis;text-decoration:none;text-align:left;white-space:nowrap;overflow:hidden}[dir=rtl] .ng-dropdown-panel .ng-dropdown-panel-items .ng-option{text-align:right}.ng-dropdown-panel .ng-dropdown-panel-items .ng-option.ng-option-marked{background:#eff1fa;color:rgba(0,0,0,.87)}.ng-dropdown-panel .ng-dropdown-panel-items .ng-option.ng-option-selected{background:rgba(0,0,0,.12);color:#3f51b5}.ng-dropdown-panel .ng-dropdown-panel-items .ng-option.ng-option-disabled{color:rgba(0,0,0,.38)}.ng-dropdown-panel .ng-dropdown-panel-items .ng-option.ng-option-child{padding-left:32px}[dir=rtl] .ng-dropdown-panel .ng-dropdown-panel-items .ng-option.ng-option-child{padding-right:32px;padding-left:0}.ng-dropdown-panel .ng-dropdown-panel-items .ng-option .ng-tag-label{padding-right:5px;font-size:80%;font-weight:400;color:rgba(0,0,0,.38)}[dir=rtl] .ng-dropdown-panel .ng-dropdown-panel-items .ng-option .ng-tag-label{padding-left:5px;padding-right:0}"], encapsulation: 2, changeDetection: 0 });
/** @nocollapse */
MtxSelectComponent.ctorParameters = () => [
    { type: FocusMonitor },
    { type: ElementRef },
    { type: ChangeDetectorRef },
    { type: NgControl, decorators: [{ type: Optional }, { type: Self }] }
];
MtxSelectComponent.propDecorators = {
    ngSelect: [{ type: ViewChild, args: ['ngSelect', { static: true },] }],
    optionTemplate: [{ type: ContentChild, args: [MtxSelectOptionTemplateDirective, { read: TemplateRef },] }],
    optgroupTemplate: [{ type: ContentChild, args: [MtxSelectOptgroupTemplateDirective, { read: TemplateRef },] }],
    labelTemplate: [{ type: ContentChild, args: [MtxSelectLabelTemplateDirective, { read: TemplateRef },] }],
    multiLabelTemplate: [{ type: ContentChild, args: [MtxSelectMultiLabelTemplateDirective, { read: TemplateRef },] }],
    headerTemplate: [{ type: ContentChild, args: [MtxSelectHeaderTemplateDirective, { read: TemplateRef },] }],
    footerTemplate: [{ type: ContentChild, args: [MtxSelectFooterTemplateDirective, { read: TemplateRef },] }],
    notFoundTemplate: [{ type: ContentChild, args: [MtxSelectNotFoundTemplateDirective, { read: TemplateRef },] }],
    typeToSearchTemplate: [{ type: ContentChild, args: [MtxSelectTypeToSearchTemplateDirective, { read: TemplateRef },] }],
    loadingTextTemplate: [{ type: ContentChild, args: [MtxSelectLoadingTextTemplateDirective, { read: TemplateRef },] }],
    tagTemplate: [{ type: ContentChild, args: [MtxSelectTagTemplateDirective, { read: TemplateRef },] }],
    loadingSpinnerTemplate: [{ type: ContentChild, args: [MtxSelectLoadingSpinnerTemplateDirective, { read: TemplateRef },] }],
    mtxOptions: [{ type: ContentChildren, args: [MtxOptionComponent, { descendants: true },] }],
    addTag: [{ type: Input }],
    addTagText: [{ type: Input }],
    appearance: [{ type: Input }],
    appendTo: [{ type: Input }],
    bindLabel: [{ type: Input }],
    bindValue: [{ type: Input }],
    closeOnSelect: [{ type: Input }],
    clearAllText: [{ type: Input }],
    clearable: [{ type: Input }],
    clearOnBackspace: [{ type: Input }],
    compareWith: [{ type: Input }],
    dropdownPosition: [{ type: Input }],
    groupBy: [{ type: Input }],
    groupValue: [{ type: Input }],
    selectableGroup: [{ type: Input }],
    selectableGroupAsModel: [{ type: Input }],
    hideSelected: [{ type: Input }],
    isOpen: [{ type: Input }],
    loading: [{ type: Input }],
    loadingText: [{ type: Input }],
    labelForId: [{ type: Input }],
    markFirst: [{ type: Input }],
    maxSelectedItems: [{ type: Input }],
    multiple: [{ type: Input }],
    notFoundText: [{ type: Input }],
    searchable: [{ type: Input }],
    readonly: [{ type: Input }],
    searchFn: [{ type: Input }],
    searchWhileComposing: [{ type: Input }],
    clearSearchOnAdd: [{ type: Input }],
    selectOnTab: [{ type: Input }],
    trackByFn: [{ type: Input }],
    inputAttrs: [{ type: Input }],
    tabIndex: [{ type: Input }],
    openOnEnter: [{ type: Input }],
    minTermLength: [{ type: Input }],
    keyDownFn: [{ type: Input }],
    virtualScroll: [{ type: Input }],
    typeToSearchText: [{ type: Input }],
    typeahead: [{ type: Input }],
    blur: [{ type: Output }],
    focus: [{ type: Output }],
    change: [{ type: Output }],
    open: [{ type: Output }],
    close: [{ type: Output }],
    search: [{ type: Output }],
    clear: [{ type: Output }],
    add: [{ type: Output }],
    remove: [{ type: Output }],
    scroll: [{ type: Output }],
    scrollToEnd: [{ type: Output }],
    items: [{ type: Input }],
    value: [{ type: Input }],
    id: [{ type: Input }],
    placeholder: [{ type: Input }],
    required: [{ type: Input }],
    disabled: [{ type: Input }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MtxSelectComponent, [{
        type: Component,
        args: [{
                selector: 'mtx-select',
                exportAs: 'mtxSelect',
                host: {
                    'class': 'mtx-select',
                    '[class.mtx-select-floating]': 'shouldLabelFloat',
                    '[attr.id]': 'id',
                    '[attr.aria-describedby]': '_ariaDescribedby || null'
                },
                template: "<ng-select #ngSelect\n           [(ngModel)]=\"value\"\n           [placeholder]=\"placeholder\"\n           [items]=\"items\"\n           [addTag]=\"addTag\"\n           [addTagText]=\"addTagText\"\n           [appendTo]=\"appendTo\"\n           [appearance]=\"appearance\"\n           [bindLabel]=\"bindLabel\"\n           [bindValue]=\"bindValue\"\n           [closeOnSelect]=\"closeOnSelect\"\n           [clearAllText]=\"clearAllText\"\n           [clearable]=\"clearable\"\n           [clearOnBackspace]=\"clearOnBackspace\"\n           [dropdownPosition]=\"dropdownPosition\"\n           [groupBy]=\"groupBy\"\n           [groupValue]=\"groupValue\"\n           [hideSelected]=\"hideSelected\"\n           [isOpen]=\"isOpen\"\n           [inputAttrs]=\"inputAttrs\"\n           [loading]=\"loading\"\n           [loadingText]=\"loadingText\"\n           [labelForId]=\"labelForId\"\n           [markFirst]=\"markFirst\"\n           [maxSelectedItems]=\"maxSelectedItems\"\n           [multiple]=\"multiple\"\n           [notFoundText]=\"notFoundText\"\n           [readonly]=\"readonly\"\n           [typeahead]=\"typeahead\"\n           [typeToSearchText]=\"typeToSearchText\"\n           [trackByFn]=\"trackByFn\"\n           [searchable]=\"searchable\"\n           [searchFn]=\"searchFn\"\n           [searchWhileComposing]=\"searchWhileComposing\"\n           [clearSearchOnAdd]=\"clearSearchOnAdd\"\n           [selectableGroup]=\"selectableGroup\"\n           [selectableGroupAsModel]=\"selectableGroupAsModel\"\n           [selectOnTab]=\"selectOnTab\"\n           [tabIndex]=\"tabIndex\"\n           [openOnEnter]=\"openOnEnter\"\n           [minTermLength]=\"minTermLength\"\n           [keyDownFn]=\"keyDownFn\"\n           [virtualScroll]=\"virtualScroll\"\n           (blur)=\"blur.emit($event)\"\n           (focus)=\"focus.emit($event)\"\n           (change)=\"change.emit($event)\"\n           (open)=\"open.emit($event)\"\n           (close)=\"close.emit($event)\"\n           (search)=\"search.emit($event)\"\n           (clear)=\"clear.emit($event)\"\n           (add)=\"add.emit($event)\"\n           (remove)=\"remove.emit($event)\"\n           (scroll)=\"scroll.emit($event)\"\n           (scrollToEnd)=\"scrollToEnd.emit($event)\">\n\n  <ng-container *ngIf=\"optionTemplate\">\n    <ng-template ng-option-tmp let-item=\"item\" let-index=\"index\" let-searchTerm=\"searchTerm\">\n      <ng-template [ngTemplateOutlet]=\"optionTemplate\"\n                   [ngTemplateOutletContext]=\"{ item: item, item$: item, index: index, searchTerm: searchTerm }\">\n      </ng-template>\n    </ng-template>\n  </ng-container>\n\n  <ng-container *ngIf=\"optgroupTemplate\">\n    <ng-template ng-optgroup-tmp let-item=\"item\" let-index=\"index\" let-searchTerm=\"searchTerm\">\n      <ng-template [ngTemplateOutlet]=\"optgroupTemplate\"\n                   [ngTemplateOutletContext]=\"{ item: item, item$: item, index: index, searchTerm: searchTerm }\">\n      </ng-template>\n    </ng-template>\n  </ng-container>\n\n  <ng-container *ngIf=\"labelTemplate\">\n    <ng-template ng-label-tmp let-item=\"item\" let-clear=\"clear\" let-label=\"label\">\n      <ng-template [ngTemplateOutlet]=\"labelTemplate\"\n                   [ngTemplateOutletContext]=\"{ item: item, clear: clear, label: label }\">\n      </ng-template>\n    </ng-template>\n  </ng-container>\n\n  <ng-container *ngIf=\"multiLabelTemplate\">\n    <ng-template ng-multi-label-tmp let-items=\"items\" let-clear=\"clear\">\n      <ng-template [ngTemplateOutlet]=\"multiLabelTemplate\"\n                   [ngTemplateOutletContext]=\"{ items: items, clear: clear }\">\n      </ng-template>\n    </ng-template>\n  </ng-container>\n\n  <ng-container *ngIf=\"headerTemplate\">\n    <ng-template ng-header-tmp>\n      <ng-template [ngTemplateOutlet]=\"headerTemplate\">\n      </ng-template>\n    </ng-template>\n  </ng-container>\n\n  <ng-container *ngIf=\"footerTemplate\">\n    <ng-template ng-footer-tmp>\n      <ng-template [ngTemplateOutlet]=\"footerTemplate\">\n      </ng-template>\n    </ng-template>\n  </ng-container>\n\n  <ng-container *ngIf=\"notFoundTemplate\">\n    <ng-template ng-notfound-tmp let-searchTerm=\"searchTerm\">\n      <ng-template [ngTemplateOutlet]=\"notFoundTemplate\"\n                   [ngTemplateOutletContext]=\"{ searchTerm: searchTerm }\">\n      </ng-template>\n    </ng-template>\n  </ng-container>\n\n  <ng-container *ngIf=\"typeToSearchTemplate\">\n    <ng-template ng-typetosearch-tmp>\n      <ng-template [ngTemplateOutlet]=\"typeToSearchTemplate\">\n      </ng-template>\n    </ng-template>\n  </ng-container>\n\n  <ng-container *ngIf=\"loadingTextTemplate\">\n    <ng-template ng-loadingtext-tmp let-searchTerm=\"searchTerm\">\n      <ng-template [ngTemplateOutlet]=\"loadingTextTemplate\"\n                   [ngTemplateOutletContext]=\"{ searchTerm: searchTerm }\">\n      </ng-template>\n    </ng-template>\n  </ng-container>\n\n  <ng-container *ngIf=\"tagTemplate\">\n    <ng-template ng-tag-tmp let-searchTerm=\"searchTerm\">\n      <ng-template [ngTemplateOutlet]=\"tagTemplate\"\n                   [ngTemplateOutletContext]=\"{ searchTerm: searchTerm }\">\n      </ng-template>\n    </ng-template>\n  </ng-container>\n\n  <ng-container *ngIf=\"loadingSpinnerTemplate\">\n    <ng-template ng-loadingspinner-tmp>\n      <ng-template [ngTemplateOutlet]=\"loadingSpinnerTemplate\">\n      </ng-template>\n    </ng-template>\n  </ng-container>\n\n</ng-select>\n",
                encapsulation: ViewEncapsulation.None,
                changeDetection: ChangeDetectionStrategy.OnPush,
                providers: [{ provide: MatFormFieldControl, useExisting: MtxSelectComponent }],
                styles: [".ng-select{padding-top:calc(.4375em + .84375em);margin-top:calc(-.4375em - .84375em);padding-bottom:.4375em;margin-bottom:-.4375em}.ng-select.ng-select-opened>.ng-select-container .ng-arrow{top:-2px;border-color:transparent transparent rgba(0,0,0,.54);border-width:0 5px 5px}.ng-select .ng-has-value .ng-placeholder{display:none}.ng-select .ng-select-container{align-items:center;color:rgba(0,0,0,.87)}.ng-select .ng-select-container .ng-value-container{align-items:center}.ng-select .ng-select-container .ng-value-container .ng-placeholder{color:rgba(102,102,102,.87);opacity:0;transition:opacity .2s}.mtx-select-floating .ng-select .ng-select-container .ng-value-container .ng-placeholder{opacity:1}.ng-select.ng-select-disabled .ng-value{color:rgba(0,0,0,.38)}.ng-select.ng-select-single.ng-select-filtered .ng-placeholder{display:initial;visibility:hidden}.ng-select.ng-select-single .ng-select-container .ng-value-container .ng-placeholder::after,.ng-select.ng-select-single .ng-select-container .ng-value-container .ng-value::after{display:inline-block;content:\"\"}.ng-select.ng-select-single .ng-select-container .ng-value-container .ng-input{left:0}.ng-select.ng-select-multiple .ng-select-container .ng-value-container{margin:-4px 0}.ng-select.ng-select-multiple .ng-select-container .ng-value-container .ng-value{margin:4px;border-radius:16px;line-height:18px;font-size:.875em;background-color:#e8eaf7}.ng-select.ng-select-multiple .ng-select-container .ng-value-container .ng-value.ng-value-disabled{background-color:rgba(0,0,0,.1);color:rgba(0,0,0,.38)}.ng-select.ng-select-multiple .ng-select-container .ng-value-container .ng-value .ng-value-label{display:inline-block;margin:0 8px}.ng-select.ng-select-multiple .ng-select-container .ng-value-container .ng-value .ng-value-icon{display:inline-block;width:18px;height:18px;border-radius:100%;background-color:#d9dcf2;text-align:center}.ng-select.ng-select-multiple .ng-select-container .ng-value-container .ng-value .ng-value-icon:hover{background-color:#c9cfec}.ng-select.ng-select-multiple .ng-select-container .ng-value-container .ng-value .ng-value-icon.left{margin-left:-4px}.ng-select.ng-select-multiple .ng-select-container .ng-value-container .ng-value .ng-value-icon.right,[dir=rtl] .ng-select.ng-select-multiple .ng-select-container .ng-value-container .ng-value .ng-value-icon.left{margin-right:-4px}[dir=rtl] .ng-select.ng-select-multiple .ng-select-container .ng-value-container .ng-value .ng-value-icon.right{margin-left:-4px}.ng-select.ng-select-multiple .ng-select-container .ng-value-container .ng-input>input{font:inherit;padding:0}.ng-select .ng-clear-wrapper{height:18px;color:rgba(0,0,0,.54);text-align:center}.ng-select .ng-clear-wrapper:hover .ng-clear{color:#f44336}.ng-select .ng-arrow-wrapper{width:18px}.ng-select .ng-arrow-wrapper .ng-arrow{border-color:rgba(0,0,0,.54) transparent transparent;border-style:solid;border-width:5px 5px 2.5px}.ng-dropdown-panel{left:0;background:#fff}.ng-dropdown-panel.ng-select-bottom{top:100%;border-bottom-left-radius:4px;border-bottom-right-radius:4px;box-shadow:0 2px 4px -1px rgba(0,0,0,.2),0 4px 5px 0 rgba(0,0,0,.14),0 1px 10px 0 rgba(0,0,0,.12)}.ng-dropdown-panel.ng-select-top{bottom:100%;border-top-left-radius:4px;border-top-right-radius:4px;box-shadow:0 2px 4px -1px rgba(0,0,0,.2),0 4px 5px 0 rgba(0,0,0,.14),0 1px 10px 0 rgba(0,0,0,.12)}.ng-dropdown-panel.multiple .ng-option.selected{background:#fff}.ng-dropdown-panel.multiple .ng-option.marked{background:#eff1fa}.ng-dropdown-panel .ng-dropdown-header{padding:14px 16px;border-bottom:1px solid rgba(0,0,0,.12)}.ng-dropdown-panel .ng-dropdown-footer{padding:14px 16px;border-top:1px solid rgba(0,0,0,.12)}.ng-dropdown-panel .ng-dropdown-panel-items .ng-optgroup{height:3em;padding:14px 16px;font-weight:500;color:rgba(0,0,0,.54);cursor:pointer;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.ng-dropdown-panel .ng-dropdown-panel-items .ng-optgroup.ng-option-marked{background:#eff1fa}.ng-dropdown-panel .ng-dropdown-panel-items .ng-optgroup.ng-option-disabled{cursor:default}.ng-dropdown-panel .ng-dropdown-panel-items .ng-optgroup.ng-option-selected{background:rgba(0,0,0,.12);color:#3f51b5}.ng-dropdown-panel .ng-dropdown-panel-items .ng-option{position:relative;padding:14px 16px;color:rgba(0,0,0,.87);text-overflow:ellipsis;text-decoration:none;text-align:left;white-space:nowrap;overflow:hidden}[dir=rtl] .ng-dropdown-panel .ng-dropdown-panel-items .ng-option{text-align:right}.ng-dropdown-panel .ng-dropdown-panel-items .ng-option.ng-option-marked{background:#eff1fa;color:rgba(0,0,0,.87)}.ng-dropdown-panel .ng-dropdown-panel-items .ng-option.ng-option-selected{background:rgba(0,0,0,.12);color:#3f51b5}.ng-dropdown-panel .ng-dropdown-panel-items .ng-option.ng-option-disabled{color:rgba(0,0,0,.38)}.ng-dropdown-panel .ng-dropdown-panel-items .ng-option.ng-option-child{padding-left:32px}[dir=rtl] .ng-dropdown-panel .ng-dropdown-panel-items .ng-option.ng-option-child{padding-right:32px;padding-left:0}.ng-dropdown-panel .ng-dropdown-panel-items .ng-option .ng-tag-label{padding-right:5px;font-size:80%;font-weight:400;color:rgba(0,0,0,.38)}[dir=rtl] .ng-dropdown-panel .ng-dropdown-panel-items .ng-option .ng-tag-label{padding-left:5px;padding-right:0}"]
            }]
    }], function () { return [{ type: ɵngcc1.FocusMonitor }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc2.NgControl, decorators: [{
                type: Optional
            }, {
                type: Self
            }] }]; }, { addTag: [{
            type: Input
        }], addTagText: [{
            type: Input
        }], appearance: [{
            type: Input
        }], closeOnSelect: [{
            type: Input
        }], clearAllText: [{
            type: Input
        }], clearable: [{
            type: Input
        }], clearOnBackspace: [{
            type: Input
        }], dropdownPosition: [{
            type: Input
        }], selectableGroup: [{
            type: Input
        }], selectableGroupAsModel: [{
            type: Input
        }], hideSelected: [{
            type: Input
        }], loading: [{
            type: Input
        }], loadingText: [{
            type: Input
        }], labelForId: [{
            type: Input
        }], markFirst: [{
            type: Input
        }], multiple: [{
            type: Input
        }], notFoundText: [{
            type: Input
        }], searchable: [{
            type: Input
        }], readonly: [{
            type: Input
        }], searchFn: [{
            type: Input
        }], searchWhileComposing: [{
            type: Input
        }], clearSearchOnAdd: [{
            type: Input
        }], selectOnTab: [{
            type: Input
        }], trackByFn: [{
            type: Input
        }], inputAttrs: [{
            type: Input
        }], openOnEnter: [{
            type: Input
        }], minTermLength: [{
            type: Input
        }], keyDownFn: [{
            type: Input
        }], virtualScroll: [{
            type: Input
        }], typeToSearchText: [{
            type: Input
        }], blur: [{
            type: Output
        }], focus: [{
            type: Output
        }], change: [{
            type: Output
        }], open: [{
            type: Output
        }], close: [{
            type: Output
        }], search: [{
            type: Output
        }], clear: [{
            type: Output
        }], add: [{
            type: Output
        }], remove: [{
            type: Output
        }], scroll: [{
            type: Output
        }], scrollToEnd: [{
            type: Output
        }], items: [{
            type: Input
        }], value: [{
            type: Input
        }], id: [{
            type: Input
        }], placeholder: [{
            type: Input
        }], required: [{
            type: Input
        }], disabled: [{
            type: Input
        }], ngSelect: [{
            type: ViewChild,
            args: ['ngSelect', { static: true }]
        }], optionTemplate: [{
            type: ContentChild,
            args: [MtxSelectOptionTemplateDirective, { read: TemplateRef }]
        }], optgroupTemplate: [{
            type: ContentChild,
            args: [MtxSelectOptgroupTemplateDirective, { read: TemplateRef }]
        }], labelTemplate: [{
            type: ContentChild,
            args: [MtxSelectLabelTemplateDirective, { read: TemplateRef }]
        }], multiLabelTemplate: [{
            type: ContentChild,
            args: [MtxSelectMultiLabelTemplateDirective, { read: TemplateRef }]
        }], headerTemplate: [{
            type: ContentChild,
            args: [MtxSelectHeaderTemplateDirective, { read: TemplateRef }]
        }], footerTemplate: [{
            type: ContentChild,
            args: [MtxSelectFooterTemplateDirective, { read: TemplateRef }]
        }], notFoundTemplate: [{
            type: ContentChild,
            args: [MtxSelectNotFoundTemplateDirective, { read: TemplateRef }]
        }], typeToSearchTemplate: [{
            type: ContentChild,
            args: [MtxSelectTypeToSearchTemplateDirective, { read: TemplateRef }]
        }], loadingTextTemplate: [{
            type: ContentChild,
            args: [MtxSelectLoadingTextTemplateDirective, { read: TemplateRef }]
        }], tagTemplate: [{
            type: ContentChild,
            args: [MtxSelectTagTemplateDirective, { read: TemplateRef }]
        }], loadingSpinnerTemplate: [{
            type: ContentChild,
            args: [MtxSelectLoadingSpinnerTemplateDirective, { read: TemplateRef }]
        }], mtxOptions: [{
            type: ContentChildren,
            args: [MtxOptionComponent, { descendants: true }]
        }], appendTo: [{
            type: Input
        }], bindLabel: [{
            type: Input
        }], bindValue: [{
            type: Input
        }], compareWith: [{
            type: Input
        }], groupBy: [{
            type: Input
        }], groupValue: [{
            type: Input
        }], isOpen: [{
            type: Input
        }], maxSelectedItems: [{
            type: Input
        }], tabIndex: [{
            type: Input
        }], typeahead: [{
            type: Input
        }] }); })();
if (false) {
    /** @type {?} */
    MtxSelectComponent.prototype.ngSelect;
    /** @type {?} */
    MtxSelectComponent.prototype.optionTemplate;
    /** @type {?} */
    MtxSelectComponent.prototype.optgroupTemplate;
    /** @type {?} */
    MtxSelectComponent.prototype.labelTemplate;
    /** @type {?} */
    MtxSelectComponent.prototype.multiLabelTemplate;
    /** @type {?} */
    MtxSelectComponent.prototype.headerTemplate;
    /** @type {?} */
    MtxSelectComponent.prototype.footerTemplate;
    /** @type {?} */
    MtxSelectComponent.prototype.notFoundTemplate;
    /** @type {?} */
    MtxSelectComponent.prototype.typeToSearchTemplate;
    /** @type {?} */
    MtxSelectComponent.prototype.loadingTextTemplate;
    /** @type {?} */
    MtxSelectComponent.prototype.tagTemplate;
    /** @type {?} */
    MtxSelectComponent.prototype.loadingSpinnerTemplate;
    /** @type {?} */
    MtxSelectComponent.prototype.mtxOptions;
    /**
     * MtxSelect options
     * @type {?}
     */
    MtxSelectComponent.prototype.addTag;
    /** @type {?} */
    MtxSelectComponent.prototype.addTagText;
    /** @type {?} */
    MtxSelectComponent.prototype.appearance;
    /** @type {?} */
    MtxSelectComponent.prototype.appendTo;
    /** @type {?} */
    MtxSelectComponent.prototype.bindLabel;
    /** @type {?} */
    MtxSelectComponent.prototype.bindValue;
    /** @type {?} */
    MtxSelectComponent.prototype.closeOnSelect;
    /** @type {?} */
    MtxSelectComponent.prototype.clearAllText;
    /** @type {?} */
    MtxSelectComponent.prototype.clearable;
    /** @type {?} */
    MtxSelectComponent.prototype.clearOnBackspace;
    /** @type {?} */
    MtxSelectComponent.prototype.compareWith;
    /** @type {?} */
    MtxSelectComponent.prototype.dropdownPosition;
    /** @type {?} */
    MtxSelectComponent.prototype.groupBy;
    /** @type {?} */
    MtxSelectComponent.prototype.groupValue;
    /** @type {?} */
    MtxSelectComponent.prototype.selectableGroup;
    /** @type {?} */
    MtxSelectComponent.prototype.selectableGroupAsModel;
    /** @type {?} */
    MtxSelectComponent.prototype.hideSelected;
    /** @type {?} */
    MtxSelectComponent.prototype.isOpen;
    /** @type {?} */
    MtxSelectComponent.prototype.loading;
    /** @type {?} */
    MtxSelectComponent.prototype.loadingText;
    /** @type {?} */
    MtxSelectComponent.prototype.labelForId;
    /** @type {?} */
    MtxSelectComponent.prototype.markFirst;
    /** @type {?} */
    MtxSelectComponent.prototype.maxSelectedItems;
    /** @type {?} */
    MtxSelectComponent.prototype.multiple;
    /** @type {?} */
    MtxSelectComponent.prototype.notFoundText;
    /** @type {?} */
    MtxSelectComponent.prototype.searchable;
    /** @type {?} */
    MtxSelectComponent.prototype.readonly;
    /** @type {?} */
    MtxSelectComponent.prototype.searchFn;
    /** @type {?} */
    MtxSelectComponent.prototype.searchWhileComposing;
    /** @type {?} */
    MtxSelectComponent.prototype.clearSearchOnAdd;
    /** @type {?} */
    MtxSelectComponent.prototype.selectOnTab;
    /** @type {?} */
    MtxSelectComponent.prototype.trackByFn;
    /** @type {?} */
    MtxSelectComponent.prototype.inputAttrs;
    /** @type {?} */
    MtxSelectComponent.prototype.tabIndex;
    /** @type {?} */
    MtxSelectComponent.prototype.openOnEnter;
    /** @type {?} */
    MtxSelectComponent.prototype.minTermLength;
    /** @type {?} */
    MtxSelectComponent.prototype.keyDownFn;
    /** @type {?} */
    MtxSelectComponent.prototype.virtualScroll;
    /** @type {?} */
    MtxSelectComponent.prototype.typeToSearchText;
    /** @type {?} */
    MtxSelectComponent.prototype.typeahead;
    /** @type {?} */
    MtxSelectComponent.prototype.blur;
    /** @type {?} */
    MtxSelectComponent.prototype.focus;
    /** @type {?} */
    MtxSelectComponent.prototype.change;
    /** @type {?} */
    MtxSelectComponent.prototype.open;
    /** @type {?} */
    MtxSelectComponent.prototype.close;
    /** @type {?} */
    MtxSelectComponent.prototype.search;
    /** @type {?} */
    MtxSelectComponent.prototype.clear;
    /** @type {?} */
    MtxSelectComponent.prototype.add;
    /** @type {?} */
    MtxSelectComponent.prototype.remove;
    /** @type {?} */
    MtxSelectComponent.prototype.scroll;
    /** @type {?} */
    MtxSelectComponent.prototype.scrollToEnd;
    /**
     * @type {?}
     * @private
     */
    MtxSelectComponent.prototype._items;
    /**
     * @type {?}
     * @private
     */
    MtxSelectComponent.prototype._itemsAreUsed;
    /**
     * @type {?}
     * @private
     */
    MtxSelectComponent.prototype._destroy$;
    /**
     * @type {?}
     * @private
     */
    MtxSelectComponent.prototype._value;
    /**
     * Implemented as part of MatFormFieldControl.
     * @type {?}
     */
    MtxSelectComponent.prototype.stateChanges;
    /**
     * @type {?}
     * @private
     */
    MtxSelectComponent.prototype._id;
    /**
     * Unique id for this input.
     * @type {?}
     * @private
     */
    MtxSelectComponent.prototype._uid;
    /**
     * @type {?}
     * @private
     */
    MtxSelectComponent.prototype._placeholder;
    /**
     * @type {?}
     * @private
     */
    MtxSelectComponent.prototype._focused;
    /**
     * @type {?}
     * @private
     */
    MtxSelectComponent.prototype._required;
    /**
     * @type {?}
     * @private
     */
    MtxSelectComponent.prototype._disabled;
    /** @type {?} */
    MtxSelectComponent.prototype.errorState;
    /**
     * A name for this control that can be used by `mat-form-field`.
     * @type {?}
     */
    MtxSelectComponent.prototype.controlType;
    /**
     * The aria-describedby attribute on the select for improved a11y.
     * @type {?}
     */
    MtxSelectComponent.prototype._ariaDescribedby;
    /**
     * `View -> model callback called when value changes`
     * @type {?}
     */
    MtxSelectComponent.prototype._onChange;
    /**
     * `View -> model callback called when select has been touched`
     * @type {?}
     */
    MtxSelectComponent.prototype._onTouched;
    /**
     * @type {?}
     * @private
     */
    MtxSelectComponent.prototype._focusMonitor;
    /**
     * @type {?}
     * @private
     */
    MtxSelectComponent.prototype._elementRef;
    /**
     * @type {?}
     * @private
     */
    MtxSelectComponent.prototype._changeDetectorRef;
    /** @type {?} */
    MtxSelectComponent.prototype.ngControl;
}

/**
 * @fileoverview added by tsickle
 * Generated from: select.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class MtxSelectModule {
}
MtxSelectModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MtxSelectModule });
MtxSelectModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MtxSelectModule_Factory(t) { return new (t || MtxSelectModule)(); }, imports: [[CommonModule, FormsModule, ReactiveFormsModule, NgSelectModule]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MtxSelectModule, { declarations: function () { return [MtxSelectComponent,
        MtxOptionComponent,
        MtxSelectOptgroupTemplateDirective,
        MtxSelectOptionTemplateDirective,
        MtxSelectLabelTemplateDirective,
        MtxSelectMultiLabelTemplateDirective,
        MtxSelectHeaderTemplateDirective,
        MtxSelectFooterTemplateDirective,
        MtxSelectNotFoundTemplateDirective,
        MtxSelectTypeToSearchTemplateDirective,
        MtxSelectLoadingTextTemplateDirective,
        MtxSelectTagTemplateDirective,
        MtxSelectLoadingSpinnerTemplateDirective]; }, imports: function () { return [CommonModule, FormsModule, ReactiveFormsModule, NgSelectModule]; }, exports: function () { return [MtxSelectComponent,
        MtxOptionComponent,
        MtxSelectOptgroupTemplateDirective,
        MtxSelectOptionTemplateDirective,
        MtxSelectLabelTemplateDirective,
        MtxSelectMultiLabelTemplateDirective,
        MtxSelectHeaderTemplateDirective,
        MtxSelectFooterTemplateDirective,
        MtxSelectNotFoundTemplateDirective,
        MtxSelectTypeToSearchTemplateDirective,
        MtxSelectLoadingTextTemplateDirective,
        MtxSelectTagTemplateDirective,
        MtxSelectLoadingSpinnerTemplateDirective]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MtxSelectModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule, FormsModule, ReactiveFormsModule, NgSelectModule],
                exports: [
                    MtxSelectComponent,
                    MtxOptionComponent,
                    MtxSelectOptgroupTemplateDirective,
                    MtxSelectOptionTemplateDirective,
                    MtxSelectLabelTemplateDirective,
                    MtxSelectMultiLabelTemplateDirective,
                    MtxSelectHeaderTemplateDirective,
                    MtxSelectFooterTemplateDirective,
                    MtxSelectNotFoundTemplateDirective,
                    MtxSelectTypeToSearchTemplateDirective,
                    MtxSelectLoadingTextTemplateDirective,
                    MtxSelectTagTemplateDirective,
                    MtxSelectLoadingSpinnerTemplateDirective,
                ],
                declarations: [
                    MtxSelectComponent,
                    MtxOptionComponent,
                    MtxSelectOptgroupTemplateDirective,
                    MtxSelectOptionTemplateDirective,
                    MtxSelectLabelTemplateDirective,
                    MtxSelectMultiLabelTemplateDirective,
                    MtxSelectHeaderTemplateDirective,
                    MtxSelectFooterTemplateDirective,
                    MtxSelectNotFoundTemplateDirective,
                    MtxSelectTypeToSearchTemplateDirective,
                    MtxSelectLoadingTextTemplateDirective,
                    MtxSelectTagTemplateDirective,
                    MtxSelectLoadingSpinnerTemplateDirective,
                ]
            }]
    }], null, null); })();

/**
 * @fileoverview added by tsickle
 * Generated from: public-api.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: mtxSelect.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { MtxSelectComponent, MtxSelectModule, MtxSelectOptionTemplateDirective as ɵa, MtxSelectOptgroupTemplateDirective as ɵb, MtxSelectLabelTemplateDirective as ɵc, MtxSelectMultiLabelTemplateDirective as ɵd, MtxSelectHeaderTemplateDirective as ɵe, MtxSelectFooterTemplateDirective as ɵf, MtxSelectNotFoundTemplateDirective as ɵg, MtxSelectTypeToSearchTemplateDirective as ɵh, MtxSelectLoadingTextTemplateDirective as ɵi, MtxSelectTagTemplateDirective as ɵj, MtxSelectLoadingSpinnerTemplateDirective as ɵk, MtxOptionComponent as ɵl };

//# sourceMappingURL=mtxSelect.js.map