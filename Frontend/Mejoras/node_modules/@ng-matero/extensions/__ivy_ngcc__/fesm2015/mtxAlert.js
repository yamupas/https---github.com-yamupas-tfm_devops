import { EventEmitter, Component, ViewEncapsulation, ChangeDetectionStrategy, ChangeDetectorRef, Input, Output, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';

/**
 * @fileoverview added by tsickle
 * Generated from: alert.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';

function MtxAlertComponent_ng_template_0_ng_template_2_Template(rf, ctx) { if (rf & 1) {
    const _r3 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 2);
    ɵngcc0.ɵɵlistener("click", function MtxAlertComponent_ng_template_0_ng_template_2_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r3); const ctx_r2 = ɵngcc0.ɵɵnextContext(2); return ctx_r2._onClosed(); });
    ɵngcc0.ɵɵelementStart(1, "span", 3);
    ɵngcc0.ɵɵtext(2, "\u00D7");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} }
const _c0 = function (a1, a2, a3) { return ["mtx-alert-ref", a1, a2, a3]; };
function MtxAlertComponent_ng_template_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 1);
    ɵngcc0.ɵɵprojection(1);
    ɵngcc0.ɵɵtemplate(2, MtxAlertComponent_ng_template_0_ng_template_2_Template, 3, 0, "ng-template", 0);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction3(2, _c0, "mtx-alert-" + ctx_r0.type, "mat-elevation-z" + ctx_r0.elevation, ctx_r0.dismissible ? "mtx-alert-dismissible" : ""));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.dismissible);
} }
const _c1 = ["*"];
class MtxAlertComponent {
    /**
     * @param {?} _changeDetectorRef
     */
    constructor(_changeDetectorRef) {
        this._changeDetectorRef = _changeDetectorRef;
        /**
         * Alert types
         * `default`, `info`, `success`, `warning` and `danger`
         */
        this.type = 'default';
        /**
         * Whether alert visible
         */
        this.isOpen = true;
        /**
         * Material elevation
         */
        this.elevation = 0;
        /**
         * This event fires when alert closed, $event is an instance of Alert component
         */
        this.closed = new EventEmitter();
    }
    /**
     * @return {?}
     */
    _onClosed() {
        this.isOpen = false;
        this._changeDetectorRef.markForCheck();
        this.closed.emit(this);
    }
}
MtxAlertComponent.ɵfac = function MtxAlertComponent_Factory(t) { return new (t || MtxAlertComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };
MtxAlertComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MtxAlertComponent, selectors: [["mtx-alert"]], hostAttrs: [1, "mtx-alert"], inputs: { type: "type", isOpen: "isOpen", elevation: "elevation", dismissible: "dismissible", color: "color" }, outputs: { closed: "closed" }, exportAs: ["mtxAlert"], ngContentSelectors: _c1, decls: 1, vars: 1, consts: [[3, "ngIf"], ["role", "alert", 3, "ngClass"], ["type", "button", "aria-label", "Close", 1, "mtx-alert-close", 3, "click"], ["aria-hidden", "true"]], template: function MtxAlertComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵtemplate(0, MtxAlertComponent_ng_template_0_Template, 3, 6, "ng-template", 0);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngIf", ctx.isOpen);
    } }, directives: [ɵngcc1.NgIf, ɵngcc1.NgClass], styles: [".mtx-alert-ref{position:relative;padding:.75rem 1.25rem;margin-bottom:1rem;border:1px solid transparent;border-radius:.25rem}.mtx-alert-close{position:absolute;top:0;bottom:0;right:0;padding:0 1.25rem;font-size:1.5rem;line-height:1;color:inherit;opacity:.5;background-color:transparent;border:0;cursor:pointer}[dir=rtl] .mtx-alert-close{right:unset;left:0}.mtx-alert-close:hover{opacity:.75}.mtx-alert-dismissible{padding-right:4rem}.mtx-alert-success{background-color:#4caf50;border-color:#4caf50;color:#fff}.mtx-alert-info{background-color:#2196f3;border-color:#2196f3;color:#fff}.mtx-alert-warning{background-color:#fb8c00;border-color:#fb8c00;color:#fff}.mtx-alert-danger{background-color:#ff5252;border-color:#ff5252;color:#fff}"], encapsulation: 2, changeDetection: 0 });
/** @nocollapse */
MtxAlertComponent.ctorParameters = () => [
    { type: ChangeDetectorRef }
];
MtxAlertComponent.propDecorators = {
    type: [{ type: Input }],
    isOpen: [{ type: Input }],
    dismissible: [{ type: Input }],
    color: [{ type: Input }],
    elevation: [{ type: Input }],
    closed: [{ type: Output }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MtxAlertComponent, [{
        type: Component,
        args: [{
                selector: 'mtx-alert',
                exportAs: 'mtxAlert',
                host: {
                    class: 'mtx-alert'
                },
                template: "<ng-template [ngIf]=\"isOpen\">\n  <div [ngClass]=\"['mtx-alert-ref',\n                   'mtx-alert-' + type,\n                   'mat-elevation-z' + elevation,\n                    dismissible ? 'mtx-alert-dismissible' : '']\"\n       role=\"alert\">\n    <ng-content></ng-content>\n    <ng-template [ngIf]=\"dismissible\">\n      <button type=\"button\" class=\"mtx-alert-close\" aria-label=\"Close\" (click)=\"_onClosed()\">\n        <span aria-hidden=\"true\">&times;</span>\n      </button>\n    </ng-template>\n  </div>\n</ng-template>\n",
                encapsulation: ViewEncapsulation.None,
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [".mtx-alert-ref{position:relative;padding:.75rem 1.25rem;margin-bottom:1rem;border:1px solid transparent;border-radius:.25rem}.mtx-alert-close{position:absolute;top:0;bottom:0;right:0;padding:0 1.25rem;font-size:1.5rem;line-height:1;color:inherit;opacity:.5;background-color:transparent;border:0;cursor:pointer}[dir=rtl] .mtx-alert-close{right:unset;left:0}.mtx-alert-close:hover{opacity:.75}.mtx-alert-dismissible{padding-right:4rem}.mtx-alert-success{background-color:#4caf50;border-color:#4caf50;color:#fff}.mtx-alert-info{background-color:#2196f3;border-color:#2196f3;color:#fff}.mtx-alert-warning{background-color:#fb8c00;border-color:#fb8c00;color:#fff}.mtx-alert-danger{background-color:#ff5252;border-color:#ff5252;color:#fff}"]
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }]; }, { type: [{
            type: Input
        }], isOpen: [{
            type: Input
        }], elevation: [{
            type: Input
        }], closed: [{
            type: Output
        }], dismissible: [{
            type: Input
        }], color: [{
            type: Input
        }] }); })();
if (false) {
    /**
     * Alert types
     * `default`, `info`, `success`, `warning` and `danger`
     * @type {?}
     */
    MtxAlertComponent.prototype.type;
    /**
     * Whether alert visible
     * @type {?}
     */
    MtxAlertComponent.prototype.isOpen;
    /**
     * Whether displays an inline "Close" button
     * @type {?}
     */
    MtxAlertComponent.prototype.dismissible;
    /**
     * Text color
     * @type {?}
     */
    MtxAlertComponent.prototype.color;
    /**
     * Material elevation
     * @type {?}
     */
    MtxAlertComponent.prototype.elevation;
    /**
     * This event fires when alert closed, $event is an instance of Alert component
     * @type {?}
     */
    MtxAlertComponent.prototype.closed;
    /**
     * @type {?}
     * @private
     */
    MtxAlertComponent.prototype._changeDetectorRef;
}

/**
 * @fileoverview added by tsickle
 * Generated from: alert.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class MtxAlertModule {
}
MtxAlertModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MtxAlertModule });
MtxAlertModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MtxAlertModule_Factory(t) { return new (t || MtxAlertModule)(); }, imports: [[CommonModule]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MtxAlertModule, { declarations: function () { return [MtxAlertComponent]; }, imports: function () { return [CommonModule]; }, exports: function () { return [MtxAlertComponent]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MtxAlertModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule],
                exports: [MtxAlertComponent],
                declarations: [MtxAlertComponent]
            }]
    }], null, null); })();

/**
 * @fileoverview added by tsickle
 * Generated from: public-api.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: mtxAlert.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { MtxAlertComponent, MtxAlertModule };

//# sourceMappingURL=mtxAlert.js.map