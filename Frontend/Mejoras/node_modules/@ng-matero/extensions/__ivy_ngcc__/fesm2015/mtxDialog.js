import { Component, ViewEncapsulation, ChangeDetectionStrategy, Inject, Injectable, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { MatDialogRef, MAT_DIALOG_DATA, MatDialog, MatDialogModule } from '@angular/material/dialog';
import { MatButtonModule } from '@angular/material/button';

/**
 * @fileoverview added by tsickle
 * Generated from: dialog.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/material/dialog';
import * as ɵngcc2 from '@angular/common';
import * as ɵngcc3 from '@angular/material/button';

function MtxDialogComponent_h1_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "h1", 4);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r0.data.title);
} }
function MtxDialogComponent_div_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 5);
    ɵngcc0.ɵɵelementStart(1, "p");
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ctx_r1.data.description);
} }
function MtxDialogComponent_button_3_Template(rf, ctx) { if (rf & 1) {
    const _r5 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 6);
    ɵngcc0.ɵɵlistener("click", function MtxDialogComponent_button_3_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r5); const btn_r3 = ctx.$implicit; const ctx_r4 = ɵngcc0.ɵɵnextContext(); return ctx_r4._onClick(btn_r3.onClick); });
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const btn_r3 = ctx.$implicit;
    ɵngcc0.ɵɵproperty("color", btn_r3.type);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", btn_r3.text, " ");
} }
class MtxDialogComponent {
    /**
     * @param {?} dialogRef
     * @param {?} data
     */
    constructor(dialogRef, data) {
        this.dialogRef = dialogRef;
        this.data = data;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    _onClick(fn) {
        fn.call(this);
        this._onClose();
    }
    /**
     * @return {?}
     */
    _onClose() {
        this.dialogRef.close();
    }
}
MtxDialogComponent.ɵfac = function MtxDialogComponent_Factory(t) { return new (t || MtxDialogComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.MatDialogRef), ɵngcc0.ɵɵdirectiveInject(MAT_DIALOG_DATA)); };
MtxDialogComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MtxDialogComponent, selectors: [["mtx-dialog"]], exportAs: ["mtxDialog"], decls: 4, vars: 3, consts: [["class", "mtx-dialog-title", 4, "ngIf"], ["class", "mtx-dialog-content", 4, "ngIf"], [1, "mtx-dialog-actions"], ["mat-button", "", 3, "color", "click", 4, "ngFor", "ngForOf"], [1, "mtx-dialog-title"], [1, "mtx-dialog-content"], ["mat-button", "", 3, "color", "click"]], template: function MtxDialogComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, MtxDialogComponent_h1_0_Template, 2, 1, "h1", 0);
        ɵngcc0.ɵɵtemplate(1, MtxDialogComponent_div_1_Template, 3, 1, "div", 1);
        ɵngcc0.ɵɵelementStart(2, "div", 2);
        ɵngcc0.ɵɵtemplate(3, MtxDialogComponent_button_3_Template, 2, 2, "button", 3);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngIf", ctx.data.title);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.data.description);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.data.buttons);
    } }, directives: [ɵngcc2.NgIf, ɵngcc2.NgForOf, ɵngcc3.MatButton], styles: [".mtx-dialog-title{display:block;margin:0 0 20px;font:500 20px/32px Roboto,Helvetica Neue,sans-serif;letter-spacing:normal}.mtx-dialog-content{display:block;max-height:65vh;padding:0 24px;margin:0 -24px;overflow:auto;-webkit-overflow-scrolling:touch}.mtx-dialog-actions{display:flex;flex-wrap:wrap;align-items:center;justify-content:flex-end;min-height:52px;padding:8px 0;margin-bottom:-24px}"], encapsulation: 2, changeDetection: 0 });
/** @nocollapse */
MtxDialogComponent.ctorParameters = () => [
    { type: MatDialogRef },
    { type: undefined, decorators: [{ type: Inject, args: [MAT_DIALOG_DATA,] }] }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MtxDialogComponent, [{
        type: Component,
        args: [{
                selector: 'mtx-dialog',
                exportAs: 'mtxDialog',
                template: "<h1 class=\"mtx-dialog-title\" *ngIf=\"data.title\">{{data.title}}</h1>\n<div class=\"mtx-dialog-content\" *ngIf=\"data.description\">\n  <p>{{data.description}}</p>\n</div>\n<div class=\"mtx-dialog-actions\">\n  <button *ngFor=\"let btn of data.buttons\"\n          mat-button\n          [color]=\"btn.type\"\n          (click)=\"_onClick(btn.onClick)\">\n    {{btn.text}}\n  </button>\n</div>\n",
                encapsulation: ViewEncapsulation.None,
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [".mtx-dialog-title{display:block;margin:0 0 20px;font:500 20px/32px Roboto,Helvetica Neue,sans-serif;letter-spacing:normal}.mtx-dialog-content{display:block;max-height:65vh;padding:0 24px;margin:0 -24px;overflow:auto;-webkit-overflow-scrolling:touch}.mtx-dialog-actions{display:flex;flex-wrap:wrap;align-items:center;justify-content:flex-end;min-height:52px;padding:8px 0;margin-bottom:-24px}"]
            }]
    }], function () { return [{ type: ɵngcc1.MatDialogRef }, { type: undefined, decorators: [{
                type: Inject,
                args: [MAT_DIALOG_DATA]
            }] }]; }, null); })();
if (false) {
    /** @type {?} */
    MtxDialogComponent.prototype.dialogRef;
    /** @type {?} */
    MtxDialogComponent.prototype.data;
}

/**
 * @fileoverview added by tsickle
 * Generated from: dialog.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
const ɵ0 = /**
 * @return {?}
 */
() => { }, ɵ1 = /**
 * @return {?}
 */
() => { };
/** @type {?} */
const defaults = {
    title: '',
    description: '',
    buttons: [
        {
            type: '',
            text: 'CLOSE',
            onClick: (ɵ0),
        },
        {
            type: 'warn',
            text: 'OK',
            onClick: (ɵ1),
        },
    ],
    width: '300px',
};
class MtxDialog {
    /**
     * @param {?} dialog
     */
    constructor(dialog) {
        this.dialog = dialog;
    }
    /**
     * @param {?=} componentOrTemplateRef
     * @param {?=} config
     * @return {?}
     */
    originalOpen(componentOrTemplateRef = MtxDialogComponent, config) {
        return this.dialog.open(componentOrTemplateRef, config);
    }
    /**
     * @param {?} config
     * @param {?=} componentOrTemplateRef
     * @return {?}
     */
    open(config, componentOrTemplateRef = MtxDialogComponent) {
        /** @type {?} */
        const data = Object.assign({}, defaults, config);
        return this.dialog.open(componentOrTemplateRef, Object.assign(Object.assign({}, data), { data }));
    }
    /**
     * @param {?} title
     * @param {?=} onOk
     * @return {?}
     */
    alert(title, onOk = (/**
     * @return {?}
     */
    () => { })) {
        this.open({
            title,
            buttons: [
                {
                    type: 'warn',
                    text: 'OK',
                    onClick: (/**
                     * @return {?}
                     */
                    () => onOk()),
                },
            ],
            disableClose: true,
        });
    }
    /**
     * @param {?} title
     * @param {?=} onOk
     * @param {?=} onClose
     * @return {?}
     */
    confirm(title, onOk = (/**
     * @return {?}
     */
    () => { }), onClose = (/**
     * @return {?}
     */
    () => { })) {
        this.open({
            title,
            buttons: [
                {
                    type: '',
                    text: 'CLOSE',
                    onClick: (/**
                     * @return {?}
                     */
                    () => onClose()),
                },
                {
                    type: 'warn',
                    text: 'OK',
                    onClick: (/**
                     * @return {?}
                     */
                    () => onOk()),
                },
            ],
            disableClose: true,
        });
    }
}
MtxDialog.ɵfac = function MtxDialog_Factory(t) { return new (t || MtxDialog)(ɵngcc0.ɵɵinject(ɵngcc1.MatDialog)); };
MtxDialog.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: MtxDialog, factory: MtxDialog.ɵfac });
/** @nocollapse */
MtxDialog.ctorParameters = () => [
    { type: MatDialog }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MtxDialog, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc1.MatDialog }]; }, null); })();
if (false) {
    /** @type {?} */
    MtxDialog.prototype.dialog;
}

/**
 * @fileoverview added by tsickle
 * Generated from: dialog.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class MtxDialogModule {
}
MtxDialogModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MtxDialogModule });
MtxDialogModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MtxDialogModule_Factory(t) { return new (t || MtxDialogModule)(); }, providers: [MtxDialog], imports: [[CommonModule, MatButtonModule, MatDialogModule]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MtxDialogModule, { declarations: function () { return [MtxDialogComponent]; }, imports: function () { return [CommonModule, MatButtonModule, MatDialogModule]; }, exports: function () { return [MtxDialogComponent]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MtxDialogModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule, MatButtonModule, MatDialogModule],
                exports: [MtxDialogComponent],
                declarations: [MtxDialogComponent],
                providers: [MtxDialog],
                entryComponents: [MtxDialogComponent]
            }]
    }], null, null); })();

/**
 * @fileoverview added by tsickle
 * Generated from: dialog.config.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @record
 */
function MtxDialogData() { }
if (false) {
    /** @type {?|undefined} */
    MtxDialogData.prototype.title;
    /** @type {?|undefined} */
    MtxDialogData.prototype.description;
    /** @type {?|undefined} */
    MtxDialogData.prototype.buttons;
}
/**
 * @record
 */
function MtxDialogBtns() { }
if (false) {
    /** @type {?|undefined} */
    MtxDialogBtns.prototype.type;
    /** @type {?} */
    MtxDialogBtns.prototype.text;
    /** @type {?} */
    MtxDialogBtns.prototype.onClick;
}

/**
 * @fileoverview added by tsickle
 * Generated from: public-api.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: mtxDialog.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { MtxDialog, MtxDialogComponent, MtxDialogModule };

//# sourceMappingURL=mtxDialog.js.map