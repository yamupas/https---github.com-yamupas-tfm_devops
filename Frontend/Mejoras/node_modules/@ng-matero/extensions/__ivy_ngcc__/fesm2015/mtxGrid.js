import { Injectable, EventEmitter, TemplateRef, Component, ViewEncapsulation, ChangeDetectionStrategy, ViewChild, Input, Output, Directive, HostBinding, HostListener, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { MatTableDataSource, MatTableModule } from '@angular/material/table';
import { MatSort, MatSortModule } from '@angular/material/sort';
import { MatPaginator, MatPaginatorModule } from '@angular/material/paginator';
import { MatCheckboxModule } from '@angular/material/checkbox';
import { MatButtonModule } from '@angular/material/button';
import { MatProgressBarModule } from '@angular/material/progress-bar';
import { MatChipsModule } from '@angular/material/chips';
import { MatTooltipModule } from '@angular/material/tooltip';
import { MatIconModule } from '@angular/material/icon';
import { MatSelectModule } from '@angular/material/select';
import { MatFormFieldModule } from '@angular/material/form-field';
import { MatMenuModule } from '@angular/material/menu';
import { moveItemInArray, DragDropModule } from '@angular/cdk/drag-drop';
import { MtxDialog, MtxDialogModule } from '@ng-matero/extensions/dialog';
import { trigger, state, style, transition, animate } from '@angular/animations';
import { SelectionModel } from '@angular/cdk/collections';
import PhotoViewer from 'photoviewer';

/**
 * @fileoverview added by tsickle
 * Generated from: grid.interface.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Tag
 * @record
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';
import * as ɵngcc2 from '@angular/material/table';
import * as ɵngcc3 from '@angular/material/sort';
import * as ɵngcc4 from '@angular/material/paginator';
import * as ɵngcc5 from '@angular/material/progress-bar';
import * as ɵngcc6 from '@angular/material/checkbox';
import * as ɵngcc7 from '@angular/material/icon';
import * as ɵngcc8 from '@angular/material/button';
import * as ɵngcc9 from '@ng-matero/extensions/dialog';
import * as ɵngcc10 from '@angular/material/chips';
import * as ɵngcc11 from '@angular/material/tooltip';
import * as ɵngcc12 from '@angular/material/menu';
import * as ɵngcc13 from '@angular/cdk/drag-drop';
import * as ɵngcc14 from '@angular/forms';

function MtxGridComponent_mat_progress_bar_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "mat-progress-bar", 13);
} }
function MtxGridComponent_div_1_div_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 20);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r10 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r10.toolbarTitle);
} }
function MtxGridComponent_div_1_ng_template_3_ng_template_0_Template(rf, ctx) { }
function MtxGridComponent_div_1_ng_template_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, MtxGridComponent_div_1_ng_template_3_ng_template_0_Template, 0, 0, "ng-template", 21);
} if (rf & 2) {
    const ctx_r11 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx_r11.toolbarTemplate);
} }
function MtxGridComponent_div_1_mtx_grid_column_menu_5_Template(rf, ctx) { if (rf & 1) {
    const _r15 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "mtx-grid-column-menu", 22);
    ɵngcc0.ɵɵlistener("selectionChange", function MtxGridComponent_div_1_mtx_grid_column_menu_5_Template_mtx_grid_column_menu_selectionChange_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r15); const ctx_r14 = ɵngcc0.ɵɵnextContext(2); return ctx_r14._handleColumnHidingChange($event); })("sortChange", function MtxGridComponent_div_1_mtx_grid_column_menu_5_Template_mtx_grid_column_menu_sortChange_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r15); const ctx_r16 = ɵngcc0.ɵɵnextContext(2); return ctx_r16._handleColumnMovingChange($event); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r12 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("columns", ctx_r12.columnMenuData)("buttonText", ctx_r12.columnMenuButtonText)("buttonType", ctx_r12.columnMenuButtonType)("buttonColor", ctx_r12.columnMenuButtonColor)("buttonClass", ctx_r12.columnMenuButtonClass)("buttonIcon", ctx_r12.columnMenuButtonIcon)("selectable", ctx_r12.columnHideable)("selectedType", ctx_r12.columnHidingChecked)("sortable", ctx_r12.columnMovable);
} }
function MtxGridComponent_div_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 14);
    ɵngcc0.ɵɵtemplate(1, MtxGridComponent_div_1_div_1_Template, 2, 1, "div", 15);
    ɵngcc0.ɵɵelementStart(2, "div", 16);
    ɵngcc0.ɵɵtemplate(3, MtxGridComponent_div_1_ng_template_3_Template, 1, 1, "ng-template", 17);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(4, "div", 18);
    ɵngcc0.ɵɵtemplate(5, MtxGridComponent_div_1_mtx_grid_column_menu_5_Template, 1, 9, "mtx-grid-column-menu", 19);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r1.toolbarTitle);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r1.toolbarTemplate);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r1.showColumnMenuButton);
} }
function MtxGridComponent_ng_container_5_th_1_mat_checkbox_1_Template(rf, ctx) { if (rf & 1) {
    const _r22 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "mat-checkbox", 29);
    ɵngcc0.ɵɵlistener("change", function MtxGridComponent_ng_container_5_th_1_mat_checkbox_1_Template_mat_checkbox_change_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r22); const ctx_r21 = ɵngcc0.ɵɵnextContext(3); return $event ? ctx_r21._toggleMasterCheckbox() : null; });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r20 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵproperty("checked", ctx_r20.rowSelection.hasValue() && ctx_r20._isAllSelected())("indeterminate", ctx_r20.rowSelection.hasValue() && !ctx_r20._isAllSelected());
} }
function MtxGridComponent_ng_container_5_th_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "th", 27);
    ɵngcc0.ɵɵtemplate(1, MtxGridComponent_ng_container_5_th_1_mat_checkbox_1_Template, 1, 2, "mat-checkbox", 28);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r17 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r17.multiSelectable);
} }
function MtxGridComponent_ng_container_5_td_2_mat_checkbox_1_Template(rf, ctx) { if (rf & 1) {
    const _r26 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "mat-checkbox", 32);
    ɵngcc0.ɵɵlistener("click", function MtxGridComponent_ng_container_5_td_2_mat_checkbox_1_Template_mat_checkbox_click_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r26); return $event.stopPropagation(); })("change", function MtxGridComponent_ng_container_5_td_2_mat_checkbox_1_Template_mat_checkbox_change_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r26); const row_r23 = ɵngcc0.ɵɵnextContext().$implicit; const ctx_r27 = ɵngcc0.ɵɵnextContext(2); return $event ? ctx_r27._toggleNormalCheckbox(row_r23) : null; });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const row_r23 = ɵngcc0.ɵɵnextContext().$implicit;
    const ctx_r24 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("disabled", ctx_r24.rowSelectionFormatter.disabled && ctx_r24.rowSelectionFormatter.disabled(row_r23))("checked", ctx_r24.rowSelection.isSelected(row_r23));
} }
function MtxGridComponent_ng_container_5_td_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "td", 30);
    ɵngcc0.ɵɵtemplate(1, MtxGridComponent_ng_container_5_td_2_mat_checkbox_1_Template, 1, 2, "mat-checkbox", 31);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const row_r23 = ctx.$implicit;
    const ctx_r18 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !(ctx_r18.rowSelectionFormatter.hideCheckbox && ctx_r18.rowSelectionFormatter.hideCheckbox(row_r23)));
} }
function MtxGridComponent_ng_container_5_td_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "td", 33);
} }
function MtxGridComponent_ng_container_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0, 23);
    ɵngcc0.ɵɵtemplate(1, MtxGridComponent_ng_container_5_th_1_Template, 2, 1, "th", 24);
    ɵngcc0.ɵɵtemplate(2, MtxGridComponent_ng_container_5_td_2_Template, 2, 1, "td", 25);
    ɵngcc0.ɵɵtemplate(3, MtxGridComponent_ng_container_5_td_3_Template, 1, 0, "td", 26);
    ɵngcc0.ɵɵelementContainerEnd();
} }
function MtxGridComponent_ng_container_6_th_2_ng_template_2_ng_template_0_Template(rf, ctx) { }
const _c0 = function (a0, a1) { return { $implicit: a0, colDef: a1 }; };
function MtxGridComponent_ng_container_6_th_2_ng_template_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, MtxGridComponent_ng_container_6_th_2_ng_template_2_ng_template_0_Template, 0, 0, "ng-template", 43);
} if (rf & 2) {
    const col_r30 = ɵngcc0.ɵɵnextContext(2).$implicit;
    const ctx_r34 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx_r34.headerTemplate)("ngTemplateOutletContext", ɵngcc0.ɵɵpureFunction2(2, _c0, col_r30, col_r30));
} }
function MtxGridComponent_ng_container_6_th_2_ng_template_3_ng_template_0_ng_template_0_Template(rf, ctx) { }
function MtxGridComponent_ng_container_6_th_2_ng_template_3_ng_template_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, MtxGridComponent_ng_container_6_th_2_ng_template_3_ng_template_0_ng_template_0_Template, 0, 0, "ng-template", 43);
} if (rf & 2) {
    const col_r30 = ɵngcc0.ɵɵnextContext(3).$implicit;
    const ctx_r41 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx_r41.headerTemplate[col_r30.field])("ngTemplateOutletContext", ɵngcc0.ɵɵpureFunction2(2, _c0, col_r30, col_r30));
} }
function MtxGridComponent_ng_container_6_th_2_ng_template_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, MtxGridComponent_ng_container_6_th_2_ng_template_3_ng_template_0_Template, 1, 5, "ng-template", 40);
} if (rf & 2) {
    ɵngcc0.ɵɵnextContext();
    const _r37 = ɵngcc0.ɵɵreference(6);
    const col_r30 = ɵngcc0.ɵɵnextContext().$implicit;
    const ctx_r36 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngIf", ctx_r36.headerTemplate && ctx_r36._isTemplateRef(ctx_r36.headerTemplate[col_r30.field]))("ngIfElse", _r37);
} }
function MtxGridComponent_ng_container_6_th_2_ng_template_5_span_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "span", 47);
} }
function MtxGridComponent_ng_container_6_th_2_ng_template_5_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-icon", 48);
    ɵngcc0.ɵɵtext(1, "sort");
    ɵngcc0.ɵɵelementEnd();
} }
function MtxGridComponent_ng_container_6_th_2_ng_template_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 44);
    ɵngcc0.ɵɵtemplate(1, MtxGridComponent_ng_container_6_th_2_ng_template_5_span_1_Template, 1, 0, "span", 45);
    ɵngcc0.ɵɵelementStart(2, "span");
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(4, MtxGridComponent_ng_container_6_th_2_ng_template_5_mat_icon_4_Template, 2, 0, "mat-icon", 46);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const col_r30 = ɵngcc0.ɵɵnextContext(2).$implicit;
    ɵngcc0.ɵɵproperty("disabled", !col_r30.sortable);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", col_r30.showExpand);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(col_r30.header);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", col_r30.sortable);
} }
const _c1 = function (a0, a1) { return { "mat-table-sticky-left": a0, "mat-table-sticky-right": a1 }; };
const _c2 = function (a0, a1, a2, a3) { return { "width": a0, "min-width": a1, "left": a2, "right": a3 }; };
function MtxGridComponent_ng_container_6_th_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "th", 38);
    ɵngcc0.ɵɵelementStart(1, "div", 39);
    ɵngcc0.ɵɵtemplate(2, MtxGridComponent_ng_container_6_th_2_ng_template_2_Template, 1, 5, "ng-template", 40);
    ɵngcc0.ɵɵtemplate(3, MtxGridComponent_ng_container_6_th_2_ng_template_3_Template, 1, 2, "ng-template", null, 41, ɵngcc0.ɵɵtemplateRefExtractor);
    ɵngcc0.ɵɵtemplate(5, MtxGridComponent_ng_container_6_th_2_ng_template_5_Template, 5, 4, "ng-template", null, 42, ɵngcc0.ɵɵtemplateRefExtractor);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const _r35 = ɵngcc0.ɵɵreference(4);
    const col_r30 = ɵngcc0.ɵɵnextContext().$implicit;
    const ctx_r31 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction2(4, _c1, col_r30.pinned === "left", col_r30.pinned === "right"))("ngStyle", ɵngcc0.ɵɵpureFunction4(7, _c2, col_r30.width, col_r30.width, col_r30.left, col_r30.right));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r31._isTemplateRef(ctx_r31.headerTemplate))("ngIfElse", _r35);
} }
function MtxGridComponent_ng_container_6_td_3_ng_template_1_ng_template_0_Template(rf, ctx) { }
const _c3 = function (a0, a1, a2, a3) { return { $implicit: a0, rowData: a1, index: a2, colDef: a3 }; };
function MtxGridComponent_ng_container_6_td_3_ng_template_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, MtxGridComponent_ng_container_6_td_3_ng_template_1_ng_template_0_Template, 0, 0, "ng-template", 43);
} if (rf & 2) {
    const ctx_r60 = ɵngcc0.ɵɵnextContext();
    const row_r49 = ctx_r60.$implicit;
    const index_r50 = ctx_r60.index;
    const dataIndex_r51 = ctx_r60.dataIndex;
    const col_r30 = ɵngcc0.ɵɵnextContext().$implicit;
    const ctx_r52 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx_r52.cellTemplate)("ngTemplateOutletContext", ɵngcc0.ɵɵpureFunction4(2, _c3, row_r49, row_r49, ctx_r52._getIndex(index_r50, dataIndex_r51), col_r30));
} }
function MtxGridComponent_ng_container_6_td_3_ng_template_2_ng_template_0_ng_template_0_Template(rf, ctx) { }
function MtxGridComponent_ng_container_6_td_3_ng_template_2_ng_template_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, MtxGridComponent_ng_container_6_td_3_ng_template_2_ng_template_0_ng_template_0_Template, 0, 0, "ng-template", 43);
} if (rf & 2) {
    const ctx_r65 = ɵngcc0.ɵɵnextContext(2);
    const row_r49 = ctx_r65.$implicit;
    const index_r50 = ctx_r65.index;
    const dataIndex_r51 = ctx_r65.dataIndex;
    const col_r30 = ɵngcc0.ɵɵnextContext().$implicit;
    const ctx_r62 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx_r62.cellTemplate[col_r30.field])("ngTemplateOutletContext", ɵngcc0.ɵɵpureFunction4(2, _c3, row_r49, row_r49, ctx_r62._getIndex(index_r50, dataIndex_r51), col_r30));
} }
function MtxGridComponent_ng_container_6_td_3_ng_template_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, MtxGridComponent_ng_container_6_td_3_ng_template_2_ng_template_0_Template, 1, 7, "ng-template", 40);
} if (rf & 2) {
    ɵngcc0.ɵɵnextContext();
    const _r55 = ɵngcc0.ɵɵreference(5);
    const col_r30 = ɵngcc0.ɵɵnextContext().$implicit;
    const ctx_r54 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngIf", ctx_r54.cellTemplate && ctx_r54._isTemplateRef(ctx_r54.cellTemplate[col_r30.field]))("ngIfElse", _r55);
} }
function MtxGridComponent_ng_container_6_td_3_ng_template_4_ng_template_0_Template(rf, ctx) { }
function MtxGridComponent_ng_container_6_td_3_ng_template_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, MtxGridComponent_ng_container_6_td_3_ng_template_4_ng_template_0_Template, 0, 0, "ng-template", 53);
} if (rf & 2) {
    const ctx_r69 = ɵngcc0.ɵɵnextContext();
    const row_r49 = ctx_r69.$implicit;
    const index_r50 = ctx_r69.index;
    const dataIndex_r51 = ctx_r69.dataIndex;
    const _r57 = ɵngcc0.ɵɵreference(7);
    const col_r30 = ɵngcc0.ɵɵnextContext().$implicit;
    const ctx_r56 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngIf", col_r30.cellTemplate)("ngIfElse", _r57)("ngTemplateOutlet", col_r30.cellTemplate)("ngTemplateOutletContext", ɵngcc0.ɵɵpureFunction4(4, _c3, row_r49, row_r49, ctx_r56._getIndex(index_r50, dataIndex_r51), col_r30));
} }
function MtxGridComponent_ng_container_6_td_3_ng_template_6_button_0_Template(rf, ctx) { if (rf & 1) {
    const _r72 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 56);
    ɵngcc0.ɵɵlistener("toggleChange", function MtxGridComponent_ng_container_6_td_3_ng_template_6_button_0_Template_button_toggleChange_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r72); const ctx_r73 = ɵngcc0.ɵɵnextContext(2); const row_r49 = ctx_r73.$implicit; const dataIndex_r51 = ctx_r73.dataIndex; const col_r30 = ɵngcc0.ɵɵnextContext().$implicit; const ctx_r71 = ɵngcc0.ɵɵnextContext(); return ctx_r71._handleExpansionChange($event, row_r49, col_r30, dataIndex_r51); });
    ɵngcc0.ɵɵelementStart(1, "mat-icon");
    ɵngcc0.ɵɵtext(2, "keyboard_arrow_right");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} }
function MtxGridComponent_ng_container_6_td_3_ng_template_6_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, MtxGridComponent_ng_container_6_td_3_ng_template_6_button_0_Template, 3, 0, "button", 54);
    ɵngcc0.ɵɵelement(1, "mtx-grid-cell", 55);
} if (rf & 2) {
    const row_r49 = ɵngcc0.ɵɵnextContext().$implicit;
    const col_r30 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵproperty("ngIf", col_r30.showExpand);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("rowData", row_r49)("colDef", col_r30);
} }
function MtxGridComponent_ng_container_6_td_3_Template(rf, ctx) { if (rf & 1) {
    const _r78 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "td", 49);
    ɵngcc0.ɵɵlistener("cellSelectionChange", function MtxGridComponent_ng_container_6_td_3_Template_td_cellSelectionChange_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r78); const row_r49 = ctx.$implicit; const col_r30 = ɵngcc0.ɵɵnextContext().$implicit; const ctx_r77 = ɵngcc0.ɵɵnextContext(); return ctx_r77._selectCell($event, row_r49, col_r30); });
    ɵngcc0.ɵɵtemplate(1, MtxGridComponent_ng_container_6_td_3_ng_template_1_Template, 1, 7, "ng-template", 40);
    ɵngcc0.ɵɵtemplate(2, MtxGridComponent_ng_container_6_td_3_ng_template_2_Template, 1, 2, "ng-template", null, 50, ɵngcc0.ɵɵtemplateRefExtractor);
    ɵngcc0.ɵɵtemplate(4, MtxGridComponent_ng_container_6_td_3_ng_template_4_Template, 1, 9, "ng-template", null, 51, ɵngcc0.ɵɵtemplateRefExtractor);
    ɵngcc0.ɵɵtemplate(6, MtxGridComponent_ng_container_6_td_3_ng_template_6_Template, 2, 3, "ng-template", null, 52, ɵngcc0.ɵɵtemplateRefExtractor);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const _r53 = ɵngcc0.ɵɵreference(3);
    const col_r30 = ɵngcc0.ɵɵnextContext().$implicit;
    const ctx_r32 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction2(4, _c1, col_r30.pinned === "left", col_r30.pinned === "right"))("ngStyle", ɵngcc0.ɵɵpureFunction4(7, _c2, col_r30.width, col_r30.width, col_r30.left, col_r30.right));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r32._isTemplateRef(ctx_r32.cellTemplate))("ngIfElse", _r53);
} }
function MtxGridComponent_ng_container_6_td_4_span_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "span", 47);
} }
function MtxGridComponent_ng_container_6_td_4_ng_template_2_ng_template_0_Template(rf, ctx) { }
const _c4 = function (a0, a1, a2) { return { $implicit: a0, colDef: a1, data: a2 }; };
function MtxGridComponent_ng_container_6_td_4_ng_template_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, MtxGridComponent_ng_container_6_td_4_ng_template_2_ng_template_0_Template, 0, 0, "ng-template", 43);
} if (rf & 2) {
    const col_r30 = ɵngcc0.ɵɵnextContext(2).$implicit;
    const ctx_r82 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx_r82.summaryTemplate)("ngTemplateOutletContext", ɵngcc0.ɵɵpureFunction3(2, _c4, col_r30, col_r30, ctx_r82.data));
} }
function MtxGridComponent_ng_container_6_td_4_ng_template_3_ng_template_0_ng_template_0_Template(rf, ctx) { }
const _c5 = function (a0, a1, a2) { return { $implicit: a0, colData: a1, colDef: a2 }; };
function MtxGridComponent_ng_container_6_td_4_ng_template_3_ng_template_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, MtxGridComponent_ng_container_6_td_4_ng_template_3_ng_template_0_ng_template_0_Template, 0, 0, "ng-template", 43);
} if (rf & 2) {
    const col_r30 = ɵngcc0.ɵɵnextContext(3).$implicit;
    const ctx_r89 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx_r89.summaryTemplate[col_r30.field])("ngTemplateOutletContext", ɵngcc0.ɵɵpureFunction3(2, _c5, ctx_r89._getColData(ctx_r89.data, col_r30), ctx_r89._getColData(ctx_r89.data, col_r30), col_r30));
} }
function MtxGridComponent_ng_container_6_td_4_ng_template_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, MtxGridComponent_ng_container_6_td_4_ng_template_3_ng_template_0_Template, 1, 6, "ng-template", 40);
} if (rf & 2) {
    ɵngcc0.ɵɵnextContext();
    const _r85 = ɵngcc0.ɵɵreference(6);
    const col_r30 = ɵngcc0.ɵɵnextContext().$implicit;
    const ctx_r84 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngIf", ctx_r84.summaryTemplate && ctx_r84._isTemplateRef(ctx_r84.summaryTemplate[col_r30.field]))("ngIfElse", _r85);
} }
function MtxGridComponent_ng_container_6_td_4_ng_template_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "span", 60);
} if (rf & 2) {
    const col_r30 = ɵngcc0.ɵɵnextContext(2).$implicit;
    const ctx_r86 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("innerHTML", ctx_r86._formatSummary(col_r30.summary, ctx_r86.data, col_r30), ɵngcc0.ɵɵsanitizeHtml);
} }
function MtxGridComponent_ng_container_6_td_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "td", 57);
    ɵngcc0.ɵɵtemplate(1, MtxGridComponent_ng_container_6_td_4_span_1_Template, 1, 0, "span", 45);
    ɵngcc0.ɵɵtemplate(2, MtxGridComponent_ng_container_6_td_4_ng_template_2_Template, 1, 6, "ng-template", 40);
    ɵngcc0.ɵɵtemplate(3, MtxGridComponent_ng_container_6_td_4_ng_template_3_Template, 1, 2, "ng-template", null, 58, ɵngcc0.ɵɵtemplateRefExtractor);
    ɵngcc0.ɵɵtemplate(5, MtxGridComponent_ng_container_6_td_4_ng_template_5_Template, 1, 1, "ng-template", null, 59, ɵngcc0.ɵɵtemplateRefExtractor);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const _r83 = ɵngcc0.ɵɵreference(4);
    const col_r30 = ɵngcc0.ɵɵnextContext().$implicit;
    const ctx_r33 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction2(5, _c1, col_r30.pinned === "left", col_r30.pinned === "right"))("ngStyle", ɵngcc0.ɵɵpureFunction4(8, _c2, col_r30.width, col_r30.width, col_r30.left, col_r30.right));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", col_r30.showExpand);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r33._isTemplateRef(ctx_r33.summaryTemplate))("ngIfElse", _r83);
} }
function MtxGridComponent_ng_container_6_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementContainerStart(1, 34);
    ɵngcc0.ɵɵtemplate(2, MtxGridComponent_ng_container_6_th_2_Template, 7, 12, "th", 35);
    ɵngcc0.ɵɵtemplate(3, MtxGridComponent_ng_container_6_td_3_Template, 8, 12, "td", 36);
    ɵngcc0.ɵɵtemplate(4, MtxGridComponent_ng_container_6_td_4_Template, 7, 13, "td", 37);
    ɵngcc0.ɵɵelementContainerEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const col_r30 = ctx.$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("matColumnDef", col_r30.field)("sticky", col_r30.pinned === "left")("stickyEnd", col_r30.pinned === "right");
} }
function MtxGridComponent_tr_7_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "tr", 61);
} }
const _c6 = function (a0, a1) { return { "selected": a0, "mat-row-odd": a1 }; };
function MtxGridComponent_tr_8_Template(rf, ctx) { if (rf & 1) {
    const _r99 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "tr", 62);
    ɵngcc0.ɵɵlistener("click", function MtxGridComponent_tr_8_Template_tr_click_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r99); const row_r95 = ctx.$implicit; const ctx_r98 = ɵngcc0.ɵɵnextContext(); return ctx_r98._selectRow($event, row_r95); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const row_r95 = ctx.$implicit;
    const index_r96 = ctx.index;
    const dataIndex_r97 = ctx.dataIndex;
    const ctx_r5 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction2(1, _c6, ctx_r5.rowSelection.isSelected(row_r95), ctx_r5._isOddRow(index_r96, dataIndex_r97)));
} }
function MtxGridComponent_ng_container_9_tr_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "tr", 64);
} }
function MtxGridComponent_ng_container_9_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, MtxGridComponent_ng_container_9_tr_1_Template, 1, 0, "tr", 63);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r6 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("matFooterRowDef", ctx_r6.displayedColumns)("matFooterRowDefSticky", true);
} }
function MtxGridComponent_ng_container_10_td_2_ng_template_2_Template(rf, ctx) { }
const _c7 = function (a0, a1, a2) { return { $implicit: a0, rowData: a1, index: a2 }; };
function MtxGridComponent_ng_container_10_td_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "td", 68);
    ɵngcc0.ɵɵelementStart(1, "div", 69);
    ɵngcc0.ɵɵtemplate(2, MtxGridComponent_ng_container_10_td_2_ng_template_2_Template, 0, 0, "ng-template", 43);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const row_r103 = ctx.$implicit;
    const dataIndex_r104 = ctx.dataIndex;
    const ctx_r101 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵattribute("colspan", ctx_r101.displayedColumns.length);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("@expansion", ctx_r101.expansionRowStates[dataIndex_r104].expanded ? "expanded" : "collapsed");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx_r101.expansionTemplate)("ngTemplateOutletContext", ɵngcc0.ɵɵpureFunction3(4, _c7, row_r103, row_r103, dataIndex_r104));
} }
const _c8 = function (a1, a2) { return { "mtx-grid-expanison": true, "expanded": a1, "collapsed": a2 }; };
function MtxGridComponent_ng_container_10_tr_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "tr", 70);
} if (rf & 2) {
    const dataIndex_r107 = ctx.dataIndex;
    const ctx_r102 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction2(1, _c8, ctx_r102.expansionRowStates[dataIndex_r107].expanded, !ctx_r102.expansionRowStates[dataIndex_r107].expanded));
} }
const _c9 = function () { return ["MtxGridExpansionColumnDef"]; };
function MtxGridComponent_ng_container_10_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementContainerStart(1, 65);
    ɵngcc0.ɵɵtemplate(2, MtxGridComponent_ng_container_10_td_2_Template, 3, 8, "td", 66);
    ɵngcc0.ɵɵelementContainerEnd();
    ɵngcc0.ɵɵtemplate(3, MtxGridComponent_ng_container_10_tr_3_Template, 1, 4, "tr", 67);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("matRowDefColumns", ɵngcc0.ɵɵpureFunction0(1, _c9));
} }
function MtxGridComponent_div_11_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "div", 71);
} }
function MtxGridComponent_div_13_ng_template_1_ng_template_0_Template(rf, ctx) { }
function MtxGridComponent_div_13_ng_template_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, MtxGridComponent_div_13_ng_template_1_ng_template_0_Template, 0, 0, "ng-template", 21);
} if (rf & 2) {
    const ctx_r108 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx_r108.noResultTemplate);
} }
function MtxGridComponent_div_13_ng_template_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtext(0);
} if (rf & 2) {
    const ctx_r110 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵtextInterpolate(ctx_r110.noResultText);
} }
function MtxGridComponent_div_13_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 72);
    ɵngcc0.ɵɵtemplate(1, MtxGridComponent_div_13_ng_template_1_Template, 1, 1, "ng-template", 40);
    ɵngcc0.ɵɵtemplate(2, MtxGridComponent_div_13_ng_template_2_Template, 1, 1, "ng-template", null, 73, ɵngcc0.ɵɵtemplateRefExtractor);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const _r109 = ɵngcc0.ɵɵreference(3);
    const ctx_r9 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r9.noResultTemplate)("ngIfElse", _r109);
} }
const _c10 = function (a0, a1, a2) { return { "mat-table-hover": a0, "mat-table-striped": a1, "mat-table-expandable": a2 }; };
function MtxGridCellComponent_ng_container_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelement(1, "span", 2);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("innerHTML", ctx_r0.colDef.formatter(ctx_r0.rowData, ctx_r0.colDef), ɵngcc0.ɵɵsanitizeHtml);
} }
const _c11 = function (a0) { return [a0]; };
function MtxGridCellComponent_ng_template_1_ng_container_1_mat_chip_list_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-chip-list");
    ɵngcc0.ɵɵelementStart(1, "mat-chip", 7);
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r12 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(2, _c11, "bg-" + ctx_r12.colDef.tag[ctx_r12._colValue].color));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r12.colDef.tag[ctx_r12._colValue].text, " ");
} }
function MtxGridCellComponent_ng_template_1_ng_container_1_ng_template_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtext(0);
} if (rf & 2) {
    const ctx_r14 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵtextInterpolate(ctx_r14._colValue);
} }
function MtxGridCellComponent_ng_template_1_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, MtxGridCellComponent_ng_template_1_ng_container_1_mat_chip_list_1_Template, 3, 4, "mat-chip-list", 0);
    ɵngcc0.ɵɵtemplate(2, MtxGridCellComponent_ng_template_1_ng_container_1_ng_template_2_Template, 1, 1, "ng-template", null, 6, ɵngcc0.ɵɵtemplateRefExtractor);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const _r13 = ɵngcc0.ɵɵreference(3);
    const ctx_r3 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r3.colDef.tag[ctx_r3._colValue])("ngIfElse", _r13);
} }
function MtxGridCellComponent_ng_template_1_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    const _r16 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "img", 8);
    ɵngcc0.ɵɵlistener("click", function MtxGridCellComponent_ng_template_1_ng_container_2_Template_img_click_1_listener() { ɵngcc0.ɵɵrestoreView(_r16); const ctx_r15 = ɵngcc0.ɵɵnextContext(2); return ctx_r15._onPreview(ctx_r15._colValue); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r4 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("src", ctx_r4._colValue, ɵngcc0.ɵɵsanitizeUrl);
} }
function MtxGridCellComponent_ng_template_1_ng_container_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "a", 9);
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r5 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("href", ctx_r5._colValue, ɵngcc0.ɵɵsanitizeUrl);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r5._colValue);
} }
function MtxGridCellComponent_ng_template_1_ng_container_4_ng_container_1_ng_container_1_ng_container_1_button_1_mat_icon_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-icon");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const btn_r18 = ɵngcc0.ɵɵnextContext(4).$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(btn_r18.icon);
} }
function MtxGridCellComponent_ng_template_1_ng_container_4_ng_container_1_ng_container_1_ng_container_1_button_1_Template(rf, ctx) { if (rf & 1) {
    const _r30 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 15);
    ɵngcc0.ɵɵlistener("click", function MtxGridCellComponent_ng_template_1_ng_container_4_ng_container_1_ng_container_1_ng_container_1_button_1_Template_button_click_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r30); const btn_r18 = ɵngcc0.ɵɵnextContext(3).$implicit; const ctx_r29 = ɵngcc0.ɵɵnextContext(3); return ctx_r29._handleActionConfirm($event, btn_r18.popTitle, btn_r18.click, ctx_r29.rowData); });
    ɵngcc0.ɵɵtemplate(1, MtxGridCellComponent_ng_template_1_ng_container_4_ng_container_1_ng_container_1_ng_container_1_button_1_mat_icon_1_Template, 2, 1, "mat-icon", 11);
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const btn_r18 = ɵngcc0.ɵɵnextContext(3).$implicit;
    ɵngcc0.ɵɵproperty("color", btn_r18.color || "primary")("matTooltip", btn_r18.tooltip);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", btn_r18.icon);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", btn_r18.text, " ");
} }
function MtxGridCellComponent_ng_template_1_ng_container_4_ng_container_1_ng_container_1_ng_container_1_button_2_Template(rf, ctx) { if (rf & 1) {
    const _r34 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 16);
    ɵngcc0.ɵɵlistener("click", function MtxGridCellComponent_ng_template_1_ng_container_4_ng_container_1_ng_container_1_ng_container_1_button_2_Template_button_click_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r34); const btn_r18 = ɵngcc0.ɵɵnextContext(3).$implicit; const ctx_r33 = ɵngcc0.ɵɵnextContext(3); return ctx_r33._handleActionConfirm($event, btn_r18.popTitle, btn_r18.click, ctx_r33.rowData); });
    ɵngcc0.ɵɵelementStart(1, "mat-icon");
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const btn_r18 = ɵngcc0.ɵɵnextContext(3).$implicit;
    ɵngcc0.ɵɵproperty("color", btn_r18.color || "primary")("matTooltip", btn_r18.tooltip);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(btn_r18.icon);
} }
function MtxGridCellComponent_ng_template_1_ng_container_4_ng_container_1_ng_container_1_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, MtxGridCellComponent_ng_template_1_ng_container_4_ng_container_1_ng_container_1_ng_container_1_button_1_Template, 3, 4, "button", 13);
    ɵngcc0.ɵɵtemplate(2, MtxGridCellComponent_ng_template_1_ng_container_4_ng_container_1_ng_container_1_ng_container_1_button_2_Template, 3, 3, "button", 14);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const btn_r18 = ɵngcc0.ɵɵnextContext(2).$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", btn_r18.type === "basic");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !btn_r18.type || btn_r18.type === "icon");
} }
function MtxGridCellComponent_ng_template_1_ng_container_4_ng_container_1_ng_container_1_ng_template_2_button_0_mat_icon_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-icon");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const btn_r18 = ɵngcc0.ɵɵnextContext(4).$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(btn_r18.icon);
} }
function MtxGridCellComponent_ng_template_1_ng_container_4_ng_container_1_ng_container_1_ng_template_2_button_0_Template(rf, ctx) { if (rf & 1) {
    const _r43 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 15);
    ɵngcc0.ɵɵlistener("click", function MtxGridCellComponent_ng_template_1_ng_container_4_ng_container_1_ng_container_1_ng_template_2_button_0_Template_button_click_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r43); const btn_r18 = ɵngcc0.ɵɵnextContext(3).$implicit; const ctx_r42 = ɵngcc0.ɵɵnextContext(3); return ctx_r42._handleActionClick($event, btn_r18, ctx_r42.rowData); });
    ɵngcc0.ɵɵtemplate(1, MtxGridCellComponent_ng_template_1_ng_container_4_ng_container_1_ng_container_1_ng_template_2_button_0_mat_icon_1_Template, 2, 1, "mat-icon", 11);
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const btn_r18 = ɵngcc0.ɵɵnextContext(3).$implicit;
    ɵngcc0.ɵɵproperty("color", btn_r18.color || "primary")("matTooltip", btn_r18.tooltip);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", btn_r18.icon);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", btn_r18.text, " ");
} }
function MtxGridCellComponent_ng_template_1_ng_container_4_ng_container_1_ng_container_1_ng_template_2_button_1_Template(rf, ctx) { if (rf & 1) {
    const _r47 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 16);
    ɵngcc0.ɵɵlistener("click", function MtxGridCellComponent_ng_template_1_ng_container_4_ng_container_1_ng_container_1_ng_template_2_button_1_Template_button_click_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r47); const btn_r18 = ɵngcc0.ɵɵnextContext(3).$implicit; const ctx_r46 = ɵngcc0.ɵɵnextContext(3); return ctx_r46._handleActionClick($event, btn_r18, ctx_r46.rowData); });
    ɵngcc0.ɵɵelementStart(1, "mat-icon");
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const btn_r18 = ɵngcc0.ɵɵnextContext(3).$implicit;
    ɵngcc0.ɵɵproperty("color", btn_r18.color || "primary")("matTooltip", btn_r18.tooltip);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(btn_r18.icon);
} }
function MtxGridCellComponent_ng_template_1_ng_container_4_ng_container_1_ng_container_1_ng_template_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, MtxGridCellComponent_ng_template_1_ng_container_4_ng_container_1_ng_container_1_ng_template_2_button_0_Template, 3, 4, "button", 13);
    ɵngcc0.ɵɵtemplate(1, MtxGridCellComponent_ng_template_1_ng_container_4_ng_container_1_ng_container_1_ng_template_2_button_1_Template, 3, 3, "button", 14);
} if (rf & 2) {
    const btn_r18 = ɵngcc0.ɵɵnextContext(2).$implicit;
    ɵngcc0.ɵɵproperty("ngIf", btn_r18.type === "basic");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !btn_r18.type || btn_r18.type === "icon");
} }
function MtxGridCellComponent_ng_template_1_ng_container_4_ng_container_1_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, MtxGridCellComponent_ng_template_1_ng_container_4_ng_container_1_ng_container_1_ng_container_1_Template, 3, 2, "ng-container", 0);
    ɵngcc0.ɵɵtemplate(2, MtxGridCellComponent_ng_template_1_ng_container_4_ng_container_1_ng_container_1_ng_template_2_Template, 2, 2, "ng-template", null, 12, ɵngcc0.ɵɵtemplateRefExtractor);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const _r23 = ɵngcc0.ɵɵreference(3);
    const btn_r18 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", btn_r18.pop)("ngIfElse", _r23);
} }
function MtxGridCellComponent_ng_template_1_ng_container_4_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, MtxGridCellComponent_ng_template_1_ng_container_4_ng_container_1_ng_container_1_Template, 4, 2, "ng-container", 11);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const btn_r18 = ctx.$implicit;
    const ctx_r17 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !btn_r18.iif || btn_r18.iif(ctx_r17.rowData));
} }
function MtxGridCellComponent_ng_template_1_ng_container_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, MtxGridCellComponent_ng_template_1_ng_container_4_ng_container_1_Template, 2, 1, "ng-container", 10);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r6 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r6.colDef.buttons);
} }
function MtxGridCellComponent_ng_template_1_ng_container_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "number");
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r7 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 1, ctx_r7._colValue) || "--", " ");
} }
function MtxGridCellComponent_ng_template_1_ng_container_6_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "currency");
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r8 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 1, ctx_r8._colValue) || "--", " ");
} }
function MtxGridCellComponent_ng_template_1_ng_container_7_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "percent");
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r9 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 1, ctx_r9._colValue) || "--", " ");
} }
function MtxGridCellComponent_ng_template_1_ng_container_8_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r10 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r10._colValue, " ");
} }
function MtxGridCellComponent_ng_template_1_ng_container_9_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r11 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r11._colValue || "--", " ");
} }
function MtxGridCellComponent_ng_template_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0, 3);
    ɵngcc0.ɵɵtemplate(1, MtxGridCellComponent_ng_template_1_ng_container_1_Template, 4, 2, "ng-container", 4);
    ɵngcc0.ɵɵtemplate(2, MtxGridCellComponent_ng_template_1_ng_container_2_Template, 2, 1, "ng-container", 4);
    ɵngcc0.ɵɵtemplate(3, MtxGridCellComponent_ng_template_1_ng_container_3_Template, 3, 2, "ng-container", 4);
    ɵngcc0.ɵɵtemplate(4, MtxGridCellComponent_ng_template_1_ng_container_4_Template, 2, 1, "ng-container", 4);
    ɵngcc0.ɵɵtemplate(5, MtxGridCellComponent_ng_template_1_ng_container_5_Template, 3, 3, "ng-container", 4);
    ɵngcc0.ɵɵtemplate(6, MtxGridCellComponent_ng_template_1_ng_container_6_Template, 3, 3, "ng-container", 4);
    ɵngcc0.ɵɵtemplate(7, MtxGridCellComponent_ng_template_1_ng_container_7_Template, 3, 3, "ng-container", 4);
    ɵngcc0.ɵɵtemplate(8, MtxGridCellComponent_ng_template_1_ng_container_8_Template, 2, 1, "ng-container", 4);
    ɵngcc0.ɵɵtemplate(9, MtxGridCellComponent_ng_template_1_ng_container_9_Template, 2, 1, "ng-container", 5);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngSwitch", ctx_r2.colDef.type);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngSwitchCase", "tag");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngSwitchCase", "image");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngSwitchCase", "link");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngSwitchCase", "button");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngSwitchCase", "number");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngSwitchCase", "currency");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngSwitchCase", "percent");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngSwitchCase", "boolean");
} }
function MtxGridColumnMenuComponent_ng_container_1_mat_icon_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-icon");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r12 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r12.buttonIcon);
} }
function MtxGridColumnMenuComponent_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "button", 9);
    ɵngcc0.ɵɵtemplate(2, MtxGridColumnMenuComponent_ng_container_1_mat_icon_2_Template, 2, 1, "mat-icon", 10);
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    const _r7 = ɵngcc0.ɵɵreference(9);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngClass", ctx_r0.buttonClass)("color", ctx_r0.buttonColor)("matMenuTriggerFor", _r7);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.buttonIcon);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r0.buttonText, " ");
} }
function MtxGridColumnMenuComponent_ng_container_2_mat_icon_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-icon");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r13 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r13.buttonIcon);
} }
function MtxGridColumnMenuComponent_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "button", 11);
    ɵngcc0.ɵɵtemplate(2, MtxGridColumnMenuComponent_ng_container_2_mat_icon_2_Template, 2, 1, "mat-icon", 10);
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    const _r7 = ɵngcc0.ɵɵreference(9);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngClass", ctx_r1.buttonClass)("color", ctx_r1.buttonColor)("matMenuTriggerFor", _r7);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r1.buttonIcon);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r1.buttonText, " ");
} }
function MtxGridColumnMenuComponent_ng_container_3_mat_icon_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-icon");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r14 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r14.buttonIcon);
} }
function MtxGridColumnMenuComponent_ng_container_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "button", 12);
    ɵngcc0.ɵɵtemplate(2, MtxGridColumnMenuComponent_ng_container_3_mat_icon_2_Template, 2, 1, "mat-icon", 10);
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    const _r7 = ɵngcc0.ɵɵreference(9);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngClass", ctx_r2.buttonClass)("color", ctx_r2.buttonColor)("matMenuTriggerFor", _r7);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r2.buttonIcon);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r2.buttonText, " ");
} }
function MtxGridColumnMenuComponent_ng_container_4_mat_icon_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-icon");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r15 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r15.buttonIcon);
} }
function MtxGridColumnMenuComponent_ng_container_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "button", 13);
    ɵngcc0.ɵɵtemplate(2, MtxGridColumnMenuComponent_ng_container_4_mat_icon_2_Template, 2, 1, "mat-icon", 10);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r3 = ɵngcc0.ɵɵnextContext();
    const _r7 = ɵngcc0.ɵɵreference(9);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngClass", ctx_r3.buttonClass)("color", ctx_r3.buttonColor)("matMenuTriggerFor", _r7);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r3.buttonIcon);
} }
function MtxGridColumnMenuComponent_ng_container_5_mat_icon_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-icon");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r16 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r16.buttonIcon);
} }
function MtxGridColumnMenuComponent_ng_container_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "button", 14);
    ɵngcc0.ɵɵtemplate(2, MtxGridColumnMenuComponent_ng_container_5_mat_icon_2_Template, 2, 1, "mat-icon", 10);
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r4 = ɵngcc0.ɵɵnextContext();
    const _r7 = ɵngcc0.ɵɵreference(9);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngClass", ctx_r4.buttonClass)("color", ctx_r4.buttonColor)("matMenuTriggerFor", _r7);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r4.buttonIcon);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r4.buttonText, " ");
} }
function MtxGridColumnMenuComponent_ng_container_6_mat_icon_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-icon");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r17 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r17.buttonIcon);
} }
function MtxGridColumnMenuComponent_ng_container_6_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "button", 15);
    ɵngcc0.ɵɵtemplate(2, MtxGridColumnMenuComponent_ng_container_6_mat_icon_2_Template, 2, 1, "mat-icon", 10);
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r5 = ɵngcc0.ɵɵnextContext();
    const _r7 = ɵngcc0.ɵɵreference(9);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngClass", ctx_r5.buttonClass)("color", ctx_r5.buttonColor)("matMenuTriggerFor", _r7);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r5.buttonIcon);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r5.buttonText, " ");
} }
function MtxGridColumnMenuComponent_ng_container_7_mat_icon_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-icon");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r18 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r18.buttonIcon);
} }
function MtxGridColumnMenuComponent_ng_container_7_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "button", 16);
    ɵngcc0.ɵɵtemplate(2, MtxGridColumnMenuComponent_ng_container_7_mat_icon_2_Template, 2, 1, "mat-icon", 10);
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r6 = ɵngcc0.ɵɵnextContext();
    const _r7 = ɵngcc0.ɵɵreference(9);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngClass", ctx_r6.buttonClass)("color", ctx_r6.buttonColor)("matMenuTriggerFor", _r7);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r6.buttonIcon);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r6.buttonText, " ");
} }
function MtxGridColumnMenuComponent_div_11_div_1_ng_template_3_Template(rf, ctx) { }
const _c12 = function (a0) { return { $implicit: a0 }; };
function MtxGridColumnMenuComponent_div_11_div_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 19);
    ɵngcc0.ɵɵelementStart(1, "mat-icon", 20);
    ɵngcc0.ɵɵtext(2, "drag_handle");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(3, MtxGridColumnMenuComponent_div_11_div_1_ng_template_3_Template, 0, 0, "ng-template", 21);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const col_r20 = ctx.$implicit;
    const ctx_r19 = ɵngcc0.ɵɵnextContext(2);
    const _r10 = ɵngcc0.ɵɵreference(14);
    ɵngcc0.ɵɵproperty("cdkDragDisabled", ctx_r19.selectedType === "show" ? !col_r20.show : col_r20.hide);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", _r10)("ngTemplateOutletContext", ɵngcc0.ɵɵpureFunction1(3, _c12, col_r20));
} }
function MtxGridColumnMenuComponent_div_11_Template(rf, ctx) { if (rf & 1) {
    const _r23 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 17);
    ɵngcc0.ɵɵlistener("cdkDropListDropped", function MtxGridColumnMenuComponent_div_11_Template_div_cdkDropListDropped_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r23); const ctx_r22 = ɵngcc0.ɵɵnextContext(); return ctx_r22._handleDroped($event); });
    ɵngcc0.ɵɵtemplate(1, MtxGridColumnMenuComponent_div_11_div_1_Template, 4, 5, "div", 18);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r8 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r8.columns);
} }
function MtxGridColumnMenuComponent_div_12_div_1_ng_template_1_Template(rf, ctx) { }
function MtxGridColumnMenuComponent_div_12_div_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 24);
    ɵngcc0.ɵɵtemplate(1, MtxGridColumnMenuComponent_div_12_div_1_ng_template_1_Template, 0, 0, "ng-template", 21);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const col_r25 = ctx.$implicit;
    ɵngcc0.ɵɵnextContext(2);
    const _r10 = ɵngcc0.ɵɵreference(14);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", _r10)("ngTemplateOutletContext", ɵngcc0.ɵɵpureFunction1(2, _c12, col_r25));
} }
function MtxGridColumnMenuComponent_div_12_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 22);
    ɵngcc0.ɵɵtemplate(1, MtxGridColumnMenuComponent_div_12_div_1_Template, 2, 4, "div", 23);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r9 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r9.columns);
} }
function MtxGridColumnMenuComponent_ng_template_13_mat_checkbox_0_Template(rf, ctx) { if (rf & 1) {
    const _r32 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "mat-checkbox", 27);
    ɵngcc0.ɵɵlistener("ngModelChange", function MtxGridColumnMenuComponent_ng_template_13_mat_checkbox_0_Template_mat_checkbox_ngModelChange_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r32); const col_r27 = ɵngcc0.ɵɵnextContext().$implicit; const ctx_r30 = ɵngcc0.ɵɵnextContext(); return (col_r27[ctx_r30.selectedType] = $event); })("change", function MtxGridColumnMenuComponent_ng_template_13_mat_checkbox_0_Template_mat_checkbox_change_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r32); const ctx_r33 = ɵngcc0.ɵɵnextContext(2); return ctx_r33._handleSelection($event); });
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const col_r27 = ɵngcc0.ɵɵnextContext().$implicit;
    const ctx_r28 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngModel", col_r27[ctx_r28.selectedType])("disabled", col_r27.disabled);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", col_r27.label, " ");
} }
function MtxGridColumnMenuComponent_ng_template_13_span_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 28);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const col_r27 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(col_r27.label);
} }
function MtxGridColumnMenuComponent_ng_template_13_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, MtxGridColumnMenuComponent_ng_template_13_mat_checkbox_0_Template, 2, 3, "mat-checkbox", 25);
    ɵngcc0.ɵɵtemplate(1, MtxGridColumnMenuComponent_ng_template_13_span_1_Template, 2, 1, "span", 26);
} if (rf & 2) {
    const ctx_r11 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngIf", ctx_r11.selectable);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r11.selectable);
} }
function MtxGridColumnTag() { }
/**
 * @record
 */
function MtxGridColumnTagValue() { }
if (false) {
    /** @type {?|undefined} */
    MtxGridColumnTagValue.prototype.text;
    /** @type {?|undefined} */
    MtxGridColumnTagValue.prototype.color;
}
/**
 * Button
 * @record
 */
function MtxGridColumnButton() { }
if (false) {
    /** @type {?|undefined} */
    MtxGridColumnButton.prototype.type;
    /** @type {?|undefined} */
    MtxGridColumnButton.prototype.text;
    /** @type {?|undefined} */
    MtxGridColumnButton.prototype.icon;
    /** @type {?|undefined} */
    MtxGridColumnButton.prototype.color;
    /** @type {?|undefined} */
    MtxGridColumnButton.prototype.click;
    /** @type {?|undefined} */
    MtxGridColumnButton.prototype.pop;
    /** @type {?|undefined} */
    MtxGridColumnButton.prototype.popTitle;
    /** @type {?|undefined} */
    MtxGridColumnButton.prototype.children;
    /** @type {?|undefined} */
    MtxGridColumnButton.prototype.iif;
    /** @type {?|undefined} */
    MtxGridColumnButton.prototype.tooltip;
}
/**
 * Grid
 * @record
 */
function MtxGridColumn() { }
if (false) {
    /** @type {?} */
    MtxGridColumn.prototype.field;
    /** @type {?|undefined} */
    MtxGridColumn.prototype.header;
    /** @type {?|undefined} */
    MtxGridColumn.prototype.hide;
    /** @type {?|undefined} */
    MtxGridColumn.prototype.disabled;
    /** @type {?|undefined} */
    MtxGridColumn.prototype.pinned;
    /** @type {?|undefined} */
    MtxGridColumn.prototype.left;
    /** @type {?|undefined} */
    MtxGridColumn.prototype.right;
    /** @type {?|undefined} */
    MtxGridColumn.prototype.width;
    /** @type {?|undefined} */
    MtxGridColumn.prototype.resizable;
    /** @type {?|undefined} */
    MtxGridColumn.prototype.sortable;
    /** @type {?|undefined} */
    MtxGridColumn.prototype.type;
    /** @type {?|undefined} */
    MtxGridColumn.prototype.tag;
    /** @type {?|undefined} */
    MtxGridColumn.prototype.buttons;
    /** @type {?|undefined} */
    MtxGridColumn.prototype.formatter;
    /** @type {?|undefined} */
    MtxGridColumn.prototype.cellTemplate;
    /** @type {?|undefined} */
    MtxGridColumn.prototype.showExpand;
    /** @type {?|undefined} */
    MtxGridColumn.prototype.description;
    /** @type {?|undefined} */
    MtxGridColumn.prototype.i18n;
    /** @type {?|undefined} */
    MtxGridColumn.prototype.summary;
}
/**
 * Column selection
 * @record
 */
function MtxGridColumnSelectionItem() { }
if (false) {
    /** @type {?} */
    MtxGridColumnSelectionItem.prototype.label;
    /** @type {?} */
    MtxGridColumnSelectionItem.prototype.field;
    /** @type {?|undefined} */
    MtxGridColumnSelectionItem.prototype.show;
    /** @type {?|undefined} */
    MtxGridColumnSelectionItem.prototype.hide;
    /** @type {?|undefined} */
    MtxGridColumnSelectionItem.prototype.disabled;
}
/**
 * Cell Template
 * @record
 */
function MtxGridCellTemplate() { }
/**
 * Row Selection Formatter
 * @record
 */
function MtxGridRowSelectionFormatter() { }
if (false) {
    /** @type {?|undefined} */
    MtxGridRowSelectionFormatter.prototype.disabled;
    /** @type {?|undefined} */
    MtxGridRowSelectionFormatter.prototype.hideCheckbox;
}
/**
 * Row Class Formatter
 * @record
 */
function MtxGridRowClassFormatter() { }

/**
 * @fileoverview added by tsickle
 * Generated from: grid.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class MtxGridService {
    constructor() { }
    /**
     * Get cell value from column key
     * @param {?} data row data
     * @param {?} col  column definition e.g. `a.b.c`
     * @return {?}
     */
    getCellValue(data, col) {
        /** @type {?} */
        const keyArr = col.field ? col.field.split('.') : [];
        /** @type {?} */
        let tmp = '';
        keyArr.forEach((/**
         * @param {?} key
         * @param {?} i
         * @return {?}
         */
        (key, i) => {
            if (i === 0) {
                tmp = data[key];
            }
            else {
                tmp = tmp && tmp[key];
            }
        }));
        return tmp;
    }
    /**
     * Remove white spaces in a string and convert string to array
     * @param {?} str string
     * @return {?}
     */
    str2arr(str) {
        return str.replace(/[\r\n\s]/g, '').split(',');
    }
}
MtxGridService.ɵfac = function MtxGridService_Factory(t) { return new (t || MtxGridService)(); };
MtxGridService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: MtxGridService, factory: MtxGridService.ɵfac });
/** @nocollapse */
MtxGridService.ctorParameters = () => [];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MtxGridService, [{
        type: Injectable
    }], function () { return []; }, null); })();

/**
 * @fileoverview added by tsickle
 * Generated from: grid.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class MtxGridComponent {
    /**
     * @param {?} _dataGridSrv
     */
    constructor(_dataGridSrv) {
        this._dataGridSrv = _dataGridSrv;
        this.columns = [];
        this.data = [];
        this.length = 0;
        this.loading = false;
        /**
         * Whether to show tooltip on columns
         */
        this.tooltip = true;
        /**
         * Whether to page on the front end
         */
        this.pageOnFront = true;
        this.showPaginator = true;
        this.pageDisabled = false;
        this.showFirstLastButtons = true;
        this.pageIndex = 0;
        this.pageSize = 10;
        this.pageSizeOptions = [10, 50, 100];
        this.hidePageSize = false;
        this.page = new EventEmitter();
        /**
         * Sort
         */
        this.sortOnFront = true;
        this.sortChange = new EventEmitter();
        /**
         * Hover & Striped style
         */
        this.rowHover = false;
        this.rowStriped = false;
        /**
         * Expandable row
         */
        this.expansionRowStates = [];
        this.expandable = false;
        this.expansionChange = new EventEmitter();
        /**
         * Whether support multiple row/cell selection
         */
        this.multiSelectable = true;
        /**
         * Row selection
         */
        this.rowSelection = new SelectionModel(true, []);
        this.rowSelected = [];
        this.rowSelectable = false;
        this.hideRowSelectionCheckbox = false;
        this.rowSelectionFormatter = {};
        this.rowClassFormatter = {};
        this.rowSelectionChange = new EventEmitter();
        /**
         * Cell selection
         */
        this.cellSelection = [];
        this.cellSelectable = true;
        this.cellSelectionChange = new EventEmitter();
        /**
         * Toolbar
         */
        this.showToolbar = false;
        this.toolbarTitle = '';
        this.columnMenuData = [];
        this.showColumnMenuButton = true;
        this.columnMenuButtonText = '';
        this.columnMenuButtonType = 'stroked';
        this.columnMenuButtonColor = '';
        this.columnMenuButtonClass = '';
        this.columnMenuButtonIcon = '';
        this.columnHideable = true;
        this.columnHidingChecked = 'show';
        this.columnHidingChange = new EventEmitter();
        this.columnMovable = true;
        this.columnMovingChange = new EventEmitter();
        this.columnPinnable = true;
        this.columnPinningChange = new EventEmitter();
        /**
         * No Result
         */
        this.noResultText = 'No records found';
        /**
         * tfoot
         */
        this.showSummary = false;
        /**
         * Sidebar
         */
        this.showSidebar = false;
    }
    /**
     * @return {?}
     */
    get _hasNoResult() {
        return (!this.data || this.data.length === 0) && !this.loading;
    }
    // TODO:
    /**
     * @return {?}
     */
    get _whetherShowSummary() {
        return this.showSummary;
    }
    /**
     * @param {?} data
     * @param {?} colDef
     * @return {?}
     */
    _getColData(data, colDef) {
        return data.map((/**
         * @param {?} item
         * @return {?}
         */
        (item) => item[colDef.field]));
    }
    /**
     * @param {?} summary
     * @param {?} data
     * @param {?} colDef
     * @return {?}
     */
    _formatSummary(summary, data, colDef) {
        if (this._isString(summary)) {
            return summary;
        }
        else if (this._isFunction(summary)) {
            /** @type {?} */
            const colData = this._getColData(data, colDef);
            return summary(colData, colDef);
        }
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    _isTemplateRef(obj) {
        return obj instanceof TemplateRef;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    _isString(fn) {
        return Object.prototype.toString.call(fn) === '[object String]';
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    _isFunction(fn) {
        return Object.prototype.toString.call(fn) === '[object Function]';
    }
    /**
     * @return {?}
     */
    ngOnInit() { }
    // Waiting for async data
    /**
     * @return {?}
     */
    ngOnChanges() {
        var _a;
        this._countPinnedPosition();
        this.displayedColumns = this.columns.filter((/**
         * @param {?} item
         * @return {?}
         */
        item => !item.hide)).map((/**
         * @param {?} item
         * @return {?}
         */
        item => item.field));
        if (this.showColumnMenuButton) {
            this.columnMenuData = this.columns.map((/**
             * @param {?} item
             * @return {?}
             */
            item => {
                return {
                    label: (/** @type {?} */ (item.header)),
                    field: item.field,
                    show: !item.hide,
                    hide: item.hide,
                    disabled: item.disabled,
                };
            }));
        }
        if (this.rowSelectable && !this.hideRowSelectionCheckbox) {
            this.displayedColumns.unshift('MtxGridCheckboxColumnDef');
        }
        // We should copy each item of data for expansion data
        if (this.expandable) {
            this.expansionRowStates = []; // reset
            (_a = this.data) === null || _a === void 0 ? void 0 : _a.forEach((/**
             * @param {?} _
             * @return {?}
             */
            _ => {
                this.expansionRowStates.push({ expanded: false });
            }));
        }
        // TODO:
        this.dataSource = new MatTableDataSource(this.data);
        if (this.pageOnFront) {
            this.dataSource.paginator = this.paginator;
        }
        if (this.sortOnFront) {
            this.dataSource.sort = this.sort;
        }
        if (this.rowSelectable) {
            this.rowSelection = new SelectionModel(this.multiSelectable, this.rowSelected);
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() { }
    /**
     * @return {?}
     */
    _countPinnedPosition() {
        /** @type {?} */
        const count = (/**
         * @param {?} acc
         * @param {?} cur
         * @return {?}
         */
        (acc, cur) => acc + parseFloat(cur.width || '80px'));
        /** @type {?} */
        const pinnedLeftCols = this.columns.filter((/**
         * @param {?} col
         * @return {?}
         */
        col => col.pinned && col.pinned === 'left'));
        pinnedLeftCols.forEach((/**
         * @param {?} item
         * @param {?} idx
         * @return {?}
         */
        (item, idx) => {
            item.left = pinnedLeftCols.slice(0, idx).reduce(count, 0) + 'px';
        }));
        /** @type {?} */
        const pinnedRightCols = this.columns
            .filter((/**
         * @param {?} col
         * @return {?}
         */
        col => col.pinned && col.pinned === 'right'))
            .reverse();
        pinnedRightCols.forEach((/**
         * @param {?} item
         * @param {?} idx
         * @return {?}
         */
        (item, idx) => {
            item.right = pinnedRightCols.slice(0, idx).reduce(count, 0) + 'px';
        }));
    }
    /**
     * @param {?} index
     * @param {?} dataIndex
     * @return {?}
     */
    _isOddRow(index, dataIndex) {
        return typeof index === 'undefined' ? dataIndex % 2 : index % 2;
    }
    /**
     * @param {?} index
     * @param {?} dataIndex
     * @return {?}
     */
    _getIndex(index, dataIndex) {
        return typeof index === 'undefined' ? dataIndex : index;
    }
    /**
     * @param {?} sort
     * @return {?}
     */
    _handleSortChange(sort) {
        this.sortChange.emit(sort);
    }
    /**
     * Expansion change event
     * @param {?} expansionRef
     * @param {?} rowData
     * @param {?} column
     * @param {?} index
     * @return {?}
     */
    _handleExpansionChange(expansionRef, rowData, column, index) {
        if (this.expandable) {
            this.expansionRowStates[index].expanded = !this.expansionRowStates[index].expanded;
        }
        this.expansionChange.emit({ opened: expansionRef.expended, data: rowData, index, column });
    }
    /**
     * Cell select event
     * @param {?} cellRef
     * @param {?} rowData
     * @param {?} colDef
     * @return {?}
     */
    _selectCell(cellRef, rowData, colDef) {
        // If not the same cell
        if (this._selectedCell !== cellRef) {
            /** @type {?} */
            const colValue = this._dataGridSrv.getCellValue(rowData, colDef);
            this.cellSelection = []; // reset
            this.cellSelection.push({ cellData: colValue, rowData, colDef });
            this.cellSelectionChange.emit(this.cellSelection);
            if (this._selectedCell) {
                this._selectedCell.deselect(); // the selectedCell will be undefined
            }
        }
        this._selectedCell = cellRef.selected ? cellRef : undefined;
    }
    /**
     * Row select event
     * @param {?} event
     * @param {?} rowData
     * @return {?}
     */
    _selectRow(event, rowData) {
        if (this.rowSelectable &&
            !(this.rowSelectionFormatter.disabled && this.rowSelectionFormatter.disabled(rowData)) &&
            !(this.rowSelectionFormatter.hideCheckbox && this.rowSelectionFormatter.hideCheckbox(rowData))) {
            // metaKey -> command key
            if (!event.ctrlKey && !event.metaKey) {
                this.rowSelection.clear();
            }
            this._toggleNormalCheckbox(rowData);
        }
    }
    /**
     * Whether the number of selected elements matches the total number of rows.
     * @return {?}
     */
    _isAllSelected() {
        /** @type {?} */
        const numSelected = this.rowSelection.selected.length;
        /** @type {?} */
        const numRows = this.dataSource.data.length;
        return numSelected === numRows;
    }
    /**
     * Select all rows if they are not all selected; otherwise clear selection.
     * @return {?}
     */
    _toggleMasterCheckbox() {
        this._isAllSelected()
            ? this.rowSelection.clear()
            : this.dataSource.data.forEach((/**
             * @param {?} row
             * @return {?}
             */
            row => this.rowSelection.select(row)));
        this.rowSelectionChange.emit(this.rowSelection.selected);
    }
    /**
     * Select normal row
     * @param {?} row
     * @return {?}
     */
    _toggleNormalCheckbox(row) {
        this.rowSelection.toggle(row);
        this.rowSelectionChange.emit(this.rowSelection.selected);
    }
    /**
     * Column change event
     * @param {?} columns
     * @return {?}
     */
    _handleColumnHidingChange(columns) {
        this.columnHidingChange.emit(columns);
        this.displayedColumns = Object.assign([], columns);
        if (this.rowSelectable && !this.hideRowSelectionCheckbox) {
            this.displayedColumns.unshift('MtxGridCheckboxColumnDef');
        }
    }
    /**
     * @param {?} columns
     * @return {?}
     */
    _handleColumnMovingChange(columns) {
        this.columnMovingChange.emit(columns);
        this.displayedColumns = Object.assign([], columns);
        if (this.rowSelectable && !this.hideRowSelectionCheckbox) {
            this.displayedColumns.unshift('MtxGridCheckboxColumnDef');
        }
    }
    /**
     * Customize expansion event
     * @param {?} index
     * @return {?}
     */
    toggleExpansion(index) {
        if (!this.expandable) {
            throw new Error('The `expandable` should be set true.');
        }
        this.expansionRowStates[index].expanded = !this.expansionRowStates[index].expanded;
        return this.expansionRowStates[index].expanded;
    }
}
MtxGridComponent.ɵfac = function MtxGridComponent_Factory(t) { return new (t || MtxGridComponent)(ɵngcc0.ɵɵdirectiveInject(MtxGridService)); };
MtxGridComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MtxGridComponent, selectors: [["mtx-grid"]], viewQuery: function MtxGridComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵstaticViewQuery(MatPaginator, true);
        ɵngcc0.ɵɵstaticViewQuery(MatSort, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.paginator = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.sort = _t.first);
    } }, hostAttrs: [1, "mtx-grid"], inputs: { columns: "columns", data: "data", length: "length", loading: "loading", tooltip: "tooltip", pageOnFront: "pageOnFront", showPaginator: "showPaginator", pageDisabled: "pageDisabled", showFirstLastButtons: "showFirstLastButtons", pageIndex: "pageIndex", pageSize: "pageSize", pageSizeOptions: "pageSizeOptions", hidePageSize: "hidePageSize", sortOnFront: "sortOnFront", rowHover: "rowHover", rowStriped: "rowStriped", expandable: "expandable", multiSelectable: "multiSelectable", rowSelected: "rowSelected", rowSelectable: "rowSelectable", hideRowSelectionCheckbox: "hideRowSelectionCheckbox", rowSelectionFormatter: "rowSelectionFormatter", rowClassFormatter: "rowClassFormatter", cellSelectable: "cellSelectable", showToolbar: "showToolbar", toolbarTitle: "toolbarTitle", showColumnMenuButton: "showColumnMenuButton", columnMenuButtonText: "columnMenuButtonText", columnMenuButtonType: "columnMenuButtonType", columnMenuButtonColor: "columnMenuButtonColor", columnMenuButtonClass: "columnMenuButtonClass", columnMenuButtonIcon: "columnMenuButtonIcon", columnHideable: "columnHideable", columnHidingChecked: "columnHidingChecked", columnMovable: "columnMovable", columnPinnable: "columnPinnable", noResultText: "noResultText", showSummary: "showSummary", showSidebar: "showSidebar", displayedColumns: "displayedColumns", trackBy: "trackBy", expansionTemplate: "expansionTemplate", toolbarTemplate: "toolbarTemplate", noResultTemplate: "noResultTemplate", headerTemplate: "headerTemplate", cellTemplate: "cellTemplate", summaryTemplate: "summaryTemplate" }, outputs: { page: "page", sortChange: "sortChange", expansionChange: "expansionChange", rowSelectionChange: "rowSelectionChange", cellSelectionChange: "cellSelectionChange", columnHidingChange: "columnHidingChange", columnMovingChange: "columnMovingChange", columnPinningChange: "columnPinningChange" }, exportAs: ["mtxGrid"], features: [ɵngcc0.ɵɵNgOnChangesFeature], decls: 14, vars: 28, consts: [["class", "mtx-grid-progress", "mode", "indeterminate", 4, "ngIf"], ["class", "mtx-grid-toolbar", 4, "ngIf"], [1, "mtx-grid-main", "mtx-grid-layout"], [1, "mtx-grid-content", "mtx-grid-layout"], ["mat-table", "", "matSort", "", 3, "ngClass", "dataSource", "multiTemplateDataRows", "trackBy", "matSortChange"], ["matColumnDef", "MtxGridCheckboxColumnDef", 4, "ngIf"], [4, "ngFor", "ngForOf"], ["mat-header-row", "", 4, "matHeaderRowDef", "matHeaderRowDefSticky"], ["mat-row", "", 3, "ngClass", "click", 4, "matRowDef", "matRowDefColumns"], [4, "ngIf"], ["class", "mtx-grid-sidebar", 4, "ngIf"], [3, "showFirstLastButtons", "length", "pageIndex", "pageSize", "pageSizeOptions", "hidePageSize", "disabled", "page"], ["class", "mtx-grid-no-result", 4, "ngIf"], ["mode", "indeterminate", 1, "mtx-grid-progress"], [1, "mtx-grid-toolbar"], ["class", "mtx-grid-toolbar-title", 4, "ngIf"], [1, "mtx-grid-toolbar-template"], [3, "ngIf"], [1, "mtx-grid-toolbar-actions"], [3, "columns", "buttonText", "buttonType", "buttonColor", "buttonClass", "buttonIcon", "selectable", "selectedType", "sortable", "selectionChange", "sortChange", 4, "ngIf"], [1, "mtx-grid-toolbar-title"], [3, "ngTemplateOutlet"], [3, "columns", "buttonText", "buttonType", "buttonColor", "buttonClass", "buttonIcon", "selectable", "selectedType", "sortable", "selectionChange", "sortChange"], ["matColumnDef", "MtxGridCheckboxColumnDef"], ["mat-header-cell", "", "class", "mtx-grid-checkbox-cell", 4, "matHeaderCellDef"], ["mat-cell", "", "class", "mtx-grid-checkbox-cell", 4, "matCellDef"], ["mat-footer-cell", "", 4, "matFooterCellDef"], ["mat-header-cell", "", 1, "mtx-grid-checkbox-cell"], [3, "checked", "indeterminate", "change", 4, "ngIf"], [3, "checked", "indeterminate", "change"], ["mat-cell", "", 1, "mtx-grid-checkbox-cell"], [3, "disabled", "checked", "click", "change", 4, "ngIf"], [3, "disabled", "checked", "click", "change"], ["mat-footer-cell", ""], [3, "matColumnDef", "sticky", "stickyEnd"], ["mat-header-cell", "", 3, "ngClass", "ngStyle", 4, "matHeaderCellDef"], ["mat-cell", "", "mtx-selectable-cell", "", 3, "ngClass", "ngStyle", "cellSelectionChange", 4, "matCellDef"], ["mat-footer-cell", "", 3, "ngClass", "ngStyle", 4, "matFooterCellDef"], ["mat-header-cell", "", 3, "ngClass", "ngStyle"], [1, "mat-header-cell-inner"], [3, "ngIf", "ngIfElse"], ["headerTpl", ""], ["defaultHeaderTpl", ""], [3, "ngTemplateOutlet", "ngTemplateOutletContext"], ["mat-sort-header", "", 3, "disabled"], ["class", "mtx-grid-expanison-placeholder", 4, "ngIf"], ["class", "mat-sort-header-icon", 4, "ngIf"], [1, "mtx-grid-expanison-placeholder"], [1, "mat-sort-header-icon"], ["mat-cell", "", "mtx-selectable-cell", "", 3, "ngClass", "ngStyle", "cellSelectionChange"], ["cellTpl", ""], ["colDefCellTpl", ""], ["defaultCellTpl", ""], [3, "ngIf", "ngIfElse", "ngTemplateOutlet", "ngTemplateOutletContext"], ["mat-icon-button", "", "mtx-expansion-toggle", "", 3, "toggleChange", 4, "ngIf"], [3, "rowData", "colDef"], ["mat-icon-button", "", "mtx-expansion-toggle", "", 3, "toggleChange"], ["mat-footer-cell", "", 3, "ngClass", "ngStyle"], ["summaryTpl", ""], ["defaultSummaryTpl", ""], [3, "innerHTML"], ["mat-header-row", ""], ["mat-row", "", 3, "ngClass", "click"], ["mat-footer-row", "", 4, "matFooterRowDef", "matFooterRowDefSticky"], ["mat-footer-row", ""], ["matColumnDef", "MtxGridExpansionColumnDef"], ["mat-cell", "", 4, "matCellDef"], ["mat-row", "", 3, "ngClass", 4, "matRowDef", "matRowDefColumns"], ["mat-cell", ""], [1, "mtx-grid-expanison-detail"], ["mat-row", "", 3, "ngClass"], [1, "mtx-grid-sidebar"], [1, "mtx-grid-no-result"], ["defaultNoResultTpl", ""]], template: function MtxGridComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, MtxGridComponent_mat_progress_bar_0_Template, 1, 0, "mat-progress-bar", 0);
        ɵngcc0.ɵɵtemplate(1, MtxGridComponent_div_1_Template, 6, 3, "div", 1);
        ɵngcc0.ɵɵelementStart(2, "div", 2);
        ɵngcc0.ɵɵelementStart(3, "div", 3);
        ɵngcc0.ɵɵelementStart(4, "table", 4);
        ɵngcc0.ɵɵlistener("matSortChange", function MtxGridComponent_Template_table_matSortChange_4_listener($event) { return ctx._handleSortChange($event); });
        ɵngcc0.ɵɵtemplate(5, MtxGridComponent_ng_container_5_Template, 4, 0, "ng-container", 5);
        ɵngcc0.ɵɵtemplate(6, MtxGridComponent_ng_container_6_Template, 5, 3, "ng-container", 6);
        ɵngcc0.ɵɵtemplate(7, MtxGridComponent_tr_7_Template, 1, 0, "tr", 7);
        ɵngcc0.ɵɵtemplate(8, MtxGridComponent_tr_8_Template, 1, 4, "tr", 8);
        ɵngcc0.ɵɵtemplate(9, MtxGridComponent_ng_container_9_Template, 2, 2, "ng-container", 9);
        ɵngcc0.ɵɵtemplate(10, MtxGridComponent_ng_container_10_Template, 4, 2, "ng-container", 9);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(11, MtxGridComponent_div_11_Template, 1, 0, "div", 10);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(12, "mat-paginator", 11);
        ɵngcc0.ɵɵlistener("page", function MtxGridComponent_Template_mat_paginator_page_12_listener($event) { return ctx.page.emit($event); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(13, MtxGridComponent_div_13_Template, 4, 2, "div", 12);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngIf", ctx.loading);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.showToolbar);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction3(24, _c10, ctx.rowHover, ctx.rowStriped, ctx.expandable))("dataSource", ctx.dataSource)("multiTemplateDataRows", ctx.expandable)("trackBy", ctx.trackBy);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.rowSelectable && !ctx.hideRowSelectionCheckbox);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.columns);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("matHeaderRowDef", ctx.displayedColumns)("matHeaderRowDefSticky", true);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("matRowDefColumns", ctx.displayedColumns);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx._whetherShowSummary);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.expandable);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.showSidebar);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵclassProp("mat-paginator-hidden", !ctx.showPaginator || ctx._hasNoResult);
        ɵngcc0.ɵɵproperty("showFirstLastButtons", ctx.showFirstLastButtons)("length", ctx.length)("pageIndex", ctx.pageIndex)("pageSize", ctx.pageSize)("pageSizeOptions", ctx.pageSizeOptions)("hidePageSize", ctx.hidePageSize)("disabled", ctx.pageDisabled);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx._hasNoResult);
    } }, directives: function () { return [ɵngcc1.NgIf, ɵngcc2.MatTable, ɵngcc3.MatSort, ɵngcc1.NgClass, ɵngcc1.NgForOf, ɵngcc2.MatHeaderRowDef, ɵngcc2.MatRowDef, ɵngcc4.MatPaginator, ɵngcc5.MatProgressBar, ɵngcc1.NgTemplateOutlet, MtxGridColumnMenuComponent, ɵngcc2.MatColumnDef, ɵngcc2.MatHeaderCellDef, ɵngcc2.MatCellDef, ɵngcc2.MatFooterCellDef, ɵngcc2.MatHeaderCell, ɵngcc6.MatCheckbox, ɵngcc2.MatCell, ɵngcc2.MatFooterCell, ɵngcc1.NgStyle, ɵngcc3.MatSortHeader, ɵngcc7.MatIcon, MtxGridCellSelectionDirective,
        MtxGridCellComponent, ɵngcc8.MatButton, MtxGridExpansionToggleDirective, ɵngcc2.MatHeaderRow, ɵngcc2.MatRow, ɵngcc2.MatFooterRowDef, ɵngcc2.MatFooterRow]; }, styles: [".mtx-grid{position:relative;display:block;width:100%;border:1px solid rgba(0,0,0,.15)}.mtx-grid .mtx-grid-progress{position:absolute;top:0;z-index:109}.mtx-grid .mtx-grid-toolbar{display:flex;justify-content:space-between;align-items:center;min-height:48px;padding:8px;border-bottom:1px solid rgba(0,0,0,.15)}.mtx-grid .mtx-grid-layout{display:flex;flex:1 1 auto;overflow:auto}.mtx-grid .mtx-grid-content{width:0}.mtx-grid .mtx-grid-sidebar{width:30px;border-left:1px solid rgba(0,0,0,.15)}[dir=rtl] .mtx-grid .mtx-grid-sidebar{border-left:none;border-right:1px solid rgba(0,0,0,.15)}.mtx-grid .mat-table{flex:none;min-width:100%;border-collapse:separate}.mtx-grid .mat-table.mat-table-striped .mat-row-odd{background-color:rgba(0,0,0,.03)}.mtx-grid .mat-table.mat-table-hover .mat-row:hover{background-color:rgba(0,0,0,.05)}.mtx-grid .mat-footer-row,.mtx-grid .mat-header-row,.mtx-grid .mat-row{align-items:stretch}.mtx-grid .mat-cell,.mtx-grid .mat-footer-cell,.mtx-grid .mat-header-cell{min-width:80px;padding:4px 10px;box-sizing:border-box}.mtx-grid .mat-cell:first-of-type,.mtx-grid .mat-footer-cell:first-of-type,.mtx-grid .mat-header-cell:first-of-type{padding-left:24px}.mtx-grid .mat-cell:first-of-type.mtx-grid-checkbox-cell,.mtx-grid .mat-footer-cell:first-of-type.mtx-grid-checkbox-cell,.mtx-grid .mat-header-cell:first-of-type.mtx-grid-checkbox-cell{padding-left:10px;padding-right:10px}[dir=rtl] .mtx-grid .mat-cell:first-of-type,[dir=rtl] .mtx-grid .mat-footer-cell:first-of-type,[dir=rtl] .mtx-grid .mat-header-cell:first-of-type{padding-left:4px;padding-right:24px}[dir=rtl] .mtx-grid .mat-cell:first-of-type.mtx-grid-checkbox-cell,[dir=rtl] .mtx-grid .mat-footer-cell:first-of-type.mtx-grid-checkbox-cell,[dir=rtl] .mtx-grid .mat-header-cell:first-of-type.mtx-grid-checkbox-cell{padding-left:10px;padding-right:10px}.mtx-grid .mat-cell:last-of-type,.mtx-grid .mat-footer-cell:last-of-type,.mtx-grid .mat-header-cell:last-of-type{padding-right:24px}[dir=rtl] .mtx-grid .mat-cell:last-of-type,[dir=rtl] .mtx-grid .mat-footer-cell:last-of-type,[dir=rtl] .mtx-grid .mat-header-cell:last-of-type{padding-left:24px;padding-right:4px}.mtx-grid .mat-table-sticky-left,.mtx-grid .mat-table-sticky-right{flex:none}.mtx-grid .mat-table-sticky-left{border-right:1px solid rgba(0,0,0,.15)}[dir=rtl] .mtx-grid .mat-table-sticky-left{border-right-width:0;border-left:1px solid rgba(0,0,0,.15)}.mtx-grid .mat-table-sticky-right{border-left:1px solid rgba(0,0,0,.15)}[dir=rtl] .mtx-grid .mat-table-sticky-right{border-left-width:0;border-right:1px solid rgba(0,0,0,.15)}.mtx-grid .mtx-grid-expanison{height:0;overflow:hidden}.mtx-grid .mtx-grid-expanison .mat-cell{padding-top:0;padding-bottom:0}.mtx-grid .mtx-grid-expanison.collapsed .mat-cell{border-bottom-width:0}.mtx-grid .mtx-grid-expanison-detail{display:flex;align-items:center;min-height:48px;overflow:hidden}.mtx-grid .mtx-grid-expanison-placeholder{display:inline-block;width:40px;height:40px;vertical-align:middle}.mtx-grid .mat-row.selected{background-color:rgba(0,0,0,.05)}.mtx-grid .mat-row:last-of-type .mat-cell{border-bottom-width:0}.mtx-grid .mat-cell .mat-cell-img{width:30px;border-radius:4px;cursor:pointer}.mtx-grid .mat-cell .mat-chip{color:rgba(0,0,0,.87)}.mtx-grid .mat-cell .mat-cell-action-button .mat-icon{width:18px;height:18px;font-size:18px;line-height:18px}.mtx-grid .mat-cell .mat-icon-button.expanded .mat-icon{transform:rotate(90deg)}.mtx-grid .mat-cell.selected{box-shadow:inset 0 0 0 1px #29b6f6}.mtx-grid .mat-paginator{border-top:1px solid rgba(0,0,0,.15)}.mtx-grid .mat-paginator-hidden{display:none}.mtx-grid .mtx-grid-checkbox-cell{flex:none;justify-content:center;min-width:40px}.mtx-grid .mtx-grid-checkbox-cell .mat-checkbox{display:flex}.mtx-grid .mtx-grid-checkbox-cell .mat-checkbox-inner-container{margin-left:0}.mtx-grid .mtx-grid-no-result{display:flex;justify-content:center;align-items:center;min-height:150px}.mtx-grid .mat-sort-header-icon{width:18px;height:18px;margin:0 4px;font-size:18px}.mtx-grid .mat-header-cell-inner{display:flex;align-items:center}.mtx-grid .mat-footer-row .mat-footer-cell{border-bottom-width:0;border-top:1px solid rgba(0,0,0,.12);background-color:rgba(0,0,0,.06)}"], encapsulation: 2, data: { animation: [
            trigger('expansion', [
                state('collapsed', style({ height: '0', minHeight: '0', visibility: 'hidden' })),
                state('expanded', style({ height: '*', visibility: 'visible' })),
                transition('expanded <=> collapsed', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)')),
            ]),
        ] }, changeDetection: 0 });
/** @nocollapse */
MtxGridComponent.ctorParameters = () => [
    { type: MtxGridService }
];
MtxGridComponent.propDecorators = {
    paginator: [{ type: ViewChild, args: [MatPaginator, { static: true },] }],
    sort: [{ type: ViewChild, args: [MatSort, { static: true },] }],
    displayedColumns: [{ type: Input }],
    columns: [{ type: Input }],
    data: [{ type: Input }],
    length: [{ type: Input }],
    loading: [{ type: Input }],
    trackBy: [{ type: Input }],
    tooltip: [{ type: Input }],
    pageOnFront: [{ type: Input }],
    showPaginator: [{ type: Input }],
    pageDisabled: [{ type: Input }],
    showFirstLastButtons: [{ type: Input }],
    pageIndex: [{ type: Input }],
    pageSize: [{ type: Input }],
    pageSizeOptions: [{ type: Input }],
    hidePageSize: [{ type: Input }],
    page: [{ type: Output }],
    sortOnFront: [{ type: Input }],
    sortChange: [{ type: Output }],
    rowHover: [{ type: Input }],
    rowStriped: [{ type: Input }],
    expandable: [{ type: Input }],
    expansionTemplate: [{ type: Input }],
    expansionChange: [{ type: Output }],
    multiSelectable: [{ type: Input }],
    rowSelected: [{ type: Input }],
    rowSelectable: [{ type: Input }],
    hideRowSelectionCheckbox: [{ type: Input }],
    rowSelectionFormatter: [{ type: Input }],
    rowClassFormatter: [{ type: Input }],
    rowSelectionChange: [{ type: Output }],
    cellSelectable: [{ type: Input }],
    cellSelectionChange: [{ type: Output }],
    showToolbar: [{ type: Input }],
    toolbarTitle: [{ type: Input }],
    toolbarTemplate: [{ type: Input }],
    showColumnMenuButton: [{ type: Input }],
    columnMenuButtonText: [{ type: Input }],
    columnMenuButtonType: [{ type: Input }],
    columnMenuButtonColor: [{ type: Input }],
    columnMenuButtonClass: [{ type: Input }],
    columnMenuButtonIcon: [{ type: Input }],
    columnHideable: [{ type: Input }],
    columnHidingChecked: [{ type: Input }],
    columnHidingChange: [{ type: Output }],
    columnMovable: [{ type: Input }],
    columnMovingChange: [{ type: Output }],
    columnPinnable: [{ type: Input }],
    columnPinningChange: [{ type: Output }],
    noResultText: [{ type: Input }],
    noResultTemplate: [{ type: Input }],
    headerTemplate: [{ type: Input }],
    cellTemplate: [{ type: Input }],
    showSummary: [{ type: Input }],
    summaryTemplate: [{ type: Input }],
    showSidebar: [{ type: Input }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MtxGridComponent, [{
        type: Component,
        args: [{
                selector: 'mtx-grid',
                exportAs: 'mtxGrid',
                template: "<!-- Progress Bar-->\r\n<mat-progress-bar class=\"mtx-grid-progress\" mode=\"indeterminate\" *ngIf=\"loading\"></mat-progress-bar>\r\n\r\n<!-- Toolbar -->\r\n<div class=\"mtx-grid-toolbar\" *ngIf=\"showToolbar\">\r\n  <div class=\"mtx-grid-toolbar-title\" *ngIf=\"toolbarTitle\">{{toolbarTitle}}</div>\r\n  <div class=\"mtx-grid-toolbar-template\">\r\n    <ng-template [ngIf]=\"toolbarTemplate\">\r\n      <ng-template [ngTemplateOutlet]=\"toolbarTemplate\"></ng-template>\r\n    </ng-template>\r\n  </div>\r\n  <div class=\"mtx-grid-toolbar-actions\">\r\n    <mtx-grid-column-menu *ngIf=\"showColumnMenuButton\"\r\n                          [columns]=\"columnMenuData\"\r\n                          [buttonText]=\"columnMenuButtonText\"\r\n                          [buttonType]=\"columnMenuButtonType\"\r\n                          [buttonColor]=\"columnMenuButtonColor\"\r\n                          [buttonClass]=\"columnMenuButtonClass\"\r\n                          [buttonIcon]=\"columnMenuButtonIcon\"\r\n                          [selectable]=\"columnHideable\"\r\n                          [selectedType]=\"columnHidingChecked\"\r\n                          [sortable]=\"columnMovable\"\r\n                          (selectionChange)=\"_handleColumnHidingChange($event)\"\r\n                          (sortChange)=\"_handleColumnMovingChange($event)\">\r\n    </mtx-grid-column-menu>\r\n  </div>\r\n</div>\r\n\r\n<div class=\"mtx-grid-main mtx-grid-layout\">\r\n  <!-- Table Content -->\r\n  <div class=\"mtx-grid-content mtx-grid-layout\">\r\n    <table mat-table\r\n           [ngClass]=\"{'mat-table-hover': rowHover, 'mat-table-striped': rowStriped, 'mat-table-expandable': expandable}\"\r\n           [dataSource]=\"dataSource\" [multiTemplateDataRows]=\"expandable\"\r\n           matSort (matSortChange)=\"_handleSortChange($event)\" [trackBy]=\"trackBy\">\r\n\r\n      <ng-container *ngIf=\"rowSelectable && !hideRowSelectionCheckbox\"\r\n                    matColumnDef=\"MtxGridCheckboxColumnDef\">\r\n        <th mat-header-cell *matHeaderCellDef class=\"mtx-grid-checkbox-cell\">\r\n          <mat-checkbox *ngIf=\"multiSelectable\"\r\n                        [checked]=\"rowSelection.hasValue() && _isAllSelected()\"\r\n                        [indeterminate]=\"rowSelection.hasValue() && !_isAllSelected()\"\r\n                        (change)=\"$event ? _toggleMasterCheckbox() : null\">\r\n          </mat-checkbox>\r\n        </th>\r\n        <td mat-cell *matCellDef=\"let row;\" class=\"mtx-grid-checkbox-cell\">\r\n          <mat-checkbox *ngIf=\"!(rowSelectionFormatter.hideCheckbox && rowSelectionFormatter.hideCheckbox(row))\"\r\n                        [disabled]=\"rowSelectionFormatter.disabled && rowSelectionFormatter.disabled(row)\"\r\n                        [checked]=\"rowSelection.isSelected(row)\"\r\n                        (click)=\"$event.stopPropagation()\"\r\n                        (change)=\"$event ? _toggleNormalCheckbox(row) : null\">\r\n          </mat-checkbox>\r\n        </td>\r\n        <td mat-footer-cell *matFooterCellDef></td>\r\n      </ng-container>\r\n\r\n      <ng-container *ngFor=\"let col of columns;\">\r\n        <ng-container [matColumnDef]=\"col.field\"\r\n                      [sticky]=\"col.pinned==='left'\"\r\n                      [stickyEnd]=\"col.pinned==='right'\">\r\n\r\n          <th mat-header-cell *matHeaderCellDef\r\n              [ngClass]=\"{'mat-table-sticky-left': col.pinned === 'left', 'mat-table-sticky-right': col.pinned === 'right'}\"\r\n              [ngStyle]=\"{'width': col.width, 'min-width': col.width, 'left': col.left, 'right': col.right}\">\r\n            <div class=\"mat-header-cell-inner\">\r\n\r\n              <ng-template [ngIf]=\"_isTemplateRef(headerTemplate)\" [ngIfElse]=\"headerTpl\">\r\n                <ng-template [ngTemplateOutlet]=\"headerTemplate\"\r\n                             [ngTemplateOutletContext]=\"{ $implicit: col, colDef: col }\">\r\n                </ng-template>\r\n              </ng-template>\r\n              <ng-template #headerTpl>\r\n                <ng-template [ngIf]=\"headerTemplate && _isTemplateRef(headerTemplate[col.field])\"\r\n                             [ngIfElse]=\"defaultHeaderTpl\">\r\n                  <ng-template [ngTemplateOutlet]=\"headerTemplate[col.field]\"\r\n                               [ngTemplateOutletContext]=\"{ $implicit: col, colDef: col }\">\r\n                  </ng-template>\r\n                </ng-template>\r\n              </ng-template>\r\n              <ng-template #defaultHeaderTpl>\r\n                <div mat-sort-header [disabled]=\"!col.sortable\">\r\n                  <span class=\"mtx-grid-expanison-placeholder\" *ngIf=\"col.showExpand\"></span>\r\n                  <span>{{col.header}}</span>\r\n                  <mat-icon class=\"mat-sort-header-icon\" *ngIf=\"col.sortable\">sort</mat-icon>\r\n                </div>\r\n              </ng-template>\r\n\r\n            </div>\r\n          </th>\r\n\r\n          <td mat-cell *matCellDef=\"let row; let index = index; let dataIndex = dataIndex;\"\r\n              [ngClass]=\"{'mat-table-sticky-left': col.pinned === 'left', 'mat-table-sticky-right': col.pinned === 'right'}\"\r\n              [ngStyle]=\"{'width': col.width, 'min-width': col.width, 'left': col.left, 'right': col.right}\"\r\n              mtx-selectable-cell (cellSelectionChange)=\"_selectCell($event, row, col)\">\r\n\r\n            <ng-template [ngIf]=\"_isTemplateRef(cellTemplate)\" [ngIfElse]=\"cellTpl\">\r\n              <ng-template [ngTemplateOutlet]=\"cellTemplate\"\r\n                           [ngTemplateOutletContext]=\"{ $implicit: row, rowData: row, index: _getIndex(index, dataIndex), colDef: col }\">\r\n              </ng-template>\r\n            </ng-template>\r\n            <ng-template #cellTpl>\r\n              <ng-template [ngIf]=\"cellTemplate && _isTemplateRef(cellTemplate[col.field])\"\r\n                           [ngIfElse]=\"colDefCellTpl\">\r\n                <ng-template [ngTemplateOutlet]=\"cellTemplate[col.field]\"\r\n                             [ngTemplateOutletContext]=\"{ $implicit: row, rowData: row, index: _getIndex(index, dataIndex), colDef: col }\">\r\n                </ng-template>\r\n              </ng-template>\r\n            </ng-template>\r\n            <ng-template #colDefCellTpl>\r\n              <ng-template [ngIf]=\"col.cellTemplate\" [ngIfElse]=\"defaultCellTpl\"\r\n                           [ngTemplateOutlet]=\"col.cellTemplate\"\r\n                           [ngTemplateOutletContext]=\"{ $implicit: row, rowData: row, index: _getIndex(index, dataIndex), colDef: col }\">\r\n              </ng-template>\r\n            </ng-template>\r\n            <ng-template #defaultCellTpl>\r\n              <button *ngIf=\"col.showExpand\" mat-icon-button mtx-expansion-toggle\r\n                      (toggleChange)=\"_handleExpansionChange($event, row, col, dataIndex);\">\r\n                <mat-icon>keyboard_arrow_right</mat-icon>\r\n              </button>\r\n\r\n              <mtx-grid-cell [rowData]=\"row\" [colDef]=\"col\"></mtx-grid-cell>\r\n            </ng-template>\r\n\r\n          </td>\r\n\r\n          <td mat-footer-cell *matFooterCellDef\r\n              [ngClass]=\"{'mat-table-sticky-left': col.pinned === 'left', 'mat-table-sticky-right': col.pinned === 'right'}\"\r\n              [ngStyle]=\"{'width': col.width, 'min-width': col.width, 'left': col.left, 'right': col.right}\">\r\n            <span class=\"mtx-grid-expanison-placeholder\" *ngIf=\"col.showExpand\"></span>\r\n\r\n            <ng-template [ngIf]=\"_isTemplateRef(summaryTemplate)\" [ngIfElse]=\"summaryTpl\">\r\n              <ng-template [ngTemplateOutlet]=\"summaryTemplate\"\r\n                           [ngTemplateOutletContext]=\"{ $implicit: col, colDef: col, data: data }\">\r\n              </ng-template>\r\n            </ng-template>\r\n            <ng-template #summaryTpl>\r\n              <ng-template [ngIf]=\"summaryTemplate && _isTemplateRef(summaryTemplate[col.field])\"\r\n                           [ngIfElse]=\"defaultSummaryTpl\">\r\n                <ng-template [ngTemplateOutlet]=\"summaryTemplate[col.field]\"\r\n                             [ngTemplateOutletContext]=\"{ $implicit: _getColData(data, col), colData: _getColData(data, col), colDef: col }\">\r\n                </ng-template>\r\n              </ng-template>\r\n            </ng-template>\r\n            <ng-template #defaultSummaryTpl>\r\n              <span [innerHTML]=\"_formatSummary(col.summary, data, col)\"></span>\r\n            </ng-template>\r\n\r\n          </td>\r\n        </ng-container>\r\n      </ng-container>\r\n\r\n      <tr mat-header-row *matHeaderRowDef=\"displayedColumns; sticky: true\"></tr>\r\n      <tr mat-row\r\n          *matRowDef=\"let row; let index = index; let dataIndex = dataIndex; columns: displayedColumns;\"\r\n          [ngClass]=\"{'selected': rowSelection.isSelected(row), 'mat-row-odd': _isOddRow(index, dataIndex)}\"\r\n          (click)=\"_selectRow($event, row)\">\r\n      </tr>\r\n      <ng-container *ngIf=\"_whetherShowSummary\">\r\n        <tr mat-footer-row *matFooterRowDef=\"displayedColumns; sticky: true\"></tr>\r\n      </ng-container>\r\n\r\n      <ng-container *ngIf=\"expandable\">\r\n        <!-- Expanded Content Column - The expandable row is made up of this one column that spans across all columns -->\r\n        <ng-container matColumnDef=\"MtxGridExpansionColumnDef\">\r\n          <td mat-cell *matCellDef=\"let row; let dataIndex = dataIndex\"\r\n              [attr.colspan]=\"displayedColumns.length\">\r\n            <div class=\"mtx-grid-expanison-detail\"\r\n                 [@expansion]=\"expansionRowStates[dataIndex].expanded ? 'expanded' : 'collapsed'\">\r\n              <ng-template [ngTemplateOutlet]=\"expansionTemplate\"\r\n                           [ngTemplateOutletContext]=\"{ $implicit: row, rowData: row, index: dataIndex }\">\r\n              </ng-template>\r\n            </div>\r\n          </td>\r\n        </ng-container>\r\n\r\n        <tr mat-row [ngClass]=\"{'mtx-grid-expanison': true,\r\n                                'expanded': expansionRowStates[dataIndex].expanded,\r\n                                'collapsed': !expansionRowStates[dataIndex].expanded}\"\r\n            *matRowDef=\"let row; columns: ['MtxGridExpansionColumnDef']; let dataIndex = dataIndex\">\r\n        </tr>\r\n      </ng-container>\r\n\r\n    </table>\r\n  </div>\r\n\r\n  <!-- Tool Sidebar -->\r\n  <div class=\"mtx-grid-sidebar\" *ngIf=\"showSidebar\"></div>\r\n</div>\r\n\r\n<!-- Paginator -->\r\n<mat-paginator [class.mat-paginator-hidden]=\"!showPaginator || _hasNoResult\"\r\n               [showFirstLastButtons]=\"showFirstLastButtons\"\r\n               [length]=\"length\"\r\n               [pageIndex]=\"pageIndex\"\r\n               [pageSize]=\"pageSize\"\r\n               [pageSizeOptions]=\"pageSizeOptions\"\r\n               [hidePageSize]=\"hidePageSize\"\r\n               (page)=\"page.emit($event)\"\r\n               [disabled]=\"pageDisabled\">\r\n</mat-paginator>\r\n\r\n<!-- No Result -->\r\n<div class=\"mtx-grid-no-result\" *ngIf=\"_hasNoResult\">\r\n  <ng-template [ngIf]=\"noResultTemplate\" [ngIfElse]=\"defaultNoResultTpl\">\r\n    <ng-template [ngTemplateOutlet]=\"noResultTemplate\"></ng-template>\r\n  </ng-template>\r\n  <ng-template #defaultNoResultTpl>{{noResultText}}</ng-template>\r\n</div>\r\n",
                host: {
                    class: 'mtx-grid'
                },
                encapsulation: ViewEncapsulation.None,
                changeDetection: ChangeDetectionStrategy.OnPush,
                animations: [
                    trigger('expansion', [
                        state('collapsed', style({ height: '0', minHeight: '0', visibility: 'hidden' })),
                        state('expanded', style({ height: '*', visibility: 'visible' })),
                        transition('expanded <=> collapsed', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)')),
                    ]),
                ],
                styles: [".mtx-grid{position:relative;display:block;width:100%;border:1px solid rgba(0,0,0,.15)}.mtx-grid .mtx-grid-progress{position:absolute;top:0;z-index:109}.mtx-grid .mtx-grid-toolbar{display:flex;justify-content:space-between;align-items:center;min-height:48px;padding:8px;border-bottom:1px solid rgba(0,0,0,.15)}.mtx-grid .mtx-grid-layout{display:flex;flex:1 1 auto;overflow:auto}.mtx-grid .mtx-grid-content{width:0}.mtx-grid .mtx-grid-sidebar{width:30px;border-left:1px solid rgba(0,0,0,.15)}[dir=rtl] .mtx-grid .mtx-grid-sidebar{border-left:none;border-right:1px solid rgba(0,0,0,.15)}.mtx-grid .mat-table{flex:none;min-width:100%;border-collapse:separate}.mtx-grid .mat-table.mat-table-striped .mat-row-odd{background-color:rgba(0,0,0,.03)}.mtx-grid .mat-table.mat-table-hover .mat-row:hover{background-color:rgba(0,0,0,.05)}.mtx-grid .mat-footer-row,.mtx-grid .mat-header-row,.mtx-grid .mat-row{align-items:stretch}.mtx-grid .mat-cell,.mtx-grid .mat-footer-cell,.mtx-grid .mat-header-cell{min-width:80px;padding:4px 10px;box-sizing:border-box}.mtx-grid .mat-cell:first-of-type,.mtx-grid .mat-footer-cell:first-of-type,.mtx-grid .mat-header-cell:first-of-type{padding-left:24px}.mtx-grid .mat-cell:first-of-type.mtx-grid-checkbox-cell,.mtx-grid .mat-footer-cell:first-of-type.mtx-grid-checkbox-cell,.mtx-grid .mat-header-cell:first-of-type.mtx-grid-checkbox-cell{padding-left:10px;padding-right:10px}[dir=rtl] .mtx-grid .mat-cell:first-of-type,[dir=rtl] .mtx-grid .mat-footer-cell:first-of-type,[dir=rtl] .mtx-grid .mat-header-cell:first-of-type{padding-left:4px;padding-right:24px}[dir=rtl] .mtx-grid .mat-cell:first-of-type.mtx-grid-checkbox-cell,[dir=rtl] .mtx-grid .mat-footer-cell:first-of-type.mtx-grid-checkbox-cell,[dir=rtl] .mtx-grid .mat-header-cell:first-of-type.mtx-grid-checkbox-cell{padding-left:10px;padding-right:10px}.mtx-grid .mat-cell:last-of-type,.mtx-grid .mat-footer-cell:last-of-type,.mtx-grid .mat-header-cell:last-of-type{padding-right:24px}[dir=rtl] .mtx-grid .mat-cell:last-of-type,[dir=rtl] .mtx-grid .mat-footer-cell:last-of-type,[dir=rtl] .mtx-grid .mat-header-cell:last-of-type{padding-left:24px;padding-right:4px}.mtx-grid .mat-table-sticky-left,.mtx-grid .mat-table-sticky-right{flex:none}.mtx-grid .mat-table-sticky-left{border-right:1px solid rgba(0,0,0,.15)}[dir=rtl] .mtx-grid .mat-table-sticky-left{border-right-width:0;border-left:1px solid rgba(0,0,0,.15)}.mtx-grid .mat-table-sticky-right{border-left:1px solid rgba(0,0,0,.15)}[dir=rtl] .mtx-grid .mat-table-sticky-right{border-left-width:0;border-right:1px solid rgba(0,0,0,.15)}.mtx-grid .mtx-grid-expanison{height:0;overflow:hidden}.mtx-grid .mtx-grid-expanison .mat-cell{padding-top:0;padding-bottom:0}.mtx-grid .mtx-grid-expanison.collapsed .mat-cell{border-bottom-width:0}.mtx-grid .mtx-grid-expanison-detail{display:flex;align-items:center;min-height:48px;overflow:hidden}.mtx-grid .mtx-grid-expanison-placeholder{display:inline-block;width:40px;height:40px;vertical-align:middle}.mtx-grid .mat-row.selected{background-color:rgba(0,0,0,.05)}.mtx-grid .mat-row:last-of-type .mat-cell{border-bottom-width:0}.mtx-grid .mat-cell .mat-cell-img{width:30px;border-radius:4px;cursor:pointer}.mtx-grid .mat-cell .mat-chip{color:rgba(0,0,0,.87)}.mtx-grid .mat-cell .mat-cell-action-button .mat-icon{width:18px;height:18px;font-size:18px;line-height:18px}.mtx-grid .mat-cell .mat-icon-button.expanded .mat-icon{transform:rotate(90deg)}.mtx-grid .mat-cell.selected{box-shadow:inset 0 0 0 1px #29b6f6}.mtx-grid .mat-paginator{border-top:1px solid rgba(0,0,0,.15)}.mtx-grid .mat-paginator-hidden{display:none}.mtx-grid .mtx-grid-checkbox-cell{flex:none;justify-content:center;min-width:40px}.mtx-grid .mtx-grid-checkbox-cell .mat-checkbox{display:flex}.mtx-grid .mtx-grid-checkbox-cell .mat-checkbox-inner-container{margin-left:0}.mtx-grid .mtx-grid-no-result{display:flex;justify-content:center;align-items:center;min-height:150px}.mtx-grid .mat-sort-header-icon{width:18px;height:18px;margin:0 4px;font-size:18px}.mtx-grid .mat-header-cell-inner{display:flex;align-items:center}.mtx-grid .mat-footer-row .mat-footer-cell{border-bottom-width:0;border-top:1px solid rgba(0,0,0,.12);background-color:rgba(0,0,0,.06)}"]
            }]
    }], function () { return [{ type: MtxGridService }]; }, { columns: [{
            type: Input
        }], data: [{
            type: Input
        }], length: [{
            type: Input
        }], loading: [{
            type: Input
        }], tooltip: [{
            type: Input
        }], pageOnFront: [{
            type: Input
        }], showPaginator: [{
            type: Input
        }], pageDisabled: [{
            type: Input
        }], showFirstLastButtons: [{
            type: Input
        }], pageIndex: [{
            type: Input
        }], pageSize: [{
            type: Input
        }], pageSizeOptions: [{
            type: Input
        }], hidePageSize: [{
            type: Input
        }], page: [{
            type: Output
        }], sortOnFront: [{
            type: Input
        }], sortChange: [{
            type: Output
        }], rowHover: [{
            type: Input
        }], rowStriped: [{
            type: Input
        }], expandable: [{
            type: Input
        }], expansionChange: [{
            type: Output
        }], multiSelectable: [{
            type: Input
        }], rowSelected: [{
            type: Input
        }], rowSelectable: [{
            type: Input
        }], hideRowSelectionCheckbox: [{
            type: Input
        }], rowSelectionFormatter: [{
            type: Input
        }], rowClassFormatter: [{
            type: Input
        }], rowSelectionChange: [{
            type: Output
        }], cellSelectable: [{
            type: Input
        }], cellSelectionChange: [{
            type: Output
        }], showToolbar: [{
            type: Input
        }], toolbarTitle: [{
            type: Input
        }], showColumnMenuButton: [{
            type: Input
        }], columnMenuButtonText: [{
            type: Input
        }], columnMenuButtonType: [{
            type: Input
        }], columnMenuButtonColor: [{
            type: Input
        }], columnMenuButtonClass: [{
            type: Input
        }], columnMenuButtonIcon: [{
            type: Input
        }], columnHideable: [{
            type: Input
        }], columnHidingChecked: [{
            type: Input
        }], columnHidingChange: [{
            type: Output
        }], columnMovable: [{
            type: Input
        }], columnMovingChange: [{
            type: Output
        }], columnPinnable: [{
            type: Input
        }], columnPinningChange: [{
            type: Output
        }], noResultText: [{
            type: Input
        }], showSummary: [{
            type: Input
        }], showSidebar: [{
            type: Input
        }], displayedColumns: [{
            type: Input
        }], paginator: [{
            type: ViewChild,
            args: [MatPaginator, { static: true }]
        }], sort: [{
            type: ViewChild,
            args: [MatSort, { static: true }]
        }], trackBy: [{
            type: Input
        }], expansionTemplate: [{
            type: Input
        }], toolbarTemplate: [{
            type: Input
        }], noResultTemplate: [{
            type: Input
        }], headerTemplate: [{
            type: Input
        }], cellTemplate: [{
            type: Input
        }], summaryTemplate: [{
            type: Input
        }] }); })();
if (false) {
    /** @type {?} */
    MtxGridComponent.prototype.paginator;
    /** @type {?} */
    MtxGridComponent.prototype.sort;
    /** @type {?} */
    MtxGridComponent.prototype.dataSource;
    /** @type {?} */
    MtxGridComponent.prototype.displayedColumns;
    /** @type {?} */
    MtxGridComponent.prototype.columns;
    /** @type {?} */
    MtxGridComponent.prototype.data;
    /** @type {?} */
    MtxGridComponent.prototype.length;
    /** @type {?} */
    MtxGridComponent.prototype.loading;
    /** @type {?} */
    MtxGridComponent.prototype.trackBy;
    /**
     * Whether to show tooltip on columns
     * @type {?}
     */
    MtxGridComponent.prototype.tooltip;
    /**
     * Whether to page on the front end
     * @type {?}
     */
    MtxGridComponent.prototype.pageOnFront;
    /** @type {?} */
    MtxGridComponent.prototype.showPaginator;
    /** @type {?} */
    MtxGridComponent.prototype.pageDisabled;
    /** @type {?} */
    MtxGridComponent.prototype.showFirstLastButtons;
    /** @type {?} */
    MtxGridComponent.prototype.pageIndex;
    /** @type {?} */
    MtxGridComponent.prototype.pageSize;
    /** @type {?} */
    MtxGridComponent.prototype.pageSizeOptions;
    /** @type {?} */
    MtxGridComponent.prototype.hidePageSize;
    /** @type {?} */
    MtxGridComponent.prototype.page;
    /**
     * Sort
     * @type {?}
     */
    MtxGridComponent.prototype.sortOnFront;
    /** @type {?} */
    MtxGridComponent.prototype.sortChange;
    /**
     * Hover & Striped style
     * @type {?}
     */
    MtxGridComponent.prototype.rowHover;
    /** @type {?} */
    MtxGridComponent.prototype.rowStriped;
    /**
     * Expandable row
     * @type {?}
     */
    MtxGridComponent.prototype.expansionRowStates;
    /** @type {?} */
    MtxGridComponent.prototype.expandable;
    /** @type {?} */
    MtxGridComponent.prototype.expansionTemplate;
    /** @type {?} */
    MtxGridComponent.prototype.expansionChange;
    /**
     * Whether support multiple row/cell selection
     * @type {?}
     */
    MtxGridComponent.prototype.multiSelectable;
    /**
     * Row selection
     * @type {?}
     */
    MtxGridComponent.prototype.rowSelection;
    /** @type {?} */
    MtxGridComponent.prototype.rowSelected;
    /** @type {?} */
    MtxGridComponent.prototype.rowSelectable;
    /** @type {?} */
    MtxGridComponent.prototype.hideRowSelectionCheckbox;
    /** @type {?} */
    MtxGridComponent.prototype.rowSelectionFormatter;
    /** @type {?} */
    MtxGridComponent.prototype.rowClassFormatter;
    /** @type {?} */
    MtxGridComponent.prototype.rowSelectionChange;
    /**
     * Cell selection
     * @type {?}
     */
    MtxGridComponent.prototype.cellSelection;
    /** @type {?} */
    MtxGridComponent.prototype.cellSelectable;
    /** @type {?} */
    MtxGridComponent.prototype.cellSelectionChange;
    /**
     * @type {?}
     * @private
     */
    MtxGridComponent.prototype._selectedCell;
    /**
     * Toolbar
     * @type {?}
     */
    MtxGridComponent.prototype.showToolbar;
    /** @type {?} */
    MtxGridComponent.prototype.toolbarTitle;
    /** @type {?} */
    MtxGridComponent.prototype.toolbarTemplate;
    /** @type {?} */
    MtxGridComponent.prototype.columnMenuData;
    /** @type {?} */
    MtxGridComponent.prototype.showColumnMenuButton;
    /** @type {?} */
    MtxGridComponent.prototype.columnMenuButtonText;
    /** @type {?} */
    MtxGridComponent.prototype.columnMenuButtonType;
    /** @type {?} */
    MtxGridComponent.prototype.columnMenuButtonColor;
    /** @type {?} */
    MtxGridComponent.prototype.columnMenuButtonClass;
    /** @type {?} */
    MtxGridComponent.prototype.columnMenuButtonIcon;
    /** @type {?} */
    MtxGridComponent.prototype.columnHideable;
    /** @type {?} */
    MtxGridComponent.prototype.columnHidingChecked;
    /** @type {?} */
    MtxGridComponent.prototype.columnHidingChange;
    /** @type {?} */
    MtxGridComponent.prototype.columnMovable;
    /** @type {?} */
    MtxGridComponent.prototype.columnMovingChange;
    /** @type {?} */
    MtxGridComponent.prototype.columnPinnable;
    /** @type {?} */
    MtxGridComponent.prototype.columnPinningChange;
    /**
     * No Result
     * @type {?}
     */
    MtxGridComponent.prototype.noResultText;
    /** @type {?} */
    MtxGridComponent.prototype.noResultTemplate;
    /**
     * thead
     * @type {?}
     */
    MtxGridComponent.prototype.headerTemplate;
    /**
     * tbody
     * @type {?}
     */
    MtxGridComponent.prototype.cellTemplate;
    /**
     * tfoot
     * @type {?}
     */
    MtxGridComponent.prototype.showSummary;
    /** @type {?} */
    MtxGridComponent.prototype.summaryTemplate;
    /**
     * Sidebar
     * @type {?}
     */
    MtxGridComponent.prototype.showSidebar;
    /**
     * @type {?}
     * @private
     */
    MtxGridComponent.prototype._dataGridSrv;
}

/**
 * @fileoverview added by tsickle
 * Generated from: cell.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class MtxGridCellComponent {
    /**
     * @param {?} _dialog
     * @param {?} _dataGridSrv
     */
    constructor(_dialog, _dataGridSrv) {
        this._dialog = _dialog;
        this._dataGridSrv = _dataGridSrv;
        /**
         * Row data
         */
        this.rowData = {};
        this._colValue = '';
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this._colValue = this._dataGridSrv.getCellValue(this.rowData, this.colDef);
    }
    /**
     * @param {?} event
     * @param {?} title
     * @param {?=} fn
     * @param {?=} data
     * @return {?}
     */
    _handleActionConfirm(event, title, fn, data) {
        event.preventDefault();
        event.stopPropagation();
        this._dialog.confirm(title, (/**
         * @return {?}
         */
        () => fn(data)));
    }
    /**
     * @param {?} event
     * @param {?} btn
     * @param {?} rowData
     * @return {?}
     */
    _handleActionClick(event, btn, rowData) {
        event.preventDefault();
        event.stopPropagation();
        btn.click(rowData);
    }
    /**
     * Preview big image
     * @param {?} urlStr
     * @param {?=} multi
     * @return {?}
     */
    _onPreview(urlStr, multi = false) {
        /** @type {?} */
        const imgs = [];
        /** @type {?} */
        let options = {};
        if (multi) {
            this._dataGridSrv.str2arr(urlStr).forEach((/**
             * @param {?} url
             * @param {?} index
             * @return {?}
             */
            (url, index) => {
                imgs.push({ title: index + 1, src: url });
            }));
        }
        else {
            this._dataGridSrv.str2arr(urlStr).forEach((/**
             * @param {?} url
             * @param {?} index
             * @return {?}
             */
            (url, index) => {
                imgs.push({ src: url });
            }));
            options = {
                title: false,
                footToolbar: ['zoomIn', 'zoomOut', 'rotateRight', 'rotateLeft', 'actualSize'],
            };
        }
        this._viewer = new PhotoViewer(imgs, options);
    }
}
MtxGridCellComponent.ɵfac = function MtxGridCellComponent_Factory(t) { return new (t || MtxGridCellComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc9.MtxDialog), ɵngcc0.ɵɵdirectiveInject(MtxGridService)); };
MtxGridCellComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MtxGridCellComponent, selectors: [["mtx-grid-cell"]], inputs: { rowData: "rowData", colDef: "colDef" }, exportAs: ["mtxGridCell"], decls: 3, vars: 2, consts: [[4, "ngIf", "ngIfElse"], ["defaultFormattingTpl", ""], [3, "innerHTML"], [3, "ngSwitch"], [4, "ngSwitchCase"], [4, "ngSwitchDefault"], ["tagEmptyTpl", ""], ["color", "primary", 3, "ngClass"], [1, "mat-cell-img", 3, "src", "click"], ["target", "_blank", 3, "href"], [4, "ngFor", "ngForOf"], [4, "ngIf"], ["btnDefaultTpl", ""], ["class", "mat-cell-action-button", "mat-button", "", 3, "color", "matTooltip", "click", 4, "ngIf"], ["class", "mat-cell-action-button", "mat-icon-button", "", 3, "color", "matTooltip", "click", 4, "ngIf"], ["mat-button", "", 1, "mat-cell-action-button", 3, "color", "matTooltip", "click"], ["mat-icon-button", "", 1, "mat-cell-action-button", 3, "color", "matTooltip", "click"]], template: function MtxGridCellComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, MtxGridCellComponent_ng_container_0_Template, 2, 1, "ng-container", 0);
        ɵngcc0.ɵɵtemplate(1, MtxGridCellComponent_ng_template_1_Template, 10, 9, "ng-template", null, 1, ɵngcc0.ɵɵtemplateRefExtractor);
    } if (rf & 2) {
        const _r1 = ɵngcc0.ɵɵreference(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.colDef.formatter)("ngIfElse", _r1);
    } }, directives: [ɵngcc1.NgIf, ɵngcc1.NgSwitch, ɵngcc1.NgSwitchCase, ɵngcc1.NgSwitchDefault, ɵngcc10.MatChipList, ɵngcc10.MatChip, ɵngcc1.NgClass, ɵngcc1.NgForOf, ɵngcc8.MatButton, ɵngcc11.MatTooltip, ɵngcc7.MatIcon], pipes: [ɵngcc1.DecimalPipe, ɵngcc1.CurrencyPipe, ɵngcc1.PercentPipe], encapsulation: 2 });
/** @nocollapse */
MtxGridCellComponent.ctorParameters = () => [
    { type: MtxDialog },
    { type: MtxGridService }
];
MtxGridCellComponent.propDecorators = {
    rowData: [{ type: Input }],
    colDef: [{ type: Input }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MtxGridCellComponent, [{
        type: Component,
        args: [{
                selector: 'mtx-grid-cell',
                exportAs: 'mtxGridCell',
                template: "<!-- Formatting -->\r\n<ng-container *ngIf=\"colDef.formatter; else defaultFormattingTpl\">\r\n  <span [innerHTML]=\"colDef.formatter(rowData, colDef)\"></span>\r\n</ng-container>\r\n\r\n<!-- TODO: -->\r\n<ng-template #defaultFormattingTpl>\r\n  <ng-container [ngSwitch]=\"colDef.type\">\r\n    <!-- Tag -->\r\n    <ng-container *ngSwitchCase=\"'tag'\">\r\n      <mat-chip-list *ngIf=\"colDef.tag[_colValue]; else tagEmptyTpl\">\r\n        <mat-chip color=\"primary\" [ngClass]=\"['bg-' + colDef.tag[_colValue].color]\">\r\n          {{colDef.tag[_colValue].text}}\r\n        </mat-chip>\r\n      </mat-chip-list>\r\n      <ng-template #tagEmptyTpl>{{_colValue}}</ng-template>\r\n    </ng-container>\r\n    <!-- Image -->\r\n    <ng-container *ngSwitchCase=\"'image'\">\r\n      <img class=\"mat-cell-img\" [src]=\"_colValue\" (click)=\"_onPreview(_colValue)\">\r\n    </ng-container>\r\n    <!-- Link -->\r\n    <ng-container *ngSwitchCase=\"'link'\">\r\n      <a [href]=\"_colValue\" target=\"_blank\">{{_colValue}}</a>\r\n    </ng-container>\r\n    <!-- Buttons -->\r\n    <ng-container *ngSwitchCase=\"'button'\">\r\n      <ng-container *ngFor=\"let btn of colDef.buttons; index as i; last as isLast;\">\r\n        <ng-container *ngIf=\"!btn.iif || btn.iif(rowData)\">\r\n          <ng-container *ngIf=\"btn.pop; else btnDefaultTpl\">\r\n            <button class=\"mat-cell-action-button\"\r\n                    *ngIf=\"btn.type==='basic'\"\r\n                    mat-button\r\n                    [color]=\"btn.color || 'primary'\"\r\n                    [matTooltip]=\"btn.tooltip\"\r\n                    (click)=\"_handleActionConfirm($event, btn.popTitle, btn.click, rowData)\">\r\n              <mat-icon *ngIf=\"btn.icon\">{{btn.icon}}</mat-icon> {{btn.text}}\r\n            </button>\r\n            <button class=\"mat-cell-action-button\"\r\n                    *ngIf=\"!btn.type || btn.type==='icon'\"\r\n                    mat-icon-button\r\n                    [color]=\"btn.color || 'primary'\"\r\n                    [matTooltip]=\"btn.tooltip\"\r\n                    (click)=\"_handleActionConfirm($event, btn.popTitle, btn.click, rowData)\">\r\n              <mat-icon>{{btn.icon}}</mat-icon>\r\n            </button>\r\n          </ng-container>\r\n          <ng-template #btnDefaultTpl>\r\n            <button class=\"mat-cell-action-button\"\r\n                    *ngIf=\"btn.type==='basic'\"\r\n                    mat-button\r\n                    [color]=\"btn.color || 'primary'\"\r\n                    [matTooltip]=\"btn.tooltip\"\r\n                    (click)=\"_handleActionClick($event, btn, rowData)\">\r\n              <mat-icon *ngIf=\"btn.icon\">{{btn.icon}}</mat-icon> {{btn.text}}\r\n            </button>\r\n            <button class=\"mat-cell-action-button\"\r\n                    *ngIf=\"!btn.type || btn.type==='icon'\"\r\n                    mat-icon-button\r\n                    [color]=\"btn.color || 'primary'\"\r\n                    [matTooltip]=\"btn.tooltip\"\r\n                    (click)=\"_handleActionClick($event, btn, rowData)\">\r\n              <mat-icon>{{btn.icon}}</mat-icon>\r\n            </button>\r\n          </ng-template>\r\n        </ng-container>\r\n      </ng-container>\r\n    </ng-container>\r\n    <!-- Number -->\r\n    <ng-container *ngSwitchCase=\"'number'\">\r\n      {{(_colValue | number) || '--'}}\r\n    </ng-container>\r\n    <!-- Currency -->\r\n    <ng-container *ngSwitchCase=\"'currency'\">\r\n      {{(_colValue | currency) || '--'}}\r\n    </ng-container>\r\n    <!-- Percent -->\r\n    <ng-container *ngSwitchCase=\"'percent'\">\r\n      {{(_colValue | percent) || '--'}}\r\n    </ng-container>\r\n    <!-- Boolean -->\r\n    <ng-container *ngSwitchCase=\"'boolean'\">\r\n      {{_colValue}}\r\n    </ng-container>\r\n    <!-- Default -->\r\n    <ng-container *ngSwitchDefault>\r\n      {{_colValue || '--'}}\r\n    </ng-container>\r\n  </ng-container>\r\n</ng-template>\r\n"
            }]
    }], function () { return [{ type: ɵngcc9.MtxDialog }, { type: MtxGridService }]; }, { rowData: [{
            type: Input
        }], colDef: [{
            type: Input
        }] }); })();
if (false) {
    /**
     * Row data
     * @type {?}
     */
    MtxGridCellComponent.prototype.rowData;
    /**
     * Column definition
     * @type {?}
     */
    MtxGridCellComponent.prototype.colDef;
    /** @type {?} */
    MtxGridCellComponent.prototype._colValue;
    /** @type {?} */
    MtxGridCellComponent.prototype._viewer;
    /**
     * @type {?}
     * @private
     */
    MtxGridCellComponent.prototype._dialog;
    /**
     * @type {?}
     * @private
     */
    MtxGridCellComponent.prototype._dataGridSrv;
}

/**
 * @fileoverview added by tsickle
 * Generated from: column-menu.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class MtxGridColumnMenuComponent {
    constructor() {
        this.columns = [];
        this.selectable = true;
        this.selectedType = 'show';
        this.sortable = true;
        this.dndSortable = true;
        this._buttonText = '';
        this.buttonType = 'stroked';
        this.buttonColor = '';
        this.buttonClass = '';
        this.buttonIcon = '';
        this.selectionChange = new EventEmitter();
        this.sortChange = new EventEmitter();
    }
    /**
     * @return {?}
     */
    get buttonText() {
        /** @type {?} */
        const defaultText = `Columns ${this.selectedType === 'show' ? 'Shown' : 'Hidden'}`;
        /** @type {?} */
        const text = this._buttonText ? this._buttonText : defaultText;
        return text;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set buttonText(value) {
        this._buttonText = value;
    }
    /**
     * @return {?}
     */
    get columnFields() {
        /** @type {?} */
        const fields = this.columns
            .filter((/**
         * @param {?} item
         * @return {?}
         */
        (item) => this.selectedType === 'show' ? item.show : !item.hide))
            .map((/**
         * @param {?} item
         * @return {?}
         */
        (item) => item.field));
        return fields;
    }
    /**
     * @return {?}
     */
    ngOnInit() { }
    /**
     * @param {?} event
     * @return {?}
     */
    _handleDroped(event) {
        moveItemInArray(this.columns, event.previousIndex, event.currentIndex);
        this.sortChange.emit(this.columnFields);
    }
    /**
     * @param {?} e
     * @return {?}
     */
    _handleSelection(e) {
        this.selectionChange.emit(this.columnFields);
    }
}
MtxGridColumnMenuComponent.ɵfac = function MtxGridColumnMenuComponent_Factory(t) { return new (t || MtxGridColumnMenuComponent)(); };
MtxGridColumnMenuComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MtxGridColumnMenuComponent, selectors: [["mtx-grid-column-menu"]], inputs: { columns: "columns", selectable: "selectable", selectedType: "selectedType", sortable: "sortable", dndSortable: "dndSortable", buttonType: "buttonType", buttonColor: "buttonColor", buttonClass: "buttonClass", buttonIcon: "buttonIcon", buttonText: "buttonText" }, outputs: { selectionChange: "selectionChange", sortChange: "sortChange" }, exportAs: ["mtxGridColumnMenu"], decls: 15, vars: 9, consts: [[3, "ngSwitch"], [4, "ngSwitchCase"], [4, "ngSwitchDefault"], [1, "mtx-grid-column-menu"], ["menu", "matMenu"], [1, "mtx-grid-column-menu-inner", 3, "click", "keydown"], ["class", "mtx-grid-column-menu-list", "cdkDropList", "", 3, "cdkDropListDropped", 4, "ngIf"], ["class", "mtx-grid-column-menu-list", 4, "ngIf"], ["checkboxList", ""], ["mat-raised-button", "", 3, "ngClass", "color", "matMenuTriggerFor"], [4, "ngIf"], ["mat-stroked-button", "", 3, "ngClass", "color", "matMenuTriggerFor"], ["mat-flat-button", "", 3, "ngClass", "color", "matMenuTriggerFor"], ["mat-icon-button", "", 3, "ngClass", "color", "matMenuTriggerFor"], ["mat-fab", "", 3, "ngClass", "color", "matMenuTriggerFor"], ["mat-mini-fab", "", 3, "ngClass", "color", "matMenuTriggerFor"], ["mat-button", "", 3, "ngClass", "color", "matMenuTriggerFor"], ["cdkDropList", "", 1, "mtx-grid-column-menu-list", 3, "cdkDropListDropped"], ["class", "mtx-grid-column-menu-item", "cdkDrag", "", 3, "cdkDragDisabled", 4, "ngFor", "ngForOf"], ["cdkDrag", "", 1, "mtx-grid-column-menu-item", 3, "cdkDragDisabled"], ["cdkDragHandle", ""], [3, "ngTemplateOutlet", "ngTemplateOutletContext"], [1, "mtx-grid-column-menu-list"], ["class", "mtx-grid-column-menu-item", 4, "ngFor", "ngForOf"], [1, "mtx-grid-column-menu-item"], ["class", "mtx-grid-column-menu-item-label", 3, "ngModel", "disabled", "ngModelChange", "change", 4, "ngIf"], ["class", "mtx-grid-column-menu-item-label", 4, "ngIf"], [1, "mtx-grid-column-menu-item-label", 3, "ngModel", "disabled", "ngModelChange", "change"], [1, "mtx-grid-column-menu-item-label"]], template: function MtxGridColumnMenuComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementContainerStart(0, 0);
        ɵngcc0.ɵɵtemplate(1, MtxGridColumnMenuComponent_ng_container_1_Template, 4, 5, "ng-container", 1);
        ɵngcc0.ɵɵtemplate(2, MtxGridColumnMenuComponent_ng_container_2_Template, 4, 5, "ng-container", 1);
        ɵngcc0.ɵɵtemplate(3, MtxGridColumnMenuComponent_ng_container_3_Template, 4, 5, "ng-container", 1);
        ɵngcc0.ɵɵtemplate(4, MtxGridColumnMenuComponent_ng_container_4_Template, 3, 4, "ng-container", 1);
        ɵngcc0.ɵɵtemplate(5, MtxGridColumnMenuComponent_ng_container_5_Template, 4, 5, "ng-container", 1);
        ɵngcc0.ɵɵtemplate(6, MtxGridColumnMenuComponent_ng_container_6_Template, 4, 5, "ng-container", 1);
        ɵngcc0.ɵɵtemplate(7, MtxGridColumnMenuComponent_ng_container_7_Template, 4, 5, "ng-container", 2);
        ɵngcc0.ɵɵelementContainerEnd();
        ɵngcc0.ɵɵelementStart(8, "mat-menu", 3, 4);
        ɵngcc0.ɵɵelementStart(10, "div", 5);
        ɵngcc0.ɵɵlistener("click", function MtxGridColumnMenuComponent_Template_div_click_10_listener($event) { return $event.stopPropagation(); })("keydown", function MtxGridColumnMenuComponent_Template_div_keydown_10_listener($event) { return $event.stopPropagation(); });
        ɵngcc0.ɵɵtemplate(11, MtxGridColumnMenuComponent_div_11_Template, 2, 1, "div", 6);
        ɵngcc0.ɵɵtemplate(12, MtxGridColumnMenuComponent_div_12_Template, 2, 1, "div", 7);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(13, MtxGridColumnMenuComponent_ng_template_13_Template, 2, 2, "ng-template", null, 8, ɵngcc0.ɵɵtemplateRefExtractor);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngSwitch", ctx.buttonType);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngSwitchCase", "raised");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngSwitchCase", "stroked");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngSwitchCase", "flat");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngSwitchCase", "icon");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngSwitchCase", "fab");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngSwitchCase", "mini-fab");
        ɵngcc0.ɵɵadvance(5);
        ɵngcc0.ɵɵproperty("ngIf", ctx.sortable);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.sortable);
    } }, directives: [ɵngcc1.NgSwitch, ɵngcc1.NgSwitchCase, ɵngcc1.NgSwitchDefault, ɵngcc12._MatMenu, ɵngcc1.NgIf, ɵngcc8.MatButton, ɵngcc1.NgClass, ɵngcc12.MatMenuTrigger, ɵngcc7.MatIcon, ɵngcc13.CdkDropList, ɵngcc1.NgForOf, ɵngcc13.CdkDrag, ɵngcc13.CdkDragHandle, ɵngcc1.NgTemplateOutlet, ɵngcc6.MatCheckbox, ɵngcc14.NgControlStatus, ɵngcc14.NgModel], styles: [".mtx-grid-column-menu .mat-menu-content{padding:0}.mtx-grid-column-menu-inner{padding:16px}.mtx-grid-column-menu-list{display:block;max-width:100%}.mtx-grid-column-menu-list.cdk-drop-list-dragging .mtx-grid-column-menu-item:not(.cdk-drag-placeholder){transition:transform 250ms cubic-bezier(0,0,.2,1)}.mtx-grid-column-menu-list.cdk-drop-list .mtx-grid-column-menu-item-label{padding:0 4px}.mtx-grid-column-menu-item{display:flex;flex-direction:row;align-items:center;padding:4px 0;color:rgba(0,0,0,.87)}.mtx-grid-column-menu-item.cdk-drag-disabled .cdk-drag-handle{opacity:.35;cursor:no-drop}.mtx-grid-column-menu-item .cdk-drag-handle{cursor:move}.mtx-grid-column-menu-item.cdk-drag-preview{box-shadow:0 3px 3px -2px rgba(0,0,0,.2),0 3px 4px 0 rgba(0,0,0,.14),0 1px 8px 0 rgba(0,0,0,.12)}.mtx-grid-column-menu-item.cdk-drag-placeholder{opacity:0}.mtx-grid-column-menu-item.cdk-drag-animating{transition:transform 250ms cubic-bezier(0,0,.2,1)}"], encapsulation: 2, changeDetection: 0 });
/** @nocollapse */
MtxGridColumnMenuComponent.ctorParameters = () => [];
MtxGridColumnMenuComponent.propDecorators = {
    columns: [{ type: Input }],
    selectable: [{ type: Input }],
    selectedType: [{ type: Input }],
    sortable: [{ type: Input }],
    dndSortable: [{ type: Input }],
    buttonText: [{ type: Input }],
    buttonType: [{ type: Input }],
    buttonColor: [{ type: Input }],
    buttonClass: [{ type: Input }],
    buttonIcon: [{ type: Input }],
    selectionChange: [{ type: Output }],
    sortChange: [{ type: Output }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MtxGridColumnMenuComponent, [{
        type: Component,
        args: [{
                selector: 'mtx-grid-column-menu',
                exportAs: 'mtxGridColumnMenu',
                template: "<ng-container [ngSwitch]=\"buttonType\">\r\n  <ng-container *ngSwitchCase=\"'raised'\">\r\n    <button [ngClass]=\"buttonClass\" mat-raised-button [color]=\"buttonColor\"\r\n            [matMenuTriggerFor]=\"menu\">\r\n      <mat-icon *ngIf=\"buttonIcon\">{{buttonIcon}}</mat-icon> {{buttonText}}\r\n    </button>\r\n  </ng-container>\r\n  <ng-container *ngSwitchCase=\"'stroked'\">\r\n    <button [ngClass]=\"buttonClass\" mat-stroked-button [color]=\"buttonColor\"\r\n            [matMenuTriggerFor]=\"menu\">\r\n      <mat-icon *ngIf=\"buttonIcon\">{{buttonIcon}}</mat-icon> {{buttonText}}\r\n    </button>\r\n  </ng-container>\r\n  <ng-container *ngSwitchCase=\"'flat'\">\r\n    <button [ngClass]=\"buttonClass\" mat-flat-button [color]=\"buttonColor\"\r\n            [matMenuTriggerFor]=\"menu\">\r\n      <mat-icon *ngIf=\"buttonIcon\">{{buttonIcon}}</mat-icon> {{buttonText}}\r\n    </button>\r\n  </ng-container>\r\n  <ng-container *ngSwitchCase=\"'icon'\">\r\n    <button [ngClass]=\"buttonClass\" mat-icon-button [color]=\"buttonColor\"\r\n            [matMenuTriggerFor]=\"menu\">\r\n      <mat-icon *ngIf=\"buttonIcon\">{{buttonIcon}}</mat-icon>\r\n    </button>\r\n  </ng-container>\r\n  <ng-container *ngSwitchCase=\"'fab'\">\r\n    <button [ngClass]=\"buttonClass\" mat-fab [color]=\"buttonColor\" [matMenuTriggerFor]=\"menu\">\r\n      <mat-icon *ngIf=\"buttonIcon\">{{buttonIcon}}</mat-icon> {{buttonText}}\r\n    </button>\r\n  </ng-container>\r\n  <ng-container *ngSwitchCase=\"'mini-fab'\">\r\n    <button [ngClass]=\"buttonClass\" mat-mini-fab [color]=\"buttonColor\"\r\n            [matMenuTriggerFor]=\"menu\">\r\n      <mat-icon *ngIf=\"buttonIcon\">{{buttonIcon}}</mat-icon> {{buttonText}}\r\n    </button>\r\n  </ng-container>\r\n  <ng-container *ngSwitchDefault>\r\n    <button [ngClass]=\"buttonClass\" mat-button [color]=\"buttonColor\" [matMenuTriggerFor]=\"menu\">\r\n      <mat-icon *ngIf=\"buttonIcon\">{{buttonIcon}}</mat-icon> {{buttonText}}\r\n    </button>\r\n  </ng-container>\r\n</ng-container>\r\n\r\n<mat-menu #menu=\"matMenu\" class=\"mtx-grid-column-menu\">\r\n  <div class=\"mtx-grid-column-menu-inner\"\r\n       (click)=\"$event.stopPropagation()\"\r\n       (keydown)=\"$event.stopPropagation()\">\r\n\r\n    <div class=\"mtx-grid-column-menu-list\"\r\n         cdkDropList (cdkDropListDropped)=\"_handleDroped($event)\"\r\n         *ngIf=\"sortable\">\r\n      <div class=\"mtx-grid-column-menu-item\" *ngFor=\"let col of columns\"\r\n           cdkDrag [cdkDragDisabled]=\"selectedType === 'show'? !col.show : col.hide\">\r\n        <mat-icon cdkDragHandle>drag_handle</mat-icon>\r\n        <ng-template [ngTemplateOutlet]=\"checkboxList\"\r\n                     [ngTemplateOutletContext]=\"{ $implicit: col }\">\r\n        </ng-template>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"mtx-grid-column-menu-list\" *ngIf=\"!sortable\">\r\n      <div class=\"mtx-grid-column-menu-item\" *ngFor=\"let col of columns\">\r\n        <ng-template [ngTemplateOutlet]=\"checkboxList\"\r\n                     [ngTemplateOutletContext]=\"{ $implicit: col }\">\r\n        </ng-template>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</mat-menu>\r\n\r\n<ng-template #checkboxList let-col>\r\n  <mat-checkbox class=\"mtx-grid-column-menu-item-label\"\r\n                *ngIf=\"selectable\"\r\n                [(ngModel)]=\"col[selectedType]\"\r\n                [disabled]=\"col.disabled\"\r\n                (change)=\"_handleSelection($event)\">\r\n    {{col.label}}\r\n  </mat-checkbox>\r\n  <span class=\"mtx-grid-column-menu-item-label\" *ngIf=\"!selectable\">{{col.label}}</span>\r\n</ng-template>\r\n",
                encapsulation: ViewEncapsulation.None,
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [".mtx-grid-column-menu .mat-menu-content{padding:0}.mtx-grid-column-menu-inner{padding:16px}.mtx-grid-column-menu-list{display:block;max-width:100%}.mtx-grid-column-menu-list.cdk-drop-list-dragging .mtx-grid-column-menu-item:not(.cdk-drag-placeholder){transition:transform 250ms cubic-bezier(0,0,.2,1)}.mtx-grid-column-menu-list.cdk-drop-list .mtx-grid-column-menu-item-label{padding:0 4px}.mtx-grid-column-menu-item{display:flex;flex-direction:row;align-items:center;padding:4px 0;color:rgba(0,0,0,.87)}.mtx-grid-column-menu-item.cdk-drag-disabled .cdk-drag-handle{opacity:.35;cursor:no-drop}.mtx-grid-column-menu-item .cdk-drag-handle{cursor:move}.mtx-grid-column-menu-item.cdk-drag-preview{box-shadow:0 3px 3px -2px rgba(0,0,0,.2),0 3px 4px 0 rgba(0,0,0,.14),0 1px 8px 0 rgba(0,0,0,.12)}.mtx-grid-column-menu-item.cdk-drag-placeholder{opacity:0}.mtx-grid-column-menu-item.cdk-drag-animating{transition:transform 250ms cubic-bezier(0,0,.2,1)}"]
            }]
    }], function () { return []; }, { columns: [{
            type: Input
        }], selectable: [{
            type: Input
        }], selectedType: [{
            type: Input
        }], sortable: [{
            type: Input
        }], dndSortable: [{
            type: Input
        }], buttonType: [{
            type: Input
        }], buttonColor: [{
            type: Input
        }], buttonClass: [{
            type: Input
        }], buttonIcon: [{
            type: Input
        }], selectionChange: [{
            type: Output
        }], sortChange: [{
            type: Output
        }], buttonText: [{
            type: Input
        }] }); })();
if (false) {
    /** @type {?} */
    MtxGridColumnMenuComponent.prototype.columns;
    /** @type {?} */
    MtxGridColumnMenuComponent.prototype.selectable;
    /** @type {?} */
    MtxGridColumnMenuComponent.prototype.selectedType;
    /** @type {?} */
    MtxGridColumnMenuComponent.prototype.sortable;
    /** @type {?} */
    MtxGridColumnMenuComponent.prototype.dndSortable;
    /**
     * @type {?}
     * @private
     */
    MtxGridColumnMenuComponent.prototype._buttonText;
    /** @type {?} */
    MtxGridColumnMenuComponent.prototype.buttonType;
    /** @type {?} */
    MtxGridColumnMenuComponent.prototype.buttonColor;
    /** @type {?} */
    MtxGridColumnMenuComponent.prototype.buttonClass;
    /** @type {?} */
    MtxGridColumnMenuComponent.prototype.buttonIcon;
    /** @type {?} */
    MtxGridColumnMenuComponent.prototype.selectionChange;
    /** @type {?} */
    MtxGridColumnMenuComponent.prototype.sortChange;
}

/**
 * @fileoverview added by tsickle
 * Generated from: expansion-toggle.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class MtxGridExpansionToggleDirective {
    constructor() {
        this._opened = false;
        this.toggleChange = new EventEmitter();
    }
    /**
     * @return {?}
     */
    get expended() {
        return this._opened;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set expandableRow(value) {
        if (value !== this._row) {
            this._row = value;
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set template(value) {
        if (value !== this._tplRef) {
            this._tplRef = value;
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onClick(event) {
        event.preventDefault();
        event.stopPropagation();
        this.toggle();
    }
    /**
     * @return {?}
     */
    toggle() {
        this._opened = !this._opened;
        this.toggleChange.emit(this);
    }
}
MtxGridExpansionToggleDirective.ɵfac = function MtxGridExpansionToggleDirective_Factory(t) { return new (t || MtxGridExpansionToggleDirective)(); };
MtxGridExpansionToggleDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MtxGridExpansionToggleDirective, selectors: [["", "mtx-expansion-toggle", ""]], hostVars: 2, hostBindings: function MtxGridExpansionToggleDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function MtxGridExpansionToggleDirective_click_HostBindingHandler($event) { return ctx.onClick($event); });
    } if (rf & 2) {
        ɵngcc0.ɵɵclassProp("expanded", ctx.expended);
    } }, inputs: { expandableRow: "expandableRow", template: ["expansionRowTpl", "template"] }, outputs: { toggleChange: "toggleChange" } });
/** @nocollapse */
MtxGridExpansionToggleDirective.ctorParameters = () => [];
MtxGridExpansionToggleDirective.propDecorators = {
    expended: [{ type: HostBinding, args: ['class.expanded',] }],
    expandableRow: [{ type: Input }],
    template: [{ type: Input, args: ['expansionRowTpl',] }],
    toggleChange: [{ type: Output }],
    onClick: [{ type: HostListener, args: ['click', ['$event'],] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MtxGridExpansionToggleDirective, [{
        type: Directive,
        args: [{
                selector: '[mtx-expansion-toggle]'
            }]
    }], function () { return []; }, { toggleChange: [{
            type: Output
        }], expended: [{
            type: HostBinding,
            args: ['class.expanded']
        }], expandableRow: [{
            type: Input
        }], template: [{
            type: Input,
            args: ['expansionRowTpl']
        }], onClick: [{
            type: HostListener,
            args: ['click', ['$event']]
        }] }); })();
if (false) {
    /**
     * @type {?}
     * @private
     */
    MtxGridExpansionToggleDirective.prototype._opened;
    /**
     * @type {?}
     * @private
     */
    MtxGridExpansionToggleDirective.prototype._row;
    /**
     * @type {?}
     * @private
     */
    MtxGridExpansionToggleDirective.prototype._tplRef;
    /** @type {?} */
    MtxGridExpansionToggleDirective.prototype.toggleChange;
}

/**
 * @fileoverview added by tsickle
 * Generated from: cell-selection.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class MtxGridCellSelectionDirective {
    /**
     * @param {?} _dataGrid
     */
    constructor(_dataGrid) {
        this._dataGrid = _dataGrid;
        this._selected = false;
        this.shiftKeyPressed = false;
        this.ctrlKeyPressed = false;
        this.cellSelectionChange = new EventEmitter();
    }
    /**
     * @return {?}
     */
    get selected() {
        return this._selected;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set matSelectableRowData(value) {
        if (value !== this._rowData) {
            this._rowData = value;
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onClick(event) {
        this.ctrlKeyPressed = event.ctrlKey;
        this.shiftKeyPressed = event.shiftKey;
        if (this._dataGrid.cellSelectable) {
            this.select();
        }
    }
    /**
     * @return {?}
     */
    select() {
        this._selected = true;
        this.cellSelectionChange.emit(this);
    }
    /**
     * @return {?}
     */
    deselect() {
        this._selected = false;
        this.cellSelectionChange.emit(this);
    }
    /**
     * @return {?}
     */
    toggle() {
        this._selected = !this._selected;
        this.cellSelectionChange.emit(this);
    }
}
MtxGridCellSelectionDirective.ɵfac = function MtxGridCellSelectionDirective_Factory(t) { return new (t || MtxGridCellSelectionDirective)(ɵngcc0.ɵɵdirectiveInject(MtxGridComponent)); };
MtxGridCellSelectionDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MtxGridCellSelectionDirective, selectors: [["", "mtx-selectable-cell", ""]], hostVars: 2, hostBindings: function MtxGridCellSelectionDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function MtxGridCellSelectionDirective_click_HostBindingHandler($event) { return ctx.onClick($event); });
    } if (rf & 2) {
        ɵngcc0.ɵɵclassProp("selected", ctx.selected);
    } }, inputs: { matSelectableRowData: "matSelectableRowData" }, outputs: { cellSelectionChange: "cellSelectionChange" } });
/** @nocollapse */
MtxGridCellSelectionDirective.ctorParameters = () => [
    { type: MtxGridComponent }
];
MtxGridCellSelectionDirective.propDecorators = {
    selected: [{ type: HostBinding, args: ['class.selected',] }],
    matSelectableRowData: [{ type: Input }],
    cellSelectionChange: [{ type: Output }],
    onClick: [{ type: HostListener, args: ['click', ['$event'],] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MtxGridCellSelectionDirective, [{
        type: Directive,
        args: [{
                selector: '[mtx-selectable-cell]'
            }]
    }], function () { return [{ type: MtxGridComponent }]; }, { cellSelectionChange: [{
            type: Output
        }], selected: [{
            type: HostBinding,
            args: ['class.selected']
        }], matSelectableRowData: [{
            type: Input
        }], onClick: [{
            type: HostListener,
            args: ['click', ['$event']]
        }] }); })();
if (false) {
    /**
     * @type {?}
     * @private
     */
    MtxGridCellSelectionDirective.prototype._selected;
    /**
     * @type {?}
     * @private
     */
    MtxGridCellSelectionDirective.prototype._rowData;
    /** @type {?} */
    MtxGridCellSelectionDirective.prototype.shiftKeyPressed;
    /** @type {?} */
    MtxGridCellSelectionDirective.prototype.ctrlKeyPressed;
    /** @type {?} */
    MtxGridCellSelectionDirective.prototype.cellSelectionChange;
    /**
     * @type {?}
     * @private
     */
    MtxGridCellSelectionDirective.prototype._dataGrid;
}

/**
 * @fileoverview added by tsickle
 * Generated from: grid.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class MtxGridModule {
}
MtxGridModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MtxGridModule });
MtxGridModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MtxGridModule_Factory(t) { return new (t || MtxGridModule)(); }, providers: [MtxGridService], imports: [[
            CommonModule,
            FormsModule,
            MatTableModule,
            MatSortModule,
            MatPaginatorModule,
            MatCheckboxModule,
            MatButtonModule,
            MatProgressBarModule,
            MatChipsModule,
            MatTooltipModule,
            MatIconModule,
            MtxDialogModule,
            MatSelectModule,
            MatFormFieldModule,
            MatMenuModule,
            DragDropModule,
        ]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MtxGridModule, { declarations: function () { return [MtxGridComponent,
        MtxGridCellComponent,
        MtxGridColumnMenuComponent,
        MtxGridExpansionToggleDirective,
        MtxGridCellSelectionDirective]; }, imports: function () { return [CommonModule,
        FormsModule,
        MatTableModule,
        MatSortModule,
        MatPaginatorModule,
        MatCheckboxModule,
        MatButtonModule,
        MatProgressBarModule,
        MatChipsModule,
        MatTooltipModule,
        MatIconModule,
        MtxDialogModule,
        MatSelectModule,
        MatFormFieldModule,
        MatMenuModule,
        DragDropModule]; }, exports: function () { return [MtxGridComponent,
        MtxGridCellComponent,
        MtxGridColumnMenuComponent,
        MtxGridExpansionToggleDirective,
        MtxGridCellSelectionDirective]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MtxGridModule, [{
        type: NgModule,
        args: [{
                imports: [
                    CommonModule,
                    FormsModule,
                    MatTableModule,
                    MatSortModule,
                    MatPaginatorModule,
                    MatCheckboxModule,
                    MatButtonModule,
                    MatProgressBarModule,
                    MatChipsModule,
                    MatTooltipModule,
                    MatIconModule,
                    MtxDialogModule,
                    MatSelectModule,
                    MatFormFieldModule,
                    MatMenuModule,
                    DragDropModule,
                ],
                exports: [
                    MtxGridComponent,
                    MtxGridCellComponent,
                    MtxGridColumnMenuComponent,
                    MtxGridExpansionToggleDirective,
                    MtxGridCellSelectionDirective,
                ],
                declarations: [
                    MtxGridComponent,
                    MtxGridCellComponent,
                    MtxGridColumnMenuComponent,
                    MtxGridExpansionToggleDirective,
                    MtxGridCellSelectionDirective,
                ],
                providers: [MtxGridService]
            }]
    }], null, null); })();

/**
 * @fileoverview added by tsickle
 * Generated from: public-api.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: mtxGrid.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { MtxGridCellComponent, MtxGridCellSelectionDirective, MtxGridColumnMenuComponent, MtxGridComponent, MtxGridExpansionToggleDirective, MtxGridModule, MtxGridService };

//# sourceMappingURL=mtxGrid.js.map