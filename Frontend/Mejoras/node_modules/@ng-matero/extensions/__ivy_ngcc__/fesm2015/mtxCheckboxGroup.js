import { EventEmitter, Component, ViewEncapsulation, ChangeDetectionStrategy, forwardRef, ChangeDetectorRef, Input, Output, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';
import { MatCheckboxModule } from '@angular/material/checkbox';

/**
 * @fileoverview added by tsickle
 * Generated from: checkbox-group.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';
import * as ɵngcc2 from '@angular/material/checkbox';
import * as ɵngcc3 from '@angular/forms';

function MtxCheckboxGroupComponent_mat_checkbox_0_Template(rf, ctx) { if (rf & 1) {
    const _r3 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "mat-checkbox", 2);
    ɵngcc0.ɵɵlistener("indeterminateChange", function MtxCheckboxGroupComponent_mat_checkbox_0_Template_mat_checkbox_indeterminateChange_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r3); const ctx_r2 = ɵngcc0.ɵɵnextContext(); return ctx_r2.selectAllIndeterminate = $event; })("change", function MtxCheckboxGroupComponent_mat_checkbox_0_Template_mat_checkbox_change_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r3); const ctx_r4 = ɵngcc0.ɵɵnextContext(); return ctx_r4._updateMasterCheckboxState($event, 0 - 1); });
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("checked", ctx_r0.selectAll)("indeterminate", ctx_r0.selectAllIndeterminate)("disabled", ctx_r0.controlDisabled);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r0.selectAllLabel, "\n");
} }
function MtxCheckboxGroupComponent_mat_checkbox_1_Template(rf, ctx) { if (rf & 1) {
    const _r8 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "mat-checkbox", 3);
    ɵngcc0.ɵɵlistener("ngModelChange", function MtxCheckboxGroupComponent_mat_checkbox_1_Template_mat_checkbox_ngModelChange_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r8); const item_r5 = ctx.$implicit; return item_r5.checked = $event; })("change", function MtxCheckboxGroupComponent_mat_checkbox_1_Template_mat_checkbox_change_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r8); const i_r6 = ctx.index; const ctx_r9 = ɵngcc0.ɵɵnextContext(); return ctx_r9._updateNormalCheckboxState($event, i_r6); });
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const item_r5 = ctx.$implicit;
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngModel", item_r5.checked)("disabled", ctx_r1.controlDisabled || item_r5.disabled);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", item_r5.label, "\n");
} }
class MtxCheckboxGroupComponent {
    /**
     * @param {?} _changeDetectorRef
     */
    constructor(_changeDetectorRef) {
        this._changeDetectorRef = _changeDetectorRef;
        this.selectAllLabel = 'Select All';
        this.showSelectAll = true;
        this.change = new EventEmitter();
        this.selectAll = false;
        this.selectAllIndeterminate = false;
        this.options = [];
        this.controlDisabled = false;
        this._onChange = (/**
         * @return {?}
         */
        () => null);
        this._onTouched = (/**
         * @return {?}
         */
        () => null);
    }
    /**
     * @return {?}
     */
    ngOnInit() { }
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        if (value) {
            this.options = value;
        }
        this._checkMasterCheckboxState();
        this._changeDetectorRef.markForCheck();
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this._onChange = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this._onTouched = fn;
    }
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    setDisabledState(isDisabled) {
        this.controlDisabled = isDisabled;
    }
    /**
     * @private
     * @return {?}
     */
    _checkMasterCheckboxState() {
        if (this.options.filter((/**
         * @param {?} item
         * @return {?}
         */
        item => item.checked || !item.disabled)).every((/**
         * @param {?} item
         * @return {?}
         */
        item => !item.checked))) {
            this.selectAll = false;
            this.selectAllIndeterminate = false;
        }
        else if (this.options.filter((/**
         * @param {?} item
         * @return {?}
         */
        item => item.checked || !item.disabled)).every((/**
         * @param {?} item
         * @return {?}
         */
        item => item.checked))) {
            this.selectAll = true;
            this.selectAllIndeterminate = false;
        }
        else {
            this.selectAllIndeterminate = true;
        }
    }
    /**
     * @param {?=} e
     * @param {?=} index
     * @return {?}
     */
    _updateNormalCheckboxState(e, index) {
        this._checkMasterCheckboxState();
        this.change.emit({
            model: this.options,
            index,
        });
    }
    /**
     * @param {?=} e
     * @param {?=} index
     * @return {?}
     */
    _updateMasterCheckboxState(e, index) {
        this.selectAll = !this.selectAll;
        this.selectAllIndeterminate = false;
        if (this.selectAll) {
            this.options
                .filter((/**
             * @param {?} item
             * @return {?}
             */
            item => item.checked || !item.disabled))
                .forEach((/**
             * @param {?} item
             * @return {?}
             */
            item => (item.checked = true)));
        }
        else {
            this.options
                .filter((/**
             * @param {?} item
             * @return {?}
             */
            item => item.checked || !item.disabled))
                .forEach((/**
             * @param {?} item
             * @return {?}
             */
            item => (item.checked = !!item.disabled)));
        }
        this.change.emit({
            model: this.options,
            index,
        });
    }
}
MtxCheckboxGroupComponent.ɵfac = function MtxCheckboxGroupComponent_Factory(t) { return new (t || MtxCheckboxGroupComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };
MtxCheckboxGroupComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MtxCheckboxGroupComponent, selectors: [["mtx-checkbox-group"]], hostAttrs: [1, "mtx-checkbox-group"], inputs: { selectAllLabel: "selectAllLabel", showSelectAll: "showSelectAll" }, outputs: { change: "change" }, exportAs: ["mtxCheckboxGroup"], features: [ɵngcc0.ɵɵProvidersFeature([
            {
                provide: NG_VALUE_ACCESSOR,
                useExisting: forwardRef(( /**
                 * @return {?}
                 */() => MtxCheckboxGroupComponent)),
                multi: true
            },
        ])], decls: 2, vars: 2, consts: [["class", "mtx-checkbox-master", 3, "checked", "indeterminate", "disabled", "indeterminateChange", "change", 4, "ngIf"], ["class", "mtx-checkbox-normal", 3, "ngModel", "disabled", "ngModelChange", "change", 4, "ngFor", "ngForOf"], [1, "mtx-checkbox-master", 3, "checked", "indeterminate", "disabled", "indeterminateChange", "change"], [1, "mtx-checkbox-normal", 3, "ngModel", "disabled", "ngModelChange", "change"]], template: function MtxCheckboxGroupComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, MtxCheckboxGroupComponent_mat_checkbox_0_Template, 2, 4, "mat-checkbox", 0);
        ɵngcc0.ɵɵtemplate(1, MtxCheckboxGroupComponent_mat_checkbox_1_Template, 2, 3, "mat-checkbox", 1);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngIf", ctx.showSelectAll);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.options);
    } }, directives: [ɵngcc1.NgIf, ɵngcc1.NgForOf, ɵngcc2.MatCheckbox, ɵngcc3.NgControlStatus, ɵngcc3.NgModel], styles: [".mtx-checkbox-group{display:block}.mtx-checkbox-group .mat-checkbox{margin-right:16px}[dir=rtl] .mtx-checkbox-group .mat-checkbox{margin-right:auto;margin-left:16px}"], encapsulation: 2, changeDetection: 0 });
/** @nocollapse */
MtxCheckboxGroupComponent.ctorParameters = () => [
    { type: ChangeDetectorRef }
];
MtxCheckboxGroupComponent.propDecorators = {
    selectAllLabel: [{ type: Input }],
    showSelectAll: [{ type: Input }],
    change: [{ type: Output }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MtxCheckboxGroupComponent, [{
        type: Component,
        args: [{
                selector: 'mtx-checkbox-group',
                exportAs: 'mtxCheckboxGroup',
                host: {
                    class: 'mtx-checkbox-group'
                },
                template: "<mat-checkbox class=\"mtx-checkbox-master\"\n              *ngIf=\"showSelectAll\"\n              [checked]=\"selectAll\"\n              [(indeterminate)]=\"selectAllIndeterminate\"\n              [disabled]=\"controlDisabled\"\n              (change)=\"_updateMasterCheckboxState($event, -1);\">\n  {{selectAllLabel}}\n</mat-checkbox>\n\n<mat-checkbox class=\"mtx-checkbox-normal\"\n              *ngFor=\"let item of options; let i = index;\"\n              [(ngModel)]=\"item.checked\"\n              [disabled]=\"controlDisabled || item.disabled\"\n              (change)=\"_updateNormalCheckboxState($event, i)\">\n  {{item.label}}\n</mat-checkbox>\n",
                encapsulation: ViewEncapsulation.None,
                changeDetection: ChangeDetectionStrategy.OnPush,
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(( /**
                         * @return {?}
                         */() => MtxCheckboxGroupComponent)),
                        multi: true
                    },
                ],
                styles: [".mtx-checkbox-group{display:block}.mtx-checkbox-group .mat-checkbox{margin-right:16px}[dir=rtl] .mtx-checkbox-group .mat-checkbox{margin-right:auto;margin-left:16px}"]
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }]; }, { selectAllLabel: [{
            type: Input
        }], showSelectAll: [{
            type: Input
        }], change: [{
            type: Output
        }] }); })();
if (false) {
    /** @type {?} */
    MtxCheckboxGroupComponent.prototype.selectAllLabel;
    /** @type {?} */
    MtxCheckboxGroupComponent.prototype.showSelectAll;
    /** @type {?} */
    MtxCheckboxGroupComponent.prototype.change;
    /** @type {?} */
    MtxCheckboxGroupComponent.prototype.selectAll;
    /** @type {?} */
    MtxCheckboxGroupComponent.prototype.selectAllIndeterminate;
    /** @type {?} */
    MtxCheckboxGroupComponent.prototype.options;
    /** @type {?} */
    MtxCheckboxGroupComponent.prototype.controlDisabled;
    /** @type {?} */
    MtxCheckboxGroupComponent.prototype._onChange;
    /** @type {?} */
    MtxCheckboxGroupComponent.prototype._onTouched;
    /**
     * @type {?}
     * @private
     */
    MtxCheckboxGroupComponent.prototype._changeDetectorRef;
}

/**
 * @fileoverview added by tsickle
 * Generated from: checkbox-group.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class MtxCheckboxGroupModule {
}
MtxCheckboxGroupModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MtxCheckboxGroupModule });
MtxCheckboxGroupModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MtxCheckboxGroupModule_Factory(t) { return new (t || MtxCheckboxGroupModule)(); }, imports: [[CommonModule, FormsModule, MatCheckboxModule]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MtxCheckboxGroupModule, { declarations: function () { return [MtxCheckboxGroupComponent]; }, imports: function () { return [CommonModule, FormsModule, MatCheckboxModule]; }, exports: function () { return [MtxCheckboxGroupComponent]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MtxCheckboxGroupModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule, FormsModule, MatCheckboxModule],
                exports: [MtxCheckboxGroupComponent],
                declarations: [MtxCheckboxGroupComponent]
            }]
    }], null, null); })();

/**
 * @fileoverview added by tsickle
 * Generated from: checkbox-group.interface.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @record
 */
function MtxCheckboxGroupOption() { }
if (false) {
    /** @type {?} */
    MtxCheckboxGroupOption.prototype.label;
    /** @type {?} */
    MtxCheckboxGroupOption.prototype.value;
    /** @type {?|undefined} */
    MtxCheckboxGroupOption.prototype.checked;
    /** @type {?|undefined} */
    MtxCheckboxGroupOption.prototype.disabled;
}

/**
 * @fileoverview added by tsickle
 * Generated from: public-api.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: mtxCheckboxGroup.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { MtxCheckboxGroupComponent, MtxCheckboxGroupModule };

//# sourceMappingURL=mtxCheckboxGroup.js.map