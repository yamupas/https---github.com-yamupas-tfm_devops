import { OnInit, EventEmitter, OnChanges, TemplateRef, TrackByFunction, OnDestroy } from '@angular/core';
import { SelectionModel } from '@angular/cdk/collections';
import { MatTableDataSource } from '@angular/material/table';
import { MatPaginator, PageEvent } from '@angular/material/paginator';
import { Sort, MatSort } from '@angular/material/sort';
import { MtxGridColumn, MtxGridColumnSelectionItem, MtxGridCellTemplate, MtxGridRowSelectionFormatter, MtxGridRowClassFormatter } from './grid.interface';
import { MtxGridCellSelectionDirective } from './cell-selection.directive';
import { MtxGridExpansionToggleDirective } from './expansion-toggle.directive';
import { MtxGridService } from './grid.service';
import * as ɵngcc0 from '@angular/core';
export declare class MtxGridComponent implements OnInit, OnChanges, OnDestroy {
    private _dataGridSrv;
    paginator: MatPaginator;
    sort: MatSort;
    dataSource: MatTableDataSource<any>;
    displayedColumns: string[];
    columns: MtxGridColumn[];
    data: any[];
    length: number;
    loading: boolean;
    trackBy: TrackByFunction<any>;
    /** Whether to show tooltip on columns */
    tooltip: boolean;
    /** Whether to page on the front end */
    pageOnFront: boolean;
    showPaginator: boolean;
    pageDisabled: boolean;
    showFirstLastButtons: boolean;
    pageIndex: number;
    pageSize: number;
    pageSizeOptions: number[];
    hidePageSize: boolean;
    page: EventEmitter<PageEvent>;
    /** Sort */
    sortOnFront: boolean;
    sortChange: EventEmitter<Sort>;
    /** Hover & Striped style */
    rowHover: boolean;
    rowStriped: boolean;
    /** Expandable row */
    expansionRowStates: any[];
    expandable: boolean;
    expansionTemplate: TemplateRef<any>;
    expansionChange: EventEmitter<any>;
    /** Whether support multiple row/cell selection */
    multiSelectable: boolean;
    /** Row selection */
    rowSelection: SelectionModel<any>;
    rowSelected: any[];
    rowSelectable: boolean;
    hideRowSelectionCheckbox: boolean;
    rowSelectionFormatter: MtxGridRowSelectionFormatter;
    rowClassFormatter: MtxGridRowClassFormatter;
    rowSelectionChange: EventEmitter<any[]>;
    /** Cell selection */
    cellSelection: any[];
    cellSelectable: boolean;
    cellSelectionChange: EventEmitter<any[]>;
    private _selectedCell;
    /** Toolbar */
    showToolbar: boolean;
    toolbarTitle: string;
    toolbarTemplate: TemplateRef<any>;
    columnMenuData: MtxGridColumnSelectionItem[];
    showColumnMenuButton: boolean;
    columnMenuButtonText: string;
    columnMenuButtonType: string;
    columnMenuButtonColor: string;
    columnMenuButtonClass: string;
    columnMenuButtonIcon: string;
    columnHideable: boolean;
    columnHidingChecked: 'show' | 'hide';
    columnHidingChange: EventEmitter<string[]>;
    columnMovable: boolean;
    columnMovingChange: EventEmitter<string[]>;
    columnPinnable: boolean;
    columnPinningChange: EventEmitter<string[]>;
    /** No Result */
    noResultText: string;
    noResultTemplate: TemplateRef<any>;
    get _hasNoResult(): boolean;
    /** thead */
    headerTemplate: TemplateRef<any> | MtxGridCellTemplate;
    /** tbody */
    cellTemplate: TemplateRef<any> | MtxGridCellTemplate;
    /** tfoot */
    showSummary: boolean;
    summaryTemplate: TemplateRef<any> | MtxGridCellTemplate;
    get _whetherShowSummary(): boolean;
    /** Sidebar */
    showSidebar: boolean;
    _getColData(data: any, colDef: MtxGridColumn): any;
    _formatSummary(summary: any, data: any, colDef: MtxGridColumn): any;
    constructor(_dataGridSrv: MtxGridService);
    _isTemplateRef(obj: any): boolean;
    _isString(fn: any): boolean;
    _isFunction(fn: any): boolean;
    ngOnInit(): void;
    ngOnChanges(): void;
    ngOnDestroy(): void;
    _countPinnedPosition(): void;
    _isOddRow(index: number, dataIndex: number): number;
    _getIndex(index: number, dataIndex: number): number;
    _handleSortChange(sort: Sort): void;
    /** Expansion change event */
    _handleExpansionChange(expansionRef: MtxGridExpansionToggleDirective, rowData: any, column: any, index: number): void;
    /** Cell select event */
    _selectCell(cellRef: MtxGridCellSelectionDirective, rowData: any, colDef: any): void;
    /** Row select event */
    _selectRow(event: MouseEvent, rowData: any): void;
    /** Whether the number of selected elements matches the total number of rows. */
    _isAllSelected(): boolean;
    /** Select all rows if they are not all selected; otherwise clear selection. */
    _toggleMasterCheckbox(): void;
    /** Select normal row */
    _toggleNormalCheckbox(row: any): void;
    /** Column change event */
    _handleColumnHidingChange(columns: string[]): void;
    _handleColumnMovingChange(columns: string[]): void;
    /** Customize expansion event */
    toggleExpansion(index: number): any;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<MtxGridComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<MtxGridComponent, "mtx-grid", ["mtxGrid"], { "columns": "columns"; "data": "data"; "length": "length"; "loading": "loading"; "tooltip": "tooltip"; "pageOnFront": "pageOnFront"; "showPaginator": "showPaginator"; "pageDisabled": "pageDisabled"; "showFirstLastButtons": "showFirstLastButtons"; "pageIndex": "pageIndex"; "pageSize": "pageSize"; "pageSizeOptions": "pageSizeOptions"; "hidePageSize": "hidePageSize"; "sortOnFront": "sortOnFront"; "rowHover": "rowHover"; "rowStriped": "rowStriped"; "expandable": "expandable"; "multiSelectable": "multiSelectable"; "rowSelected": "rowSelected"; "rowSelectable": "rowSelectable"; "hideRowSelectionCheckbox": "hideRowSelectionCheckbox"; "rowSelectionFormatter": "rowSelectionFormatter"; "rowClassFormatter": "rowClassFormatter"; "cellSelectable": "cellSelectable"; "showToolbar": "showToolbar"; "toolbarTitle": "toolbarTitle"; "showColumnMenuButton": "showColumnMenuButton"; "columnMenuButtonText": "columnMenuButtonText"; "columnMenuButtonType": "columnMenuButtonType"; "columnMenuButtonColor": "columnMenuButtonColor"; "columnMenuButtonClass": "columnMenuButtonClass"; "columnMenuButtonIcon": "columnMenuButtonIcon"; "columnHideable": "columnHideable"; "columnHidingChecked": "columnHidingChecked"; "columnMovable": "columnMovable"; "columnPinnable": "columnPinnable"; "noResultText": "noResultText"; "showSummary": "showSummary"; "showSidebar": "showSidebar"; "displayedColumns": "displayedColumns"; "trackBy": "trackBy"; "expansionTemplate": "expansionTemplate"; "toolbarTemplate": "toolbarTemplate"; "noResultTemplate": "noResultTemplate"; "headerTemplate": "headerTemplate"; "cellTemplate": "cellTemplate"; "summaryTemplate": "summaryTemplate"; }, { "page": "page"; "sortChange": "sortChange"; "expansionChange": "expansionChange"; "rowSelectionChange": "rowSelectionChange"; "cellSelectionChange": "cellSelectionChange"; "columnHidingChange": "columnHidingChange"; "columnMovingChange": "columnMovingChange"; "columnPinningChange": "columnPinningChange"; }, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JpZC5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsiZ3JpZC5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE9uSW5pdCwgRXZlbnRFbWl0dGVyLCBPbkNoYW5nZXMsIFRlbXBsYXRlUmVmLCBUcmFja0J5RnVuY3Rpb24sIE9uRGVzdHJveSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgU2VsZWN0aW9uTW9kZWwgfSBmcm9tICdAYW5ndWxhci9jZGsvY29sbGVjdGlvbnMnO1xuaW1wb3J0IHsgTWF0VGFibGVEYXRhU291cmNlIH0gZnJvbSAnQGFuZ3VsYXIvbWF0ZXJpYWwvdGFibGUnO1xuaW1wb3J0IHsgTWF0UGFnaW5hdG9yLCBQYWdlRXZlbnQgfSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbC9wYWdpbmF0b3InO1xuaW1wb3J0IHsgU29ydCwgTWF0U29ydCB9IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsL3NvcnQnO1xuaW1wb3J0IHsgTXR4R3JpZENvbHVtbiwgTXR4R3JpZENvbHVtblNlbGVjdGlvbkl0ZW0sIE10eEdyaWRDZWxsVGVtcGxhdGUsIE10eEdyaWRSb3dTZWxlY3Rpb25Gb3JtYXR0ZXIsIE10eEdyaWRSb3dDbGFzc0Zvcm1hdHRlciB9IGZyb20gJy4vZ3JpZC5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgTXR4R3JpZENlbGxTZWxlY3Rpb25EaXJlY3RpdmUgfSBmcm9tICcuL2NlbGwtc2VsZWN0aW9uLmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBNdHhHcmlkRXhwYW5zaW9uVG9nZ2xlRGlyZWN0aXZlIH0gZnJvbSAnLi9leHBhbnNpb24tdG9nZ2xlLmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBNdHhHcmlkU2VydmljZSB9IGZyb20gJy4vZ3JpZC5zZXJ2aWNlJztcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIE10eEdyaWRDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIE9uQ2hhbmdlcywgT25EZXN0cm95IHtcbiAgICBwcml2YXRlIF9kYXRhR3JpZFNydjtcbiAgICBwYWdpbmF0b3I6IE1hdFBhZ2luYXRvcjtcbiAgICBzb3J0OiBNYXRTb3J0O1xuICAgIGRhdGFTb3VyY2U6IE1hdFRhYmxlRGF0YVNvdXJjZTxhbnk+O1xuICAgIGRpc3BsYXllZENvbHVtbnM6IHN0cmluZ1tdO1xuICAgIGNvbHVtbnM6IE10eEdyaWRDb2x1bW5bXTtcbiAgICBkYXRhOiBhbnlbXTtcbiAgICBsZW5ndGg6IG51bWJlcjtcbiAgICBsb2FkaW5nOiBib29sZWFuO1xuICAgIHRyYWNrQnk6IFRyYWNrQnlGdW5jdGlvbjxhbnk+O1xuICAgIC8qKiBXaGV0aGVyIHRvIHNob3cgdG9vbHRpcCBvbiBjb2x1bW5zICovXG4gICAgdG9vbHRpcDogYm9vbGVhbjtcbiAgICAvKiogV2hldGhlciB0byBwYWdlIG9uIHRoZSBmcm9udCBlbmQgKi9cbiAgICBwYWdlT25Gcm9udDogYm9vbGVhbjtcbiAgICBzaG93UGFnaW5hdG9yOiBib29sZWFuO1xuICAgIHBhZ2VEaXNhYmxlZDogYm9vbGVhbjtcbiAgICBzaG93Rmlyc3RMYXN0QnV0dG9uczogYm9vbGVhbjtcbiAgICBwYWdlSW5kZXg6IG51bWJlcjtcbiAgICBwYWdlU2l6ZTogbnVtYmVyO1xuICAgIHBhZ2VTaXplT3B0aW9uczogbnVtYmVyW107XG4gICAgaGlkZVBhZ2VTaXplOiBib29sZWFuO1xuICAgIHBhZ2U6IEV2ZW50RW1pdHRlcjxQYWdlRXZlbnQ+O1xuICAgIC8qKiBTb3J0ICovXG4gICAgc29ydE9uRnJvbnQ6IGJvb2xlYW47XG4gICAgc29ydENoYW5nZTogRXZlbnRFbWl0dGVyPFNvcnQ+O1xuICAgIC8qKiBIb3ZlciAmIFN0cmlwZWQgc3R5bGUgKi9cbiAgICByb3dIb3ZlcjogYm9vbGVhbjtcbiAgICByb3dTdHJpcGVkOiBib29sZWFuO1xuICAgIC8qKiBFeHBhbmRhYmxlIHJvdyAqL1xuICAgIGV4cGFuc2lvblJvd1N0YXRlczogYW55W107XG4gICAgZXhwYW5kYWJsZTogYm9vbGVhbjtcbiAgICBleHBhbnNpb25UZW1wbGF0ZTogVGVtcGxhdGVSZWY8YW55PjtcbiAgICBleHBhbnNpb25DaGFuZ2U6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIC8qKiBXaGV0aGVyIHN1cHBvcnQgbXVsdGlwbGUgcm93L2NlbGwgc2VsZWN0aW9uICovXG4gICAgbXVsdGlTZWxlY3RhYmxlOiBib29sZWFuO1xuICAgIC8qKiBSb3cgc2VsZWN0aW9uICovXG4gICAgcm93U2VsZWN0aW9uOiBTZWxlY3Rpb25Nb2RlbDxhbnk+O1xuICAgIHJvd1NlbGVjdGVkOiBhbnlbXTtcbiAgICByb3dTZWxlY3RhYmxlOiBib29sZWFuO1xuICAgIGhpZGVSb3dTZWxlY3Rpb25DaGVja2JveDogYm9vbGVhbjtcbiAgICByb3dTZWxlY3Rpb25Gb3JtYXR0ZXI6IE10eEdyaWRSb3dTZWxlY3Rpb25Gb3JtYXR0ZXI7XG4gICAgcm93Q2xhc3NGb3JtYXR0ZXI6IE10eEdyaWRSb3dDbGFzc0Zvcm1hdHRlcjtcbiAgICByb3dTZWxlY3Rpb25DaGFuZ2U6IEV2ZW50RW1pdHRlcjxhbnlbXT47XG4gICAgLyoqIENlbGwgc2VsZWN0aW9uICovXG4gICAgY2VsbFNlbGVjdGlvbjogYW55W107XG4gICAgY2VsbFNlbGVjdGFibGU6IGJvb2xlYW47XG4gICAgY2VsbFNlbGVjdGlvbkNoYW5nZTogRXZlbnRFbWl0dGVyPGFueVtdPjtcbiAgICBwcml2YXRlIF9zZWxlY3RlZENlbGw7XG4gICAgLyoqIFRvb2xiYXIgKi9cbiAgICBzaG93VG9vbGJhcjogYm9vbGVhbjtcbiAgICB0b29sYmFyVGl0bGU6IHN0cmluZztcbiAgICB0b29sYmFyVGVtcGxhdGU6IFRlbXBsYXRlUmVmPGFueT47XG4gICAgY29sdW1uTWVudURhdGE6IE10eEdyaWRDb2x1bW5TZWxlY3Rpb25JdGVtW107XG4gICAgc2hvd0NvbHVtbk1lbnVCdXR0b246IGJvb2xlYW47XG4gICAgY29sdW1uTWVudUJ1dHRvblRleHQ6IHN0cmluZztcbiAgICBjb2x1bW5NZW51QnV0dG9uVHlwZTogc3RyaW5nO1xuICAgIGNvbHVtbk1lbnVCdXR0b25Db2xvcjogc3RyaW5nO1xuICAgIGNvbHVtbk1lbnVCdXR0b25DbGFzczogc3RyaW5nO1xuICAgIGNvbHVtbk1lbnVCdXR0b25JY29uOiBzdHJpbmc7XG4gICAgY29sdW1uSGlkZWFibGU6IGJvb2xlYW47XG4gICAgY29sdW1uSGlkaW5nQ2hlY2tlZDogJ3Nob3cnIHwgJ2hpZGUnO1xuICAgIGNvbHVtbkhpZGluZ0NoYW5nZTogRXZlbnRFbWl0dGVyPHN0cmluZ1tdPjtcbiAgICBjb2x1bW5Nb3ZhYmxlOiBib29sZWFuO1xuICAgIGNvbHVtbk1vdmluZ0NoYW5nZTogRXZlbnRFbWl0dGVyPHN0cmluZ1tdPjtcbiAgICBjb2x1bW5QaW5uYWJsZTogYm9vbGVhbjtcbiAgICBjb2x1bW5QaW5uaW5nQ2hhbmdlOiBFdmVudEVtaXR0ZXI8c3RyaW5nW10+O1xuICAgIC8qKiBObyBSZXN1bHQgKi9cbiAgICBub1Jlc3VsdFRleHQ6IHN0cmluZztcbiAgICBub1Jlc3VsdFRlbXBsYXRlOiBUZW1wbGF0ZVJlZjxhbnk+O1xuICAgIGdldCBfaGFzTm9SZXN1bHQoKTogYm9vbGVhbjtcbiAgICAvKiogdGhlYWQgKi9cbiAgICBoZWFkZXJUZW1wbGF0ZTogVGVtcGxhdGVSZWY8YW55PiB8IE10eEdyaWRDZWxsVGVtcGxhdGU7XG4gICAgLyoqIHRib2R5ICovXG4gICAgY2VsbFRlbXBsYXRlOiBUZW1wbGF0ZVJlZjxhbnk+IHwgTXR4R3JpZENlbGxUZW1wbGF0ZTtcbiAgICAvKiogdGZvb3QgKi9cbiAgICBzaG93U3VtbWFyeTogYm9vbGVhbjtcbiAgICBzdW1tYXJ5VGVtcGxhdGU6IFRlbXBsYXRlUmVmPGFueT4gfCBNdHhHcmlkQ2VsbFRlbXBsYXRlO1xuICAgIGdldCBfd2hldGhlclNob3dTdW1tYXJ5KCk6IGJvb2xlYW47XG4gICAgLyoqIFNpZGViYXIgKi9cbiAgICBzaG93U2lkZWJhcjogYm9vbGVhbjtcbiAgICBfZ2V0Q29sRGF0YShkYXRhOiBhbnksIGNvbERlZjogTXR4R3JpZENvbHVtbik6IGFueTtcbiAgICBfZm9ybWF0U3VtbWFyeShzdW1tYXJ5OiBhbnksIGRhdGE6IGFueSwgY29sRGVmOiBNdHhHcmlkQ29sdW1uKTogYW55O1xuICAgIGNvbnN0cnVjdG9yKF9kYXRhR3JpZFNydjogTXR4R3JpZFNlcnZpY2UpO1xuICAgIF9pc1RlbXBsYXRlUmVmKG9iajogYW55KTogYm9vbGVhbjtcbiAgICBfaXNTdHJpbmcoZm46IGFueSk6IGJvb2xlYW47XG4gICAgX2lzRnVuY3Rpb24oZm46IGFueSk6IGJvb2xlYW47XG4gICAgbmdPbkluaXQoKTogdm9pZDtcbiAgICBuZ09uQ2hhbmdlcygpOiB2b2lkO1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG4gICAgX2NvdW50UGlubmVkUG9zaXRpb24oKTogdm9pZDtcbiAgICBfaXNPZGRSb3coaW5kZXg6IG51bWJlciwgZGF0YUluZGV4OiBudW1iZXIpOiBudW1iZXI7XG4gICAgX2dldEluZGV4KGluZGV4OiBudW1iZXIsIGRhdGFJbmRleDogbnVtYmVyKTogbnVtYmVyO1xuICAgIF9oYW5kbGVTb3J0Q2hhbmdlKHNvcnQ6IFNvcnQpOiB2b2lkO1xuICAgIC8qKiBFeHBhbnNpb24gY2hhbmdlIGV2ZW50ICovXG4gICAgX2hhbmRsZUV4cGFuc2lvbkNoYW5nZShleHBhbnNpb25SZWY6IE10eEdyaWRFeHBhbnNpb25Ub2dnbGVEaXJlY3RpdmUsIHJvd0RhdGE6IGFueSwgY29sdW1uOiBhbnksIGluZGV4OiBudW1iZXIpOiB2b2lkO1xuICAgIC8qKiBDZWxsIHNlbGVjdCBldmVudCAqL1xuICAgIF9zZWxlY3RDZWxsKGNlbGxSZWY6IE10eEdyaWRDZWxsU2VsZWN0aW9uRGlyZWN0aXZlLCByb3dEYXRhOiBhbnksIGNvbERlZjogYW55KTogdm9pZDtcbiAgICAvKiogUm93IHNlbGVjdCBldmVudCAqL1xuICAgIF9zZWxlY3RSb3coZXZlbnQ6IE1vdXNlRXZlbnQsIHJvd0RhdGE6IGFueSk6IHZvaWQ7XG4gICAgLyoqIFdoZXRoZXIgdGhlIG51bWJlciBvZiBzZWxlY3RlZCBlbGVtZW50cyBtYXRjaGVzIHRoZSB0b3RhbCBudW1iZXIgb2Ygcm93cy4gKi9cbiAgICBfaXNBbGxTZWxlY3RlZCgpOiBib29sZWFuO1xuICAgIC8qKiBTZWxlY3QgYWxsIHJvd3MgaWYgdGhleSBhcmUgbm90IGFsbCBzZWxlY3RlZDsgb3RoZXJ3aXNlIGNsZWFyIHNlbGVjdGlvbi4gKi9cbiAgICBfdG9nZ2xlTWFzdGVyQ2hlY2tib3goKTogdm9pZDtcbiAgICAvKiogU2VsZWN0IG5vcm1hbCByb3cgKi9cbiAgICBfdG9nZ2xlTm9ybWFsQ2hlY2tib3gocm93OiBhbnkpOiB2b2lkO1xuICAgIC8qKiBDb2x1bW4gY2hhbmdlIGV2ZW50ICovXG4gICAgX2hhbmRsZUNvbHVtbkhpZGluZ0NoYW5nZShjb2x1bW5zOiBzdHJpbmdbXSk6IHZvaWQ7XG4gICAgX2hhbmRsZUNvbHVtbk1vdmluZ0NoYW5nZShjb2x1bW5zOiBzdHJpbmdbXSk6IHZvaWQ7XG4gICAgLyoqIEN1c3RvbWl6ZSBleHBhbnNpb24gZXZlbnQgKi9cbiAgICB0b2dnbGVFeHBhbnNpb24oaW5kZXg6IG51bWJlcik6IGFueTtcbn1cbiJdfQ==