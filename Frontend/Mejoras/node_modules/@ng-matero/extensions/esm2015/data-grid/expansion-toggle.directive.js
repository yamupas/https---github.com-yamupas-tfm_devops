/**
 * @fileoverview added by tsickle
 * Generated from: expansion-toggle.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, EventEmitter, HostBinding, HostListener, Input, Output, TemplateRef, } from '@angular/core';
export class MtxGridExpansionToggleDirective {
    constructor() {
        this._opened = false;
        this.toggleChange = new EventEmitter();
    }
    /**
     * @return {?}
     */
    get expended() {
        return this._opened;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set expandableRow(value) {
        if (value !== this._row) {
            this._row = value;
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set template(value) {
        if (value !== this._tplRef) {
            this._tplRef = value;
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onClick(event) {
        event.preventDefault();
        event.stopPropagation();
        this.toggle();
    }
    /**
     * @return {?}
     */
    toggle() {
        this._opened = !this._opened;
        this.toggleChange.emit(this);
    }
}
MtxGridExpansionToggleDirective.decorators = [
    { type: Directive, args: [{
                selector: '[mtx-expansion-toggle]',
            },] }
];
/** @nocollapse */
MtxGridExpansionToggleDirective.ctorParameters = () => [];
MtxGridExpansionToggleDirective.propDecorators = {
    expended: [{ type: HostBinding, args: ['class.expanded',] }],
    expandableRow: [{ type: Input }],
    template: [{ type: Input, args: ['expansionRowTpl',] }],
    toggleChange: [{ type: Output }],
    onClick: [{ type: HostListener, args: ['click', ['$event'],] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    MtxGridExpansionToggleDirective.prototype._opened;
    /**
     * @type {?}
     * @private
     */
    MtxGridExpansionToggleDirective.prototype._row;
    /**
     * @type {?}
     * @private
     */
    MtxGridExpansionToggleDirective.prototype._tplRef;
    /** @type {?} */
    MtxGridExpansionToggleDirective.prototype.toggleChange;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhwYW5zaW9uLXRvZ2dsZS5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AbmctbWF0ZXJvL2V4dGVuc2lvbnMvZGF0YS1ncmlkLyIsInNvdXJjZXMiOlsiZXhwYW5zaW9uLXRvZ2dsZS5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQ0wsU0FBUyxFQUNULFlBQVksRUFDWixXQUFXLEVBQ1gsWUFBWSxFQUNaLEtBQUssRUFDTCxNQUFNLEVBQ04sV0FBVyxHQUNaLE1BQU0sZUFBZSxDQUFDO0FBS3ZCLE1BQU0sT0FBTywrQkFBK0I7SUEwQjFDO1FBekJRLFlBQU8sR0FBRyxLQUFLLENBQUM7UUF1QmQsaUJBQVksR0FBRyxJQUFJLFlBQVksRUFBbUMsQ0FBQztJQUU5RCxDQUFDOzs7O0lBckJoQixJQUNJLFFBQVE7UUFDVixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUM7SUFDdEIsQ0FBQzs7Ozs7SUFFRCxJQUNJLGFBQWEsQ0FBQyxLQUFVO1FBQzFCLElBQUksS0FBSyxLQUFLLElBQUksQ0FBQyxJQUFJLEVBQUU7WUFDdkIsSUFBSSxDQUFDLElBQUksR0FBRyxLQUFLLENBQUM7U0FDbkI7SUFDSCxDQUFDOzs7OztJQUVELElBQ0ksUUFBUSxDQUFDLEtBQXVCO1FBQ2xDLElBQUksS0FBSyxLQUFLLElBQUksQ0FBQyxPQUFPLEVBQUU7WUFDMUIsSUFBSSxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUM7U0FDdEI7SUFDSCxDQUFDOzs7OztJQU9ELE9BQU8sQ0FBQyxLQUFpQjtRQUN2QixLQUFLLENBQUMsY0FBYyxFQUFFLENBQUM7UUFDdkIsS0FBSyxDQUFDLGVBQWUsRUFBRSxDQUFDO1FBQ3hCLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQztJQUNoQixDQUFDOzs7O0lBRUQsTUFBTTtRQUNKLElBQUksQ0FBQyxPQUFPLEdBQUcsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDO1FBQzdCLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQy9CLENBQUM7OztZQXpDRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLHdCQUF3QjthQUNuQzs7Ozs7dUJBTUUsV0FBVyxTQUFDLGdCQUFnQjs0QkFLNUIsS0FBSzt1QkFPTCxLQUFLLFNBQUMsaUJBQWlCOzJCQU92QixNQUFNO3NCQUlOLFlBQVksU0FBQyxPQUFPLEVBQUUsQ0FBQyxRQUFRLENBQUM7Ozs7Ozs7SUEzQmpDLGtEQUF3Qjs7Ozs7SUFDeEIsK0NBQWtCOzs7OztJQUNsQixrREFBa0M7O0lBcUJsQyx1REFBNkUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xyXG4gIERpcmVjdGl2ZSxcclxuICBFdmVudEVtaXR0ZXIsXHJcbiAgSG9zdEJpbmRpbmcsXHJcbiAgSG9zdExpc3RlbmVyLFxyXG4gIElucHV0LFxyXG4gIE91dHB1dCxcclxuICBUZW1wbGF0ZVJlZixcclxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuXHJcbkBEaXJlY3RpdmUoe1xyXG4gIHNlbGVjdG9yOiAnW210eC1leHBhbnNpb24tdG9nZ2xlXScsXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBNdHhHcmlkRXhwYW5zaW9uVG9nZ2xlRGlyZWN0aXZlIHtcclxuICBwcml2YXRlIF9vcGVuZWQgPSBmYWxzZTtcclxuICBwcml2YXRlIF9yb3c6IGFueTtcclxuICBwcml2YXRlIF90cGxSZWY6IFRlbXBsYXRlUmVmPGFueT47XHJcblxyXG4gIEBIb3N0QmluZGluZygnY2xhc3MuZXhwYW5kZWQnKVxyXG4gIGdldCBleHBlbmRlZCgpOiBib29sZWFuIHtcclxuICAgIHJldHVybiB0aGlzLl9vcGVuZWQ7XHJcbiAgfVxyXG5cclxuICBASW5wdXQoKVxyXG4gIHNldCBleHBhbmRhYmxlUm93KHZhbHVlOiBhbnkpIHtcclxuICAgIGlmICh2YWx1ZSAhPT0gdGhpcy5fcm93KSB7XHJcbiAgICAgIHRoaXMuX3JvdyA9IHZhbHVlO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgQElucHV0KCdleHBhbnNpb25Sb3dUcGwnKVxyXG4gIHNldCB0ZW1wbGF0ZSh2YWx1ZTogVGVtcGxhdGVSZWY8YW55Pikge1xyXG4gICAgaWYgKHZhbHVlICE9PSB0aGlzLl90cGxSZWYpIHtcclxuICAgICAgdGhpcy5fdHBsUmVmID0gdmFsdWU7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBAT3V0cHV0KCkgdG9nZ2xlQ2hhbmdlID0gbmV3IEV2ZW50RW1pdHRlcjxNdHhHcmlkRXhwYW5zaW9uVG9nZ2xlRGlyZWN0aXZlPigpO1xyXG5cclxuICBjb25zdHJ1Y3RvcigpIHt9XHJcblxyXG4gIEBIb3N0TGlzdGVuZXIoJ2NsaWNrJywgWyckZXZlbnQnXSlcclxuICBvbkNsaWNrKGV2ZW50OiBNb3VzZUV2ZW50KTogdm9pZCB7XHJcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICB0aGlzLnRvZ2dsZSgpO1xyXG4gIH1cclxuXHJcbiAgdG9nZ2xlKCk6IHZvaWQge1xyXG4gICAgdGhpcy5fb3BlbmVkID0gIXRoaXMuX29wZW5lZDtcclxuICAgIHRoaXMudG9nZ2xlQ2hhbmdlLmVtaXQodGhpcyk7XHJcbiAgfVxyXG59XHJcbiJdfQ==