/**
 * @fileoverview added by tsickle
 * Generated from: alert.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ChangeDetectionStrategy, ViewEncapsulation, Input, Output, EventEmitter, ChangeDetectorRef, } from '@angular/core';
export class MtxAlertComponent {
    /**
     * @param {?} _changeDetectorRef
     */
    constructor(_changeDetectorRef) {
        this._changeDetectorRef = _changeDetectorRef;
        /**
         * Alert types
         * `default`, `info`, `success`, `warning` and `danger`
         */
        this.type = 'default';
        /**
         * Whether alert visible
         */
        this.isOpen = true;
        /**
         * Material elevation
         */
        this.elevation = 0;
        /**
         * This event fires when alert closed, $event is an instance of Alert component
         */
        this.closed = new EventEmitter();
    }
    /**
     * @return {?}
     */
    _onClosed() {
        this.isOpen = false;
        this._changeDetectorRef.markForCheck();
        this.closed.emit(this);
    }
}
MtxAlertComponent.decorators = [
    { type: Component, args: [{
                selector: 'mtx-alert',
                exportAs: 'mtxAlert',
                host: {
                    class: 'mtx-alert',
                },
                template: "<ng-template [ngIf]=\"isOpen\">\n  <div [ngClass]=\"['mtx-alert-ref',\n                   'mtx-alert-' + type,\n                   'mat-elevation-z' + elevation,\n                    dismissible ? 'mtx-alert-dismissible' : '']\"\n       role=\"alert\">\n    <ng-content></ng-content>\n    <ng-template [ngIf]=\"dismissible\">\n      <button type=\"button\" class=\"mtx-alert-close\" aria-label=\"Close\" (click)=\"_onClosed()\">\n        <span aria-hidden=\"true\">&times;</span>\n      </button>\n    </ng-template>\n  </div>\n</ng-template>\n",
                encapsulation: ViewEncapsulation.None,
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [".mtx-alert-ref{position:relative;padding:.75rem 1.25rem;margin-bottom:1rem;border:1px solid transparent;border-radius:.25rem}.mtx-alert-close{position:absolute;top:0;bottom:0;right:0;padding:0 1.25rem;font-size:1.5rem;line-height:1;color:inherit;opacity:.5;background-color:transparent;border:0;cursor:pointer}[dir=rtl] .mtx-alert-close{right:unset;left:0}.mtx-alert-close:hover{opacity:.75}.mtx-alert-dismissible{padding-right:4rem}.mtx-alert-success{background-color:#4caf50;border-color:#4caf50;color:#fff}.mtx-alert-info{background-color:#2196f3;border-color:#2196f3;color:#fff}.mtx-alert-warning{background-color:#fb8c00;border-color:#fb8c00;color:#fff}.mtx-alert-danger{background-color:#ff5252;border-color:#ff5252;color:#fff}"]
            }] }
];
/** @nocollapse */
MtxAlertComponent.ctorParameters = () => [
    { type: ChangeDetectorRef }
];
MtxAlertComponent.propDecorators = {
    type: [{ type: Input }],
    isOpen: [{ type: Input }],
    dismissible: [{ type: Input }],
    color: [{ type: Input }],
    elevation: [{ type: Input }],
    closed: [{ type: Output }]
};
if (false) {
    /**
     * Alert types
     * `default`, `info`, `success`, `warning` and `danger`
     * @type {?}
     */
    MtxAlertComponent.prototype.type;
    /**
     * Whether alert visible
     * @type {?}
     */
    MtxAlertComponent.prototype.isOpen;
    /**
     * Whether displays an inline "Close" button
     * @type {?}
     */
    MtxAlertComponent.prototype.dismissible;
    /**
     * Text color
     * @type {?}
     */
    MtxAlertComponent.prototype.color;
    /**
     * Material elevation
     * @type {?}
     */
    MtxAlertComponent.prototype.elevation;
    /**
     * This event fires when alert closed, $event is an instance of Alert component
     * @type {?}
     */
    MtxAlertComponent.prototype.closed;
    /**
     * @type {?}
     * @private
     */
    MtxAlertComponent.prototype._changeDetectorRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWxlcnQuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQG5nLW1hdGVyby9leHRlbnNpb25zL2FsZXJ0LyIsInNvdXJjZXMiOlsiYWxlcnQuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUNMLFNBQVMsRUFDVCx1QkFBdUIsRUFDdkIsaUJBQWlCLEVBQ2pCLEtBQUssRUFDTCxNQUFNLEVBQ04sWUFBWSxFQUNaLGlCQUFpQixHQUNsQixNQUFNLGVBQWUsQ0FBQztBQWF2QixNQUFNLE9BQU8saUJBQWlCOzs7O0lBc0I1QixZQUFvQixrQkFBcUM7UUFBckMsdUJBQWtCLEdBQWxCLGtCQUFrQixDQUFtQjs7Ozs7UUFqQmhELFNBQUksR0FBRyxTQUFTLENBQUM7Ozs7UUFHakIsV0FBTSxHQUFHLElBQUksQ0FBQzs7OztRQVNkLGNBQVMsR0FBRyxDQUFDLENBQUM7Ozs7UUFHYixXQUFNLEdBQUcsSUFBSSxZQUFZLEVBQXFCLENBQUM7SUFFRyxDQUFDOzs7O0lBRTdELFNBQVM7UUFDUCxJQUFJLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQztRQUNwQixJQUFJLENBQUMsa0JBQWtCLENBQUMsWUFBWSxFQUFFLENBQUM7UUFDdkMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDekIsQ0FBQzs7O1lBdkNGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsV0FBVztnQkFDckIsUUFBUSxFQUFFLFVBQVU7Z0JBQ3BCLElBQUksRUFBRTtvQkFDSixLQUFLLEVBQUUsV0FBVztpQkFDbkI7Z0JBQ0QsNGlCQUFxQztnQkFFckMsYUFBYSxFQUFFLGlCQUFpQixDQUFDLElBQUk7Z0JBQ3JDLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNOzthQUNoRDs7OztZQWJDLGlCQUFpQjs7O21CQW1CaEIsS0FBSztxQkFHTCxLQUFLOzBCQUdMLEtBQUs7b0JBR0wsS0FBSzt3QkFHTCxLQUFLO3FCQUdMLE1BQU07Ozs7Ozs7O0lBZlAsaUNBQTBCOzs7OztJQUcxQixtQ0FBdUI7Ozs7O0lBR3ZCLHdDQUE4Qjs7Ozs7SUFHOUIsa0NBQXVCOzs7OztJQUd2QixzQ0FBdUI7Ozs7O0lBR3ZCLG1DQUF5RDs7Ozs7SUFFN0MsK0NBQTZDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQ29tcG9uZW50LFxuICBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSxcbiAgVmlld0VuY2Fwc3VsYXRpb24sXG4gIElucHV0LFxuICBPdXRwdXQsXG4gIEV2ZW50RW1pdHRlcixcbiAgQ2hhbmdlRGV0ZWN0b3JSZWYsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdtdHgtYWxlcnQnLFxuICBleHBvcnRBczogJ210eEFsZXJ0JyxcbiAgaG9zdDoge1xuICAgIGNsYXNzOiAnbXR4LWFsZXJ0JyxcbiAgfSxcbiAgdGVtcGxhdGVVcmw6ICcuL2FsZXJ0LmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVVcmxzOiBbJy4vYWxlcnQuY29tcG9uZW50LnNjc3MnXSxcbiAgZW5jYXBzdWxhdGlvbjogVmlld0VuY2Fwc3VsYXRpb24uTm9uZSxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG59KVxuZXhwb3J0IGNsYXNzIE10eEFsZXJ0Q29tcG9uZW50IHtcbiAgLyoqXG4gICAqIEFsZXJ0IHR5cGVzXG4gICAqIGBkZWZhdWx0YCwgYGluZm9gLCBgc3VjY2Vzc2AsIGB3YXJuaW5nYCBhbmQgYGRhbmdlcmBcbiAgICovXG4gIEBJbnB1dCgpIHR5cGUgPSAnZGVmYXVsdCc7XG5cbiAgLyoqIFdoZXRoZXIgYWxlcnQgdmlzaWJsZSAqL1xuICBASW5wdXQoKSBpc09wZW4gPSB0cnVlO1xuXG4gIC8qKiBXaGV0aGVyIGRpc3BsYXlzIGFuIGlubGluZSBcIkNsb3NlXCIgYnV0dG9uICovXG4gIEBJbnB1dCgpIGRpc21pc3NpYmxlOiBib29sZWFuO1xuXG4gIC8qKiBUZXh0IGNvbG9yICovXG4gIEBJbnB1dCgpIGNvbG9yOiBzdHJpbmc7XG5cbiAgLyoqIE1hdGVyaWFsIGVsZXZhdGlvbiAqL1xuICBASW5wdXQoKSBlbGV2YXRpb24gPSAwO1xuXG4gIC8qKiBUaGlzIGV2ZW50IGZpcmVzIHdoZW4gYWxlcnQgY2xvc2VkLCAkZXZlbnQgaXMgYW4gaW5zdGFuY2Ugb2YgQWxlcnQgY29tcG9uZW50ICovXG4gIEBPdXRwdXQoKSBjbG9zZWQgPSBuZXcgRXZlbnRFbWl0dGVyPE10eEFsZXJ0Q29tcG9uZW50PigpO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgX2NoYW5nZURldGVjdG9yUmVmOiBDaGFuZ2VEZXRlY3RvclJlZikge31cblxuICBfb25DbG9zZWQoKTogdm9pZCB7XG4gICAgdGhpcy5pc09wZW4gPSBmYWxzZTtcbiAgICB0aGlzLl9jaGFuZ2VEZXRlY3RvclJlZi5tYXJrRm9yQ2hlY2soKTtcbiAgICB0aGlzLmNsb3NlZC5lbWl0KHRoaXMpO1xuICB9XG59XG4iXX0=