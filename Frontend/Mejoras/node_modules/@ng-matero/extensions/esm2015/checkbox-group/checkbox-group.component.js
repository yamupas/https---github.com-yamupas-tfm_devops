/**
 * @fileoverview added by tsickle
 * Generated from: checkbox-group.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ChangeDetectionStrategy, ViewEncapsulation, Input, Output, EventEmitter, ChangeDetectorRef, forwardRef, } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
export class MtxCheckboxGroupComponent {
    /**
     * @param {?} _changeDetectorRef
     */
    constructor(_changeDetectorRef) {
        this._changeDetectorRef = _changeDetectorRef;
        this.selectAllLabel = 'Select All';
        this.showSelectAll = true;
        this.change = new EventEmitter();
        this.selectAll = false;
        this.selectAllIndeterminate = false;
        this.options = [];
        this.controlDisabled = false;
        this._onChange = (/**
         * @return {?}
         */
        () => null);
        this._onTouched = (/**
         * @return {?}
         */
        () => null);
    }
    /**
     * @return {?}
     */
    ngOnInit() { }
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        if (value) {
            this.options = value;
        }
        this._checkMasterCheckboxState();
        this._changeDetectorRef.markForCheck();
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this._onChange = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this._onTouched = fn;
    }
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    setDisabledState(isDisabled) {
        this.controlDisabled = isDisabled;
    }
    /**
     * @private
     * @return {?}
     */
    _checkMasterCheckboxState() {
        if (this.options.filter((/**
         * @param {?} item
         * @return {?}
         */
        item => item.checked || !item.disabled)).every((/**
         * @param {?} item
         * @return {?}
         */
        item => !item.checked))) {
            this.selectAll = false;
            this.selectAllIndeterminate = false;
        }
        else if (this.options.filter((/**
         * @param {?} item
         * @return {?}
         */
        item => item.checked || !item.disabled)).every((/**
         * @param {?} item
         * @return {?}
         */
        item => item.checked))) {
            this.selectAll = true;
            this.selectAllIndeterminate = false;
        }
        else {
            this.selectAllIndeterminate = true;
        }
    }
    /**
     * @param {?=} e
     * @param {?=} index
     * @return {?}
     */
    _updateNormalCheckboxState(e, index) {
        this._checkMasterCheckboxState();
        this.change.emit({
            model: this.options,
            index,
        });
    }
    /**
     * @param {?=} e
     * @param {?=} index
     * @return {?}
     */
    _updateMasterCheckboxState(e, index) {
        this.selectAll = !this.selectAll;
        this.selectAllIndeterminate = false;
        if (this.selectAll) {
            this.options
                .filter((/**
             * @param {?} item
             * @return {?}
             */
            item => item.checked || !item.disabled))
                .forEach((/**
             * @param {?} item
             * @return {?}
             */
            item => (item.checked = true)));
        }
        else {
            this.options
                .filter((/**
             * @param {?} item
             * @return {?}
             */
            item => item.checked || !item.disabled))
                .forEach((/**
             * @param {?} item
             * @return {?}
             */
            item => (item.checked = !!item.disabled)));
        }
        this.change.emit({
            model: this.options,
            index,
        });
    }
}
MtxCheckboxGroupComponent.decorators = [
    { type: Component, args: [{
                selector: 'mtx-checkbox-group',
                exportAs: 'mtxCheckboxGroup',
                host: {
                    class: 'mtx-checkbox-group',
                },
                template: "<mat-checkbox class=\"mtx-checkbox-master\"\n              *ngIf=\"showSelectAll\"\n              [checked]=\"selectAll\"\n              [(indeterminate)]=\"selectAllIndeterminate\"\n              [disabled]=\"controlDisabled\"\n              (change)=\"_updateMasterCheckboxState($event, -1);\">\n  {{selectAllLabel}}\n</mat-checkbox>\n\n<mat-checkbox class=\"mtx-checkbox-normal\"\n              *ngFor=\"let item of options; let i = index;\"\n              [(ngModel)]=\"item.checked\"\n              [disabled]=\"controlDisabled || item.disabled\"\n              (change)=\"_updateNormalCheckboxState($event, i)\">\n  {{item.label}}\n</mat-checkbox>\n",
                encapsulation: ViewEncapsulation.None,
                changeDetection: ChangeDetectionStrategy.OnPush,
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef((/**
                         * @return {?}
                         */
                        () => MtxCheckboxGroupComponent)),
                        multi: true,
                    },
                ],
                styles: [".mtx-checkbox-group{display:block}.mtx-checkbox-group .mat-checkbox{margin-right:16px}[dir=rtl] .mtx-checkbox-group .mat-checkbox{margin-right:auto;margin-left:16px}"]
            }] }
];
/** @nocollapse */
MtxCheckboxGroupComponent.ctorParameters = () => [
    { type: ChangeDetectorRef }
];
MtxCheckboxGroupComponent.propDecorators = {
    selectAllLabel: [{ type: Input }],
    showSelectAll: [{ type: Input }],
    change: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    MtxCheckboxGroupComponent.prototype.selectAllLabel;
    /** @type {?} */
    MtxCheckboxGroupComponent.prototype.showSelectAll;
    /** @type {?} */
    MtxCheckboxGroupComponent.prototype.change;
    /** @type {?} */
    MtxCheckboxGroupComponent.prototype.selectAll;
    /** @type {?} */
    MtxCheckboxGroupComponent.prototype.selectAllIndeterminate;
    /** @type {?} */
    MtxCheckboxGroupComponent.prototype.options;
    /** @type {?} */
    MtxCheckboxGroupComponent.prototype.controlDisabled;
    /** @type {?} */
    MtxCheckboxGroupComponent.prototype._onChange;
    /** @type {?} */
    MtxCheckboxGroupComponent.prototype._onTouched;
    /**
     * @type {?}
     * @private
     */
    MtxCheckboxGroupComponent.prototype._changeDetectorRef;
}
//# sourceMappingURL=data:application/json;base64,