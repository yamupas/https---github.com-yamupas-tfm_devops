/**
 * @fileoverview added by tsickle
 * Generated from: text3d.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, ContentChild, TemplateRef, ViewEncapsulation, ChangeDetectionStrategy, } from '@angular/core';
var MtxText3dComponent = /** @class */ (function () {
    function MtxText3dComponent() {
        this.text = '';
        this.depth = 20;
        this.rotateX = 60;
        this.rotateY = 0;
        this.rotateZ = 0;
    }
    Object.defineProperty(MtxText3dComponent.prototype, "transform", {
        get: /**
         * @return {?}
         */
        function () {
            return "rotateX(" + this.rotateX + "deg) rotateY(" + this.rotateY + "deg) rotateZ(" + this.rotateZ + "deg)";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MtxText3dComponent.prototype, "depthArr", {
        get: /**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var tmpArr = [];
            for (var i = 1; i <= this.depth; i++) {
                tmpArr.push(i);
            }
            return tmpArr;
        },
        enumerable: true,
        configurable: true
    });
    MtxText3dComponent.decorators = [
        { type: Component, args: [{
                    selector: 'mtx-text3d',
                    exportAs: 'mtxText3d',
                    host: {
                        'class': 'mtx-text3d',
                        '[style.transform]': 'transform',
                    },
                    template: "<span class=\"mtx-text3d-layer\" *ngFor=\"let i of depthArr\"\n      [ngStyle]=\"{'z-index': -i, 'transform': 'translate3d(0, 0,'+ -i + 'px)'}\">\n  {{text}}\n  <ng-container [ngTemplateOutlet]=\"template\"></ng-container>\n</span>\n",
                    encapsulation: ViewEncapsulation.None,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    styles: [".mtx-text3d{display:block;transform-style:preserve-3d;-webkit-animation:5s infinite rotate;animation:5s infinite rotate;font-weight:700}.mtx-text3d .mtx-text3d-layer{display:block;text-align:center;font-size:10rem;text-shadow:0 0 1px rgba(0,0,0,.5)}.mtx-text3d .mtx-text3d-layer:not(:first-child){position:absolute;top:0;left:0;right:0;margin:auto;transform-style:preserve-3d;color:#fbfbfb;text-shadow:0 0 20px rgba(124,124,124,.4)}.mtx-text3d .mtx-text3d-layer:first-child{color:#171717}"]
                }] }
    ];
    /** @nocollapse */
    MtxText3dComponent.ctorParameters = function () { return []; };
    MtxText3dComponent.propDecorators = {
        template: [{ type: ContentChild, args: [TemplateRef, { static: false },] }],
        text: [{ type: Input }],
        depth: [{ type: Input }],
        rotateX: [{ type: Input }],
        rotateY: [{ type: Input }],
        rotateZ: [{ type: Input }]
    };
    return MtxText3dComponent;
}());
export { MtxText3dComponent };
if (false) {
    /** @type {?} */
    MtxText3dComponent.prototype.template;
    /** @type {?} */
    MtxText3dComponent.prototype.text;
    /** @type {?} */
    MtxText3dComponent.prototype.depth;
    /** @type {?} */
    MtxText3dComponent.prototype.rotateX;
    /** @type {?} */
    MtxText3dComponent.prototype.rotateY;
    /** @type {?} */
    MtxText3dComponent.prototype.rotateZ;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGV4dDNkLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BuZy1tYXRlcm8vZXh0ZW5zaW9ucy90ZXh0M2QvIiwic291cmNlcyI6WyJ0ZXh0M2QuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUNMLFNBQVMsRUFDVCxLQUFLLEVBQ0wsWUFBWSxFQUNaLFdBQVcsRUFDWCxpQkFBaUIsRUFDakIsdUJBQXVCLEdBQ3hCLE1BQU0sZUFBZSxDQUFDO0FBRXZCO0lBbUNFO1FBcEJTLFNBQUksR0FBRyxFQUFFLENBQUM7UUFFVixVQUFLLEdBQUcsRUFBRSxDQUFDO1FBRVgsWUFBTyxHQUFHLEVBQUUsQ0FBQztRQUNiLFlBQU8sR0FBRyxDQUFDLENBQUM7UUFDWixZQUFPLEdBQUcsQ0FBQyxDQUFDO0lBY04sQ0FBQztJQVpoQixzQkFBSSx5Q0FBUzs7OztRQUFiO1lBQ0UsT0FBTyxhQUFXLElBQUksQ0FBQyxPQUFPLHFCQUFnQixJQUFJLENBQUMsT0FBTyxxQkFBZ0IsSUFBSSxDQUFDLE9BQU8sU0FBTSxDQUFDO1FBQy9GLENBQUM7OztPQUFBO0lBRUQsc0JBQUksd0NBQVE7Ozs7UUFBWjs7Z0JBQ1EsTUFBTSxHQUFHLEVBQUU7WUFDakIsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxJQUFJLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQyxFQUFFLEVBQUU7Z0JBQ3BDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7YUFDaEI7WUFDRCxPQUFPLE1BQU0sQ0FBQztRQUNoQixDQUFDOzs7T0FBQTs7Z0JBakNGLFNBQVMsU0FBQztvQkFDVCxRQUFRLEVBQUUsWUFBWTtvQkFDdEIsUUFBUSxFQUFFLFdBQVc7b0JBQ3JCLElBQUksRUFBRTt3QkFDSixPQUFPLEVBQUUsWUFBWTt3QkFDckIsbUJBQW1CLEVBQUUsV0FBVztxQkFDakM7b0JBQ0QscVBBQXNDO29CQUV0QyxhQUFhLEVBQUUsaUJBQWlCLENBQUMsSUFBSTtvQkFDckMsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07O2lCQUNoRDs7Ozs7MkJBRUUsWUFBWSxTQUFDLFdBQVcsRUFBRSxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUU7dUJBRTNDLEtBQUs7d0JBRUwsS0FBSzswQkFFTCxLQUFLOzBCQUNMLEtBQUs7MEJBQ0wsS0FBSzs7SUFlUix5QkFBQztDQUFBLEFBcENELElBb0NDO1NBeEJZLGtCQUFrQjs7O0lBQzdCLHNDQUF5RTs7SUFFekUsa0NBQW1COztJQUVuQixtQ0FBb0I7O0lBRXBCLHFDQUFzQjs7SUFDdEIscUNBQXFCOztJQUNyQixxQ0FBcUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBDb21wb25lbnQsXG4gIElucHV0LFxuICBDb250ZW50Q2hpbGQsXG4gIFRlbXBsYXRlUmVmLFxuICBWaWV3RW5jYXBzdWxhdGlvbixcbiAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdtdHgtdGV4dDNkJyxcbiAgZXhwb3J0QXM6ICdtdHhUZXh0M2QnLFxuICBob3N0OiB7XG4gICAgJ2NsYXNzJzogJ210eC10ZXh0M2QnLFxuICAgICdbc3R5bGUudHJhbnNmb3JtXSc6ICd0cmFuc2Zvcm0nLFxuICB9LFxuICB0ZW1wbGF0ZVVybDogJy4vdGV4dDNkLmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVVcmxzOiBbJy4vdGV4dDNkLmNvbXBvbmVudC5zY3NzJ10sXG4gIGVuY2Fwc3VsYXRpb246IFZpZXdFbmNhcHN1bGF0aW9uLk5vbmUsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxufSlcbmV4cG9ydCBjbGFzcyBNdHhUZXh0M2RDb21wb25lbnQge1xuICBAQ29udGVudENoaWxkKFRlbXBsYXRlUmVmLCB7IHN0YXRpYzogZmFsc2UgfSkgdGVtcGxhdGU6IFRlbXBsYXRlUmVmPGFueT47XG5cbiAgQElucHV0KCkgdGV4dCA9ICcnO1xuXG4gIEBJbnB1dCgpIGRlcHRoID0gMjA7XG5cbiAgQElucHV0KCkgcm90YXRlWCA9IDYwO1xuICBASW5wdXQoKSByb3RhdGVZID0gMDtcbiAgQElucHV0KCkgcm90YXRlWiA9IDA7XG5cbiAgZ2V0IHRyYW5zZm9ybSgpIHtcbiAgICByZXR1cm4gYHJvdGF0ZVgoJHt0aGlzLnJvdGF0ZVh9ZGVnKSByb3RhdGVZKCR7dGhpcy5yb3RhdGVZfWRlZykgcm90YXRlWigke3RoaXMucm90YXRlWn1kZWcpYDtcbiAgfVxuXG4gIGdldCBkZXB0aEFycigpIHtcbiAgICBjb25zdCB0bXBBcnIgPSBbXTtcbiAgICBmb3IgKGxldCBpID0gMTsgaSA8PSB0aGlzLmRlcHRoOyBpKyspIHtcbiAgICAgIHRtcEFyci5wdXNoKGkpO1xuICAgIH1cbiAgICByZXR1cm4gdG1wQXJyO1xuICB9XG5cbiAgY29uc3RydWN0b3IoKSB7fVxufVxuIl19