import { EventEmitter, OnInit, TemplateRef, ViewContainerRef } from '@angular/core';
import { StrategyFunction } from '../service/configuration.service';
import * as ɵngcc0 from '@angular/core';
export declare class NgxPermissionsRestrictStubDirective implements OnInit {
    private viewContainer;
    ngxPermissionsOnly: string | string[];
    ngxPermissionsOnlyThen: TemplateRef<any>;
    ngxPermissionsOnlyElse: TemplateRef<any>;
    ngxPermissionsExcept: string | string[];
    ngxPermissionsExceptElse: TemplateRef<any>;
    ngxPermissionsExceptThen: TemplateRef<any>;
    ngxPermissionsThen: TemplateRef<any>;
    ngxPermissionsElse: TemplateRef<any>;
    ngxPermissionsOnlyAuthorisedStrategy: string | StrategyFunction;
    ngxPermissionsOnlyUnauthorisedStrategy: string | StrategyFunction;
    ngxPermissionsExceptUnauthorisedStrategy: string | StrategyFunction;
    ngxPermissionsExceptAuthorisedStrategy: string | StrategyFunction;
    ngxPermissionsUnauthorisedStrategy: string | StrategyFunction;
    ngxPermissionsAuthorisedStrategy: string | StrategyFunction;
    permissionsAuthorized: EventEmitter<{}>;
    permissionsUnauthorized: EventEmitter<{}>;
    constructor(viewContainer: ViewContainerRef);
    ngOnInit(): void;
    private getUnAuthorizedTemplate;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NgxPermissionsRestrictStubDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<NgxPermissionsRestrictStubDirective, "[ngxPermissionsOnly],[ngxPermissionsExcept]", never, { "ngxPermissionsOnly": "ngxPermissionsOnly"; "ngxPermissionsOnlyThen": "ngxPermissionsOnlyThen"; "ngxPermissionsOnlyElse": "ngxPermissionsOnlyElse"; "ngxPermissionsExcept": "ngxPermissionsExcept"; "ngxPermissionsExceptElse": "ngxPermissionsExceptElse"; "ngxPermissionsExceptThen": "ngxPermissionsExceptThen"; "ngxPermissionsThen": "ngxPermissionsThen"; "ngxPermissionsElse": "ngxPermissionsElse"; "ngxPermissionsOnlyAuthorisedStrategy": "ngxPermissionsOnlyAuthorisedStrategy"; "ngxPermissionsOnlyUnauthorisedStrategy": "ngxPermissionsOnlyUnauthorisedStrategy"; "ngxPermissionsExceptUnauthorisedStrategy": "ngxPermissionsExceptUnauthorisedStrategy"; "ngxPermissionsExceptAuthorisedStrategy": "ngxPermissionsExceptAuthorisedStrategy"; "ngxPermissionsUnauthorisedStrategy": "ngxPermissionsUnauthorisedStrategy"; "ngxPermissionsAuthorisedStrategy": "ngxPermissionsAuthorisedStrategy"; }, { "permissionsAuthorized": "permissionsAuthorized"; "permissionsUnauthorized": "permissionsUnauthorized"; }, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGVybWlzc2lvbnMtcmVzdHJpY3QuZGlyZWN0aXZlLnN0dWIuZC50cyIsInNvdXJjZXMiOlsicGVybWlzc2lvbnMtcmVzdHJpY3QuZGlyZWN0aXZlLnN0dWIuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFdmVudEVtaXR0ZXIsIE9uSW5pdCwgVGVtcGxhdGVSZWYsIFZpZXdDb250YWluZXJSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgU3RyYXRlZ3lGdW5jdGlvbiB9IGZyb20gJy4uL3NlcnZpY2UvY29uZmlndXJhdGlvbi5zZXJ2aWNlJztcclxuZXhwb3J0IGRlY2xhcmUgY2xhc3MgTmd4UGVybWlzc2lvbnNSZXN0cmljdFN0dWJEaXJlY3RpdmUgaW1wbGVtZW50cyBPbkluaXQge1xyXG4gICAgcHJpdmF0ZSB2aWV3Q29udGFpbmVyO1xyXG4gICAgbmd4UGVybWlzc2lvbnNPbmx5OiBzdHJpbmcgfCBzdHJpbmdbXTtcclxuICAgIG5neFBlcm1pc3Npb25zT25seVRoZW46IFRlbXBsYXRlUmVmPGFueT47XHJcbiAgICBuZ3hQZXJtaXNzaW9uc09ubHlFbHNlOiBUZW1wbGF0ZVJlZjxhbnk+O1xyXG4gICAgbmd4UGVybWlzc2lvbnNFeGNlcHQ6IHN0cmluZyB8IHN0cmluZ1tdO1xyXG4gICAgbmd4UGVybWlzc2lvbnNFeGNlcHRFbHNlOiBUZW1wbGF0ZVJlZjxhbnk+O1xyXG4gICAgbmd4UGVybWlzc2lvbnNFeGNlcHRUaGVuOiBUZW1wbGF0ZVJlZjxhbnk+O1xyXG4gICAgbmd4UGVybWlzc2lvbnNUaGVuOiBUZW1wbGF0ZVJlZjxhbnk+O1xyXG4gICAgbmd4UGVybWlzc2lvbnNFbHNlOiBUZW1wbGF0ZVJlZjxhbnk+O1xyXG4gICAgbmd4UGVybWlzc2lvbnNPbmx5QXV0aG9yaXNlZFN0cmF0ZWd5OiBzdHJpbmcgfCBTdHJhdGVneUZ1bmN0aW9uO1xyXG4gICAgbmd4UGVybWlzc2lvbnNPbmx5VW5hdXRob3Jpc2VkU3RyYXRlZ3k6IHN0cmluZyB8IFN0cmF0ZWd5RnVuY3Rpb247XHJcbiAgICBuZ3hQZXJtaXNzaW9uc0V4Y2VwdFVuYXV0aG9yaXNlZFN0cmF0ZWd5OiBzdHJpbmcgfCBTdHJhdGVneUZ1bmN0aW9uO1xyXG4gICAgbmd4UGVybWlzc2lvbnNFeGNlcHRBdXRob3Jpc2VkU3RyYXRlZ3k6IHN0cmluZyB8IFN0cmF0ZWd5RnVuY3Rpb247XHJcbiAgICBuZ3hQZXJtaXNzaW9uc1VuYXV0aG9yaXNlZFN0cmF0ZWd5OiBzdHJpbmcgfCBTdHJhdGVneUZ1bmN0aW9uO1xyXG4gICAgbmd4UGVybWlzc2lvbnNBdXRob3Jpc2VkU3RyYXRlZ3k6IHN0cmluZyB8IFN0cmF0ZWd5RnVuY3Rpb247XHJcbiAgICBwZXJtaXNzaW9uc0F1dGhvcml6ZWQ6IEV2ZW50RW1pdHRlcjx7fT47XHJcbiAgICBwZXJtaXNzaW9uc1VuYXV0aG9yaXplZDogRXZlbnRFbWl0dGVyPHt9PjtcclxuICAgIGNvbnN0cnVjdG9yKHZpZXdDb250YWluZXI6IFZpZXdDb250YWluZXJSZWYpO1xyXG4gICAgbmdPbkluaXQoKTogdm9pZDtcclxuICAgIHByaXZhdGUgZ2V0VW5BdXRob3JpemVkVGVtcGxhdGU7XHJcbn1cclxuIl19