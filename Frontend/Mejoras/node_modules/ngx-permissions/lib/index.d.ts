import { ModuleWithProviders } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './directive/permissions.directive';
import * as ɵngcc2 from './testing/permissions-allow.directive.stub';
import * as ɵngcc3 from './testing/permissions-restrict.directive.stub';
export * from './store/roles.store';
export * from './store/permissions.store';
export * from './store/configuration.store';
export * from './directive/permissions.directive';
export * from './service/permissions.service';
export * from './service/roles.service';
export * from './service/configuration.service';
export * from './router/permissions-guard.service';
export * from './model/permissions-router-data.model';
export * from './model/role.model';
export * from './testing/permissions-allow.directive.stub';
export * from './testing/permissions-restrict.directive.stub';
export * from './enums/predefined-strategies.enum';
export interface NgxPermissionsModuleConfig {
    rolesIsolate?: boolean;
    permissionsIsolate?: boolean;
    configurationIsolate?: boolean;
}
export declare class NgxPermissionsModule {
    static forRoot(config?: NgxPermissionsModuleConfig): ModuleWithProviders<NgxPermissionsModule>;
    static forChild(config?: NgxPermissionsModuleConfig): ModuleWithProviders<NgxPermissionsModule>;
    static ɵmod: ɵngcc0.ɵɵNgModuleDefWithMeta<NgxPermissionsModule, [typeof ɵngcc1.NgxPermissionsDirective], never, [typeof ɵngcc1.NgxPermissionsDirective]>;
    static ɵinj: ɵngcc0.ɵɵInjectorDef<NgxPermissionsModule>;
}
export declare class NgxPermissionsAllowStubModule {
    static ɵmod: ɵngcc0.ɵɵNgModuleDefWithMeta<NgxPermissionsAllowStubModule, [typeof ɵngcc2.NgxPermissionsAllowStubDirective], never, [typeof ɵngcc2.NgxPermissionsAllowStubDirective]>;
    static ɵinj: ɵngcc0.ɵɵInjectorDef<NgxPermissionsAllowStubModule>;
}
export declare class NgxPermissionsRestrictStubModule {
    static ɵmod: ɵngcc0.ɵɵNgModuleDefWithMeta<NgxPermissionsRestrictStubModule, [typeof ɵngcc3.NgxPermissionsRestrictStubDirective], never, [typeof ɵngcc3.NgxPermissionsRestrictStubDirective]>;
    static ɵinj: ɵngcc0.ɵɵInjectorDef<NgxPermissionsRestrictStubModule>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguZC50cyIsInNvdXJjZXMiOlsiaW5kZXguZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlEQUF5RCx5Q0FBbUI7QUFDNUUsMERBQTBELHlDQUFtQjs7O0FBQzdFO0FBQ0E7OztBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTW9kdWxlV2l0aFByb3ZpZGVycyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5leHBvcnQgKiBmcm9tICcuL3N0b3JlL3JvbGVzLnN0b3JlJztcclxuZXhwb3J0ICogZnJvbSAnLi9zdG9yZS9wZXJtaXNzaW9ucy5zdG9yZSc7XHJcbmV4cG9ydCAqIGZyb20gJy4vc3RvcmUvY29uZmlndXJhdGlvbi5zdG9yZSc7XHJcbmV4cG9ydCAqIGZyb20gJy4vZGlyZWN0aXZlL3Blcm1pc3Npb25zLmRpcmVjdGl2ZSc7XHJcbmV4cG9ydCAqIGZyb20gJy4vc2VydmljZS9wZXJtaXNzaW9ucy5zZXJ2aWNlJztcclxuZXhwb3J0ICogZnJvbSAnLi9zZXJ2aWNlL3JvbGVzLnNlcnZpY2UnO1xyXG5leHBvcnQgKiBmcm9tICcuL3NlcnZpY2UvY29uZmlndXJhdGlvbi5zZXJ2aWNlJztcclxuZXhwb3J0ICogZnJvbSAnLi9yb3V0ZXIvcGVybWlzc2lvbnMtZ3VhcmQuc2VydmljZSc7XHJcbmV4cG9ydCAqIGZyb20gJy4vbW9kZWwvcGVybWlzc2lvbnMtcm91dGVyLWRhdGEubW9kZWwnO1xyXG5leHBvcnQgKiBmcm9tICcuL21vZGVsL3JvbGUubW9kZWwnO1xyXG5leHBvcnQgKiBmcm9tICcuL3Rlc3RpbmcvcGVybWlzc2lvbnMtYWxsb3cuZGlyZWN0aXZlLnN0dWInO1xyXG5leHBvcnQgKiBmcm9tICcuL3Rlc3RpbmcvcGVybWlzc2lvbnMtcmVzdHJpY3QuZGlyZWN0aXZlLnN0dWInO1xyXG5leHBvcnQgKiBmcm9tICcuL2VudW1zL3ByZWRlZmluZWQtc3RyYXRlZ2llcy5lbnVtJztcclxuZXhwb3J0IGludGVyZmFjZSBOZ3hQZXJtaXNzaW9uc01vZHVsZUNvbmZpZyB7XHJcbiAgICByb2xlc0lzb2xhdGU/OiBib29sZWFuO1xyXG4gICAgcGVybWlzc2lvbnNJc29sYXRlPzogYm9vbGVhbjtcclxuICAgIGNvbmZpZ3VyYXRpb25Jc29sYXRlPzogYm9vbGVhbjtcclxufVxyXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBOZ3hQZXJtaXNzaW9uc01vZHVsZSB7XHJcbiAgICBzdGF0aWMgZm9yUm9vdChjb25maWc/OiBOZ3hQZXJtaXNzaW9uc01vZHVsZUNvbmZpZyk6IE1vZHVsZVdpdGhQcm92aWRlcnM7XHJcbiAgICBzdGF0aWMgZm9yQ2hpbGQoY29uZmlnPzogTmd4UGVybWlzc2lvbnNNb2R1bGVDb25maWcpOiBNb2R1bGVXaXRoUHJvdmlkZXJzO1xyXG59XHJcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIE5neFBlcm1pc3Npb25zQWxsb3dTdHViTW9kdWxlIHtcclxufVxyXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBOZ3hQZXJtaXNzaW9uc1Jlc3RyaWN0U3R1Yk1vZHVsZSB7XHJcbn1cclxuIl19