import { ActivatedRouteSnapshot, CanActivate, CanActivateChild, CanLoad, Route, Router, RouterStateSnapshot } from '@angular/router';
import { Observable } from 'rxjs';
import { NgxPermissionsService } from '../service/permissions.service';
import { NgxRolesService } from '../service/roles.service';
import * as ɵngcc0 from '@angular/core';
export declare class NgxPermissionsGuard implements CanActivate, CanLoad, CanActivateChild {
    private permissionsService;
    private rolesService;
    private router;
    constructor(permissionsService: NgxPermissionsService, rolesService: NgxRolesService, router: Router);
    canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Promise<boolean> | boolean;
    canActivateChild(childRoute: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean> | Promise<boolean> | boolean;
    canLoad(route: Route): boolean | Observable<boolean> | Promise<boolean>;
    private hasPermissions;
    private transformPermission;
    private isParameterAvailable;
    private passingExceptPermissionsValidation;
    private redirectToAnotherRoute;
    private isRedirectionWithParameters;
    private hasNavigationExtrasAsFunction;
    private hasNavigationCommandsAsFunction;
    private onlyRedirectCheck;
    private handleRedirectOfFailedPermission;
    private isFailedPermissionPropertyOfRedirectTo;
    private checkOnlyPermissions;
    private passingOnlyPermissionsValidation;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NgxPermissionsGuard, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<NgxPermissionsGuard>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGVybWlzc2lvbnMtZ3VhcmQuc2VydmljZS5kLnRzIiwic291cmNlcyI6WyJwZXJtaXNzaW9ucy1ndWFyZC5zZXJ2aWNlLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFjdGl2YXRlZFJvdXRlU25hcHNob3QsIENhbkFjdGl2YXRlLCBDYW5BY3RpdmF0ZUNoaWxkLCBDYW5Mb2FkLCBSb3V0ZSwgUm91dGVyLCBSb3V0ZXJTdGF0ZVNuYXBzaG90IH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBOZ3hQZXJtaXNzaW9uc1NlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlL3Blcm1pc3Npb25zLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBOZ3hSb2xlc1NlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlL3JvbGVzLnNlcnZpY2UnO1xyXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBOZ3hQZXJtaXNzaW9uc0d1YXJkIGltcGxlbWVudHMgQ2FuQWN0aXZhdGUsIENhbkxvYWQsIENhbkFjdGl2YXRlQ2hpbGQge1xyXG4gICAgcHJpdmF0ZSBwZXJtaXNzaW9uc1NlcnZpY2U7XHJcbiAgICBwcml2YXRlIHJvbGVzU2VydmljZTtcclxuICAgIHByaXZhdGUgcm91dGVyO1xyXG4gICAgY29uc3RydWN0b3IocGVybWlzc2lvbnNTZXJ2aWNlOiBOZ3hQZXJtaXNzaW9uc1NlcnZpY2UsIHJvbGVzU2VydmljZTogTmd4Um9sZXNTZXJ2aWNlLCByb3V0ZXI6IFJvdXRlcik7XHJcbiAgICBjYW5BY3RpdmF0ZShyb3V0ZTogQWN0aXZhdGVkUm91dGVTbmFwc2hvdCwgc3RhdGU6IFJvdXRlclN0YXRlU25hcHNob3QpOiBQcm9taXNlPGJvb2xlYW4+IHwgYm9vbGVhbjtcclxuICAgIGNhbkFjdGl2YXRlQ2hpbGQoY2hpbGRSb3V0ZTogQWN0aXZhdGVkUm91dGVTbmFwc2hvdCwgc3RhdGU6IFJvdXRlclN0YXRlU25hcHNob3QpOiBPYnNlcnZhYmxlPGJvb2xlYW4+IHwgUHJvbWlzZTxib29sZWFuPiB8IGJvb2xlYW47XHJcbiAgICBjYW5Mb2FkKHJvdXRlOiBSb3V0ZSk6IGJvb2xlYW4gfCBPYnNlcnZhYmxlPGJvb2xlYW4+IHwgUHJvbWlzZTxib29sZWFuPjtcclxuICAgIHByaXZhdGUgaGFzUGVybWlzc2lvbnM7XHJcbiAgICBwcml2YXRlIHRyYW5zZm9ybVBlcm1pc3Npb247XHJcbiAgICBwcml2YXRlIGlzUGFyYW1ldGVyQXZhaWxhYmxlO1xyXG4gICAgcHJpdmF0ZSBwYXNzaW5nRXhjZXB0UGVybWlzc2lvbnNWYWxpZGF0aW9uO1xyXG4gICAgcHJpdmF0ZSByZWRpcmVjdFRvQW5vdGhlclJvdXRlO1xyXG4gICAgcHJpdmF0ZSBpc1JlZGlyZWN0aW9uV2l0aFBhcmFtZXRlcnM7XHJcbiAgICBwcml2YXRlIGhhc05hdmlnYXRpb25FeHRyYXNBc0Z1bmN0aW9uO1xyXG4gICAgcHJpdmF0ZSBoYXNOYXZpZ2F0aW9uQ29tbWFuZHNBc0Z1bmN0aW9uO1xyXG4gICAgcHJpdmF0ZSBvbmx5UmVkaXJlY3RDaGVjaztcclxuICAgIHByaXZhdGUgaGFuZGxlUmVkaXJlY3RPZkZhaWxlZFBlcm1pc3Npb247XHJcbiAgICBwcml2YXRlIGlzRmFpbGVkUGVybWlzc2lvblByb3BlcnR5T2ZSZWRpcmVjdFRvO1xyXG4gICAgcHJpdmF0ZSBjaGVja09ubHlQZXJtaXNzaW9ucztcclxuICAgIHByaXZhdGUgcGFzc2luZ09ubHlQZXJtaXNzaW9uc1ZhbGlkYXRpb247XHJcbn1cclxuIl19