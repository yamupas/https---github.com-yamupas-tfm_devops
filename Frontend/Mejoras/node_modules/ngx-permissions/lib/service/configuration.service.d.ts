import { InjectionToken, TemplateRef } from '@angular/core';
import { Observable } from 'rxjs';
import { NgxPermissionsConfigurationStore } from '../store/configuration.store';
import * as ɵngcc0 from '@angular/core';
export declare type StrategyFunction = (templateRef?: TemplateRef<any>) => void;
export declare type Strategy = {
    [key: string]: StrategyFunction;
};
export declare const USE_CONFIGURATION_STORE: InjectionToken<{}>;
export declare class NgxPermissionsConfigurationService {
    private isolate;
    private configurationStore;
    private strategiesSource;
    strategies$: Observable<Strategy>;
    onAuthorisedDefaultStrategy: string | undefined;
    onUnAuthorisedDefaultStrategy: string | undefined;
    constructor(isolate: boolean, configurationStore: NgxPermissionsConfigurationStore);
    setDefaultOnAuthorizedStrategy(name: string | 'remove' | 'show'): void;
    setDefaultOnUnauthorizedStrategy(name: string | 'remove' | 'show'): void;
    addPermissionStrategy(key: string, func: StrategyFunction): void;
    getStrategy(key: string): StrategyFunction;
    getAllStrategies(): Strategy;
    private getDefinedStrategy;
    private isPredefinedStrategy;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NgxPermissionsConfigurationService, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<NgxPermissionsConfigurationService>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZmlndXJhdGlvbi5zZXJ2aWNlLmQudHMiLCJzb3VyY2VzIjpbImNvbmZpZ3VyYXRpb24uc2VydmljZS5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGlvblRva2VuLCBUZW1wbGF0ZVJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IE5neFBlcm1pc3Npb25zQ29uZmlndXJhdGlvblN0b3JlIH0gZnJvbSAnLi4vc3RvcmUvY29uZmlndXJhdGlvbi5zdG9yZSc7XHJcbmV4cG9ydCBkZWNsYXJlIHR5cGUgU3RyYXRlZ3lGdW5jdGlvbiA9ICh0ZW1wbGF0ZVJlZj86IFRlbXBsYXRlUmVmPGFueT4pID0+IHZvaWQ7XHJcbmV4cG9ydCBkZWNsYXJlIHR5cGUgU3RyYXRlZ3kgPSB7XHJcbiAgICBba2V5OiBzdHJpbmddOiBTdHJhdGVneUZ1bmN0aW9uO1xyXG59O1xyXG5leHBvcnQgZGVjbGFyZSBjb25zdCBVU0VfQ09ORklHVVJBVElPTl9TVE9SRTogSW5qZWN0aW9uVG9rZW48e30+O1xyXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBOZ3hQZXJtaXNzaW9uc0NvbmZpZ3VyYXRpb25TZXJ2aWNlIHtcclxuICAgIHByaXZhdGUgaXNvbGF0ZTtcclxuICAgIHByaXZhdGUgY29uZmlndXJhdGlvblN0b3JlO1xyXG4gICAgcHJpdmF0ZSBzdHJhdGVnaWVzU291cmNlO1xyXG4gICAgc3RyYXRlZ2llcyQ6IE9ic2VydmFibGU8U3RyYXRlZ3k+O1xyXG4gICAgb25BdXRob3Jpc2VkRGVmYXVsdFN0cmF0ZWd5OiBzdHJpbmcgfCB1bmRlZmluZWQ7XHJcbiAgICBvblVuQXV0aG9yaXNlZERlZmF1bHRTdHJhdGVneTogc3RyaW5nIHwgdW5kZWZpbmVkO1xyXG4gICAgY29uc3RydWN0b3IoaXNvbGF0ZTogYm9vbGVhbiwgY29uZmlndXJhdGlvblN0b3JlOiBOZ3hQZXJtaXNzaW9uc0NvbmZpZ3VyYXRpb25TdG9yZSk7XHJcbiAgICBzZXREZWZhdWx0T25BdXRob3JpemVkU3RyYXRlZ3kobmFtZTogc3RyaW5nIHwgJ3JlbW92ZScgfCAnc2hvdycpOiB2b2lkO1xyXG4gICAgc2V0RGVmYXVsdE9uVW5hdXRob3JpemVkU3RyYXRlZ3kobmFtZTogc3RyaW5nIHwgJ3JlbW92ZScgfCAnc2hvdycpOiB2b2lkO1xyXG4gICAgYWRkUGVybWlzc2lvblN0cmF0ZWd5KGtleTogc3RyaW5nLCBmdW5jOiBTdHJhdGVneUZ1bmN0aW9uKTogdm9pZDtcclxuICAgIGdldFN0cmF0ZWd5KGtleTogc3RyaW5nKTogU3RyYXRlZ3lGdW5jdGlvbjtcclxuICAgIGdldEFsbFN0cmF0ZWdpZXMoKTogU3RyYXRlZ3k7XHJcbiAgICBwcml2YXRlIGdldERlZmluZWRTdHJhdGVneTtcclxuICAgIHByaXZhdGUgaXNQcmVkZWZpbmVkU3RyYXRlZ3k7XHJcbn1cclxuIl19