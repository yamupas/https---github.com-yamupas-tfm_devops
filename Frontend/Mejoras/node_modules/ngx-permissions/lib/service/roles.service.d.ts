import { InjectionToken } from '@angular/core';
import { Observable } from 'rxjs';
import { NgxRole } from '../model/role.model';
import { NgxRolesStore } from '../store/roles.store';
import { NgxPermissionsService } from './permissions.service';
import * as ɵngcc0 from '@angular/core';
export declare const USE_ROLES_STORE: InjectionToken<{}>;
export declare type NgxRolesObject = {
    [name: string]: NgxRole;
};
export declare class NgxRolesService {
    private isolate;
    private rolesStore;
    private permissionsService;
    private rolesSource;
    roles$: Observable<NgxRolesObject>;
    constructor(isolate: boolean, rolesStore: NgxRolesStore, permissionsService: NgxPermissionsService);
    addRole(name: string, validationFunction: Function | string[]): void;
    addRoles(rolesObj: {
        [name: string]: Function | string[];
    }): void;
    flushRoles(): void;
    removeRole(roleName: string): void;
    getRoles(): NgxRolesObject;
    getRole(name: string): NgxRole;
    hasOnlyRoles(names: string | string[]): Promise<boolean>;
    private hasRoleKey;
    private hasRolePermission;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NgxRolesService, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<NgxRolesService>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm9sZXMuc2VydmljZS5kLnRzIiwic291cmNlcyI6WyJyb2xlcy5zZXJ2aWNlLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3Rpb25Ub2tlbiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IE5neFJvbGUgfSBmcm9tICcuLi9tb2RlbC9yb2xlLm1vZGVsJztcclxuaW1wb3J0IHsgTmd4Um9sZXNTdG9yZSB9IGZyb20gJy4uL3N0b3JlL3JvbGVzLnN0b3JlJztcclxuaW1wb3J0IHsgTmd4UGVybWlzc2lvbnNTZXJ2aWNlIH0gZnJvbSAnLi9wZXJtaXNzaW9ucy5zZXJ2aWNlJztcclxuZXhwb3J0IGRlY2xhcmUgY29uc3QgVVNFX1JPTEVTX1NUT1JFOiBJbmplY3Rpb25Ub2tlbjx7fT47XHJcbmV4cG9ydCBkZWNsYXJlIHR5cGUgTmd4Um9sZXNPYmplY3QgPSB7XHJcbiAgICBbbmFtZTogc3RyaW5nXTogTmd4Um9sZTtcclxufTtcclxuZXhwb3J0IGRlY2xhcmUgY2xhc3MgTmd4Um9sZXNTZXJ2aWNlIHtcclxuICAgIHByaXZhdGUgaXNvbGF0ZTtcclxuICAgIHByaXZhdGUgcm9sZXNTdG9yZTtcclxuICAgIHByaXZhdGUgcGVybWlzc2lvbnNTZXJ2aWNlO1xyXG4gICAgcHJpdmF0ZSByb2xlc1NvdXJjZTtcclxuICAgIHJvbGVzJDogT2JzZXJ2YWJsZTxOZ3hSb2xlc09iamVjdD47XHJcbiAgICBjb25zdHJ1Y3Rvcihpc29sYXRlOiBib29sZWFuLCByb2xlc1N0b3JlOiBOZ3hSb2xlc1N0b3JlLCBwZXJtaXNzaW9uc1NlcnZpY2U6IE5neFBlcm1pc3Npb25zU2VydmljZSk7XHJcbiAgICBhZGRSb2xlKG5hbWU6IHN0cmluZywgdmFsaWRhdGlvbkZ1bmN0aW9uOiBGdW5jdGlvbiB8IHN0cmluZ1tdKTogdm9pZDtcclxuICAgIGFkZFJvbGVzKHJvbGVzT2JqOiB7XHJcbiAgICAgICAgW25hbWU6IHN0cmluZ106IEZ1bmN0aW9uIHwgc3RyaW5nW107XHJcbiAgICB9KTogdm9pZDtcclxuICAgIGZsdXNoUm9sZXMoKTogdm9pZDtcclxuICAgIHJlbW92ZVJvbGUocm9sZU5hbWU6IHN0cmluZyk6IHZvaWQ7XHJcbiAgICBnZXRSb2xlcygpOiBOZ3hSb2xlc09iamVjdDtcclxuICAgIGdldFJvbGUobmFtZTogc3RyaW5nKTogTmd4Um9sZTtcclxuICAgIGhhc09ubHlSb2xlcyhuYW1lczogc3RyaW5nIHwgc3RyaW5nW10pOiBQcm9taXNlPGJvb2xlYW4+O1xyXG4gICAgcHJpdmF0ZSBoYXNSb2xlS2V5O1xyXG4gICAgcHJpdmF0ZSBoYXNSb2xlUGVybWlzc2lvbjtcclxufVxyXG4iXX0=