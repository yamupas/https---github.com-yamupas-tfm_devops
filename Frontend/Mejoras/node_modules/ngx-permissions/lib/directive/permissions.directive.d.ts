import { ChangeDetectorRef, EventEmitter, OnChanges, OnDestroy, OnInit, SimpleChanges, TemplateRef, ViewContainerRef } from '@angular/core';
import { NgxPermissionsConfigurationService, StrategyFunction } from '../service/configuration.service';
import { NgxPermissionsService } from '../service/permissions.service';
import { NgxRolesService } from '../service/roles.service';
import * as ɵngcc0 from '@angular/core';
export declare class NgxPermissionsDirective implements OnInit, OnDestroy, OnChanges {
    private permissionsService;
    private configurationService;
    private rolesService;
    private viewContainer;
    private changeDetector;
    private templateRef;
    ngxPermissionsOnly: string | string[];
    ngxPermissionsOnlyThen: TemplateRef<any>;
    ngxPermissionsOnlyElse: TemplateRef<any>;
    ngxPermissionsExcept: string | string[];
    ngxPermissionsExceptElse: TemplateRef<any>;
    ngxPermissionsExceptThen: TemplateRef<any>;
    ngxPermissionsThen: TemplateRef<any>;
    ngxPermissionsElse: TemplateRef<any>;
    ngxPermissionsOnlyAuthorisedStrategy: string | StrategyFunction;
    ngxPermissionsOnlyUnauthorisedStrategy: string | StrategyFunction;
    ngxPermissionsExceptUnauthorisedStrategy: string | StrategyFunction;
    ngxPermissionsExceptAuthorisedStrategy: string | StrategyFunction;
    ngxPermissionsUnauthorisedStrategy: string | StrategyFunction;
    ngxPermissionsAuthorisedStrategy: string | StrategyFunction;
    permissionsAuthorized: EventEmitter<{}>;
    permissionsUnauthorized: EventEmitter<{}>;
    private initPermissionSubscription;
    private firstMergeUnusedRun;
    private currentAuthorizedState;
    constructor(permissionsService: NgxPermissionsService, configurationService: NgxPermissionsConfigurationService, rolesService: NgxRolesService, viewContainer: ViewContainerRef, changeDetector: ChangeDetectorRef, templateRef: TemplateRef<any>);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    private validateExceptOnlyPermissions;
    private validateExceptAndOnlyPermissions;
    private validateOnlyPermissions;
    private handleUnauthorisedPermission;
    private handleAuthorisedPermission;
    private applyStrategyAccordingToStrategyType;
    private showTemplateBlockInView;
    private getAuthorisedTemplates;
    private elseBlockDefined;
    private thenBlockDefined;
    private getAuthorizedStrategyInput;
    private getUnAuthorizedStrategyInput;
    private applyStrategy;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NgxPermissionsDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<NgxPermissionsDirective, "[ngxPermissionsOnly],[ngxPermissionsExcept]", never, { "ngxPermissionsOnly": "ngxPermissionsOnly"; "ngxPermissionsOnlyThen": "ngxPermissionsOnlyThen"; "ngxPermissionsOnlyElse": "ngxPermissionsOnlyElse"; "ngxPermissionsExcept": "ngxPermissionsExcept"; "ngxPermissionsExceptElse": "ngxPermissionsExceptElse"; "ngxPermissionsExceptThen": "ngxPermissionsExceptThen"; "ngxPermissionsThen": "ngxPermissionsThen"; "ngxPermissionsElse": "ngxPermissionsElse"; "ngxPermissionsOnlyAuthorisedStrategy": "ngxPermissionsOnlyAuthorisedStrategy"; "ngxPermissionsOnlyUnauthorisedStrategy": "ngxPermissionsOnlyUnauthorisedStrategy"; "ngxPermissionsExceptUnauthorisedStrategy": "ngxPermissionsExceptUnauthorisedStrategy"; "ngxPermissionsExceptAuthorisedStrategy": "ngxPermissionsExceptAuthorisedStrategy"; "ngxPermissionsUnauthorisedStrategy": "ngxPermissionsUnauthorisedStrategy"; "ngxPermissionsAuthorisedStrategy": "ngxPermissionsAuthorisedStrategy"; }, { "permissionsAuthorized": "permissionsAuthorized"; "permissionsUnauthorized": "permissionsUnauthorized"; }, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGVybWlzc2lvbnMuZGlyZWN0aXZlLmQudHMiLCJzb3VyY2VzIjpbInBlcm1pc3Npb25zLmRpcmVjdGl2ZS5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENoYW5nZURldGVjdG9yUmVmLCBFdmVudEVtaXR0ZXIsIE9uQ2hhbmdlcywgT25EZXN0cm95LCBPbkluaXQsIFNpbXBsZUNoYW5nZXMsIFRlbXBsYXRlUmVmLCBWaWV3Q29udGFpbmVyUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IE5neFBlcm1pc3Npb25zQ29uZmlndXJhdGlvblNlcnZpY2UsIFN0cmF0ZWd5RnVuY3Rpb24gfSBmcm9tICcuLi9zZXJ2aWNlL2NvbmZpZ3VyYXRpb24uc2VydmljZSc7XHJcbmltcG9ydCB7IE5neFBlcm1pc3Npb25zU2VydmljZSB9IGZyb20gJy4uL3NlcnZpY2UvcGVybWlzc2lvbnMuc2VydmljZSc7XHJcbmltcG9ydCB7IE5neFJvbGVzU2VydmljZSB9IGZyb20gJy4uL3NlcnZpY2Uvcm9sZXMuc2VydmljZSc7XHJcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIE5neFBlcm1pc3Npb25zRGlyZWN0aXZlIGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3ksIE9uQ2hhbmdlcyB7XHJcbiAgICBwcml2YXRlIHBlcm1pc3Npb25zU2VydmljZTtcclxuICAgIHByaXZhdGUgY29uZmlndXJhdGlvblNlcnZpY2U7XHJcbiAgICBwcml2YXRlIHJvbGVzU2VydmljZTtcclxuICAgIHByaXZhdGUgdmlld0NvbnRhaW5lcjtcclxuICAgIHByaXZhdGUgY2hhbmdlRGV0ZWN0b3I7XHJcbiAgICBwcml2YXRlIHRlbXBsYXRlUmVmO1xyXG4gICAgbmd4UGVybWlzc2lvbnNPbmx5OiBzdHJpbmcgfCBzdHJpbmdbXTtcclxuICAgIG5neFBlcm1pc3Npb25zT25seVRoZW46IFRlbXBsYXRlUmVmPGFueT47XHJcbiAgICBuZ3hQZXJtaXNzaW9uc09ubHlFbHNlOiBUZW1wbGF0ZVJlZjxhbnk+O1xyXG4gICAgbmd4UGVybWlzc2lvbnNFeGNlcHQ6IHN0cmluZyB8IHN0cmluZ1tdO1xyXG4gICAgbmd4UGVybWlzc2lvbnNFeGNlcHRFbHNlOiBUZW1wbGF0ZVJlZjxhbnk+O1xyXG4gICAgbmd4UGVybWlzc2lvbnNFeGNlcHRUaGVuOiBUZW1wbGF0ZVJlZjxhbnk+O1xyXG4gICAgbmd4UGVybWlzc2lvbnNUaGVuOiBUZW1wbGF0ZVJlZjxhbnk+O1xyXG4gICAgbmd4UGVybWlzc2lvbnNFbHNlOiBUZW1wbGF0ZVJlZjxhbnk+O1xyXG4gICAgbmd4UGVybWlzc2lvbnNPbmx5QXV0aG9yaXNlZFN0cmF0ZWd5OiBzdHJpbmcgfCBTdHJhdGVneUZ1bmN0aW9uO1xyXG4gICAgbmd4UGVybWlzc2lvbnNPbmx5VW5hdXRob3Jpc2VkU3RyYXRlZ3k6IHN0cmluZyB8IFN0cmF0ZWd5RnVuY3Rpb247XHJcbiAgICBuZ3hQZXJtaXNzaW9uc0V4Y2VwdFVuYXV0aG9yaXNlZFN0cmF0ZWd5OiBzdHJpbmcgfCBTdHJhdGVneUZ1bmN0aW9uO1xyXG4gICAgbmd4UGVybWlzc2lvbnNFeGNlcHRBdXRob3Jpc2VkU3RyYXRlZ3k6IHN0cmluZyB8IFN0cmF0ZWd5RnVuY3Rpb247XHJcbiAgICBuZ3hQZXJtaXNzaW9uc1VuYXV0aG9yaXNlZFN0cmF0ZWd5OiBzdHJpbmcgfCBTdHJhdGVneUZ1bmN0aW9uO1xyXG4gICAgbmd4UGVybWlzc2lvbnNBdXRob3Jpc2VkU3RyYXRlZ3k6IHN0cmluZyB8IFN0cmF0ZWd5RnVuY3Rpb247XHJcbiAgICBwZXJtaXNzaW9uc0F1dGhvcml6ZWQ6IEV2ZW50RW1pdHRlcjx7fT47XHJcbiAgICBwZXJtaXNzaW9uc1VuYXV0aG9yaXplZDogRXZlbnRFbWl0dGVyPHt9PjtcclxuICAgIHByaXZhdGUgaW5pdFBlcm1pc3Npb25TdWJzY3JpcHRpb247XHJcbiAgICBwcml2YXRlIGZpcnN0TWVyZ2VVbnVzZWRSdW47XHJcbiAgICBwcml2YXRlIGN1cnJlbnRBdXRob3JpemVkU3RhdGU7XHJcbiAgICBjb25zdHJ1Y3RvcihwZXJtaXNzaW9uc1NlcnZpY2U6IE5neFBlcm1pc3Npb25zU2VydmljZSwgY29uZmlndXJhdGlvblNlcnZpY2U6IE5neFBlcm1pc3Npb25zQ29uZmlndXJhdGlvblNlcnZpY2UsIHJvbGVzU2VydmljZTogTmd4Um9sZXNTZXJ2aWNlLCB2aWV3Q29udGFpbmVyOiBWaWV3Q29udGFpbmVyUmVmLCBjaGFuZ2VEZXRlY3RvcjogQ2hhbmdlRGV0ZWN0b3JSZWYsIHRlbXBsYXRlUmVmOiBUZW1wbGF0ZVJlZjxhbnk+KTtcclxuICAgIG5nT25Jbml0KCk6IHZvaWQ7XHJcbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZDtcclxuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XHJcbiAgICBwcml2YXRlIHZhbGlkYXRlRXhjZXB0T25seVBlcm1pc3Npb25zO1xyXG4gICAgcHJpdmF0ZSB2YWxpZGF0ZUV4Y2VwdEFuZE9ubHlQZXJtaXNzaW9ucztcclxuICAgIHByaXZhdGUgdmFsaWRhdGVPbmx5UGVybWlzc2lvbnM7XHJcbiAgICBwcml2YXRlIGhhbmRsZVVuYXV0aG9yaXNlZFBlcm1pc3Npb247XHJcbiAgICBwcml2YXRlIGhhbmRsZUF1dGhvcmlzZWRQZXJtaXNzaW9uO1xyXG4gICAgcHJpdmF0ZSBhcHBseVN0cmF0ZWd5QWNjb3JkaW5nVG9TdHJhdGVneVR5cGU7XHJcbiAgICBwcml2YXRlIHNob3dUZW1wbGF0ZUJsb2NrSW5WaWV3O1xyXG4gICAgcHJpdmF0ZSBnZXRBdXRob3Jpc2VkVGVtcGxhdGVzO1xyXG4gICAgcHJpdmF0ZSBlbHNlQmxvY2tEZWZpbmVkO1xyXG4gICAgcHJpdmF0ZSB0aGVuQmxvY2tEZWZpbmVkO1xyXG4gICAgcHJpdmF0ZSBnZXRBdXRob3JpemVkU3RyYXRlZ3lJbnB1dDtcclxuICAgIHByaXZhdGUgZ2V0VW5BdXRob3JpemVkU3RyYXRlZ3lJbnB1dDtcclxuICAgIHByaXZhdGUgYXBwbHlTdHJhdGVneTtcclxufVxyXG4iXX0=