{"version":3,"file":"tinycolor.umd.min.js","sources":["../../src/css-color-names.ts","../../src/util.ts","../../src/conversion.ts","../../src/format-input.ts","../../src/index.ts","../../src/random.ts","../../src/readability.ts","../../src/umd_api.ts","../../src/from-ratio.ts","../../src/to-ms-filter.ts"],"sourcesContent":["// https://github.com/bahamas10/css-color-names/blob/master/css-color-names.json\n/**\n * @hidden\n */\nexport const names: { [key: string]: string } = {\n  aliceblue: '#f0f8ff',\n  antiquewhite: '#faebd7',\n  aqua: '#00ffff',\n  aquamarine: '#7fffd4',\n  azure: '#f0ffff',\n  beige: '#f5f5dc',\n  bisque: '#ffe4c4',\n  black: '#000000',\n  blanchedalmond: '#ffebcd',\n  blue: '#0000ff',\n  blueviolet: '#8a2be2',\n  brown: '#a52a2a',\n  burlywood: '#deb887',\n  cadetblue: '#5f9ea0',\n  chartreuse: '#7fff00',\n  chocolate: '#d2691e',\n  coral: '#ff7f50',\n  cornflowerblue: '#6495ed',\n  cornsilk: '#fff8dc',\n  crimson: '#dc143c',\n  cyan: '#00ffff',\n  darkblue: '#00008b',\n  darkcyan: '#008b8b',\n  darkgoldenrod: '#b8860b',\n  darkgray: '#a9a9a9',\n  darkgreen: '#006400',\n  darkgrey: '#a9a9a9',\n  darkkhaki: '#bdb76b',\n  darkmagenta: '#8b008b',\n  darkolivegreen: '#556b2f',\n  darkorange: '#ff8c00',\n  darkorchid: '#9932cc',\n  darkred: '#8b0000',\n  darksalmon: '#e9967a',\n  darkseagreen: '#8fbc8f',\n  darkslateblue: '#483d8b',\n  darkslategray: '#2f4f4f',\n  darkslategrey: '#2f4f4f',\n  darkturquoise: '#00ced1',\n  darkviolet: '#9400d3',\n  deeppink: '#ff1493',\n  deepskyblue: '#00bfff',\n  dimgray: '#696969',\n  dimgrey: '#696969',\n  dodgerblue: '#1e90ff',\n  firebrick: '#b22222',\n  floralwhite: '#fffaf0',\n  forestgreen: '#228b22',\n  fuchsia: '#ff00ff',\n  gainsboro: '#dcdcdc',\n  ghostwhite: '#f8f8ff',\n  goldenrod: '#daa520',\n  gold: '#ffd700',\n  gray: '#808080',\n  green: '#008000',\n  greenyellow: '#adff2f',\n  grey: '#808080',\n  honeydew: '#f0fff0',\n  hotpink: '#ff69b4',\n  indianred: '#cd5c5c',\n  indigo: '#4b0082',\n  ivory: '#fffff0',\n  khaki: '#f0e68c',\n  lavenderblush: '#fff0f5',\n  lavender: '#e6e6fa',\n  lawngreen: '#7cfc00',\n  lemonchiffon: '#fffacd',\n  lightblue: '#add8e6',\n  lightcoral: '#f08080',\n  lightcyan: '#e0ffff',\n  lightgoldenrodyellow: '#fafad2',\n  lightgray: '#d3d3d3',\n  lightgreen: '#90ee90',\n  lightgrey: '#d3d3d3',\n  lightpink: '#ffb6c1',\n  lightsalmon: '#ffa07a',\n  lightseagreen: '#20b2aa',\n  lightskyblue: '#87cefa',\n  lightslategray: '#778899',\n  lightslategrey: '#778899',\n  lightsteelblue: '#b0c4de',\n  lightyellow: '#ffffe0',\n  lime: '#00ff00',\n  limegreen: '#32cd32',\n  linen: '#faf0e6',\n  magenta: '#ff00ff',\n  maroon: '#800000',\n  mediumaquamarine: '#66cdaa',\n  mediumblue: '#0000cd',\n  mediumorchid: '#ba55d3',\n  mediumpurple: '#9370db',\n  mediumseagreen: '#3cb371',\n  mediumslateblue: '#7b68ee',\n  mediumspringgreen: '#00fa9a',\n  mediumturquoise: '#48d1cc',\n  mediumvioletred: '#c71585',\n  midnightblue: '#191970',\n  mintcream: '#f5fffa',\n  mistyrose: '#ffe4e1',\n  moccasin: '#ffe4b5',\n  navajowhite: '#ffdead',\n  navy: '#000080',\n  oldlace: '#fdf5e6',\n  olive: '#808000',\n  olivedrab: '#6b8e23',\n  orange: '#ffa500',\n  orangered: '#ff4500',\n  orchid: '#da70d6',\n  palegoldenrod: '#eee8aa',\n  palegreen: '#98fb98',\n  paleturquoise: '#afeeee',\n  palevioletred: '#db7093',\n  papayawhip: '#ffefd5',\n  peachpuff: '#ffdab9',\n  peru: '#cd853f',\n  pink: '#ffc0cb',\n  plum: '#dda0dd',\n  powderblue: '#b0e0e6',\n  purple: '#800080',\n  rebeccapurple: '#663399',\n  red: '#ff0000',\n  rosybrown: '#bc8f8f',\n  royalblue: '#4169e1',\n  saddlebrown: '#8b4513',\n  salmon: '#fa8072',\n  sandybrown: '#f4a460',\n  seagreen: '#2e8b57',\n  seashell: '#fff5ee',\n  sienna: '#a0522d',\n  silver: '#c0c0c0',\n  skyblue: '#87ceeb',\n  slateblue: '#6a5acd',\n  slategray: '#708090',\n  slategrey: '#708090',\n  snow: '#fffafa',\n  springgreen: '#00ff7f',\n  steelblue: '#4682b4',\n  tan: '#d2b48c',\n  teal: '#008080',\n  thistle: '#d8bfd8',\n  tomato: '#ff6347',\n  turquoise: '#40e0d0',\n  violet: '#ee82ee',\n  wheat: '#f5deb3',\n  white: '#ffffff',\n  whitesmoke: '#f5f5f5',\n  yellow: '#ffff00',\n  yellowgreen: '#9acd32',\n};\n","/**\n * Take input from [0, n] and return it as [0, 1]\n * @hidden\n */\nexport function bound01(n: any, max: number): number {\n  if (isOnePointZero(n)) {\n    n = '100%';\n  }\n\n  const isPercent = isPercentage(n);\n  n = max === 360 ? n : Math.min(max, Math.max(0, parseFloat(n)));\n\n  // Automatically convert percentage into number\n  if (isPercent) {\n    n = parseInt(String(n * max), 10) / 100;\n  }\n\n  // Handle floating point rounding errors\n  if (Math.abs(n - max) < 0.000001) {\n    return 1;\n  }\n\n  // Convert into [0, 1] range if it isn't already\n  if (max === 360) {\n    // If n is a hue given in degrees,\n    // wrap around out-of-range values into [0, 360] range\n    // then convert into [0, 1].\n    n = (n < 0 ? (n % max) + max : n % max) / parseFloat(String(max));\n  } else {\n    // If n not a hue given in degrees\n    // Convert into [0, 1] range if it isn't already.\n    n = (n % max) / parseFloat(String(max));\n  }\n\n  return n;\n}\n\n/**\n * Force a number between 0 and 1\n * @hidden\n */\nexport function clamp01(val: number): number {\n  return Math.min(1, Math.max(0, val));\n}\n\n/**\n * Need to handle 1.0 as 100%, since once it is a number, there is no difference between it and 1\n * <http://stackoverflow.com/questions/7422072/javascript-how-to-detect-number-as-a-decimal-including-1-0>\n * @hidden\n */\nexport function isOnePointZero(n: string | number): boolean {\n  return typeof n === 'string' && n.includes('.') && parseFloat(n) === 1;\n}\n\n/**\n * Check to see if string passed in is a percentage\n * @hidden\n */\nexport function isPercentage(n: string | number): boolean {\n  return typeof n === 'string' && n.includes('%');\n}\n\n/**\n * Return a valid alpha value [0,1] with all invalid values being set to 1\n * @hidden\n */\nexport function boundAlpha(a?: number | string): number {\n  a = parseFloat(a as string);\n\n  if (isNaN(a) || a < 0 || a > 1) {\n    a = 1;\n  }\n\n  return a;\n}\n\n/**\n * Replace a decimal with it's percentage value\n * @hidden\n */\nexport function convertToPercentage(n: number | string): number | string {\n  if (n <= 1) {\n    return `${Number(n) * 100}%`;\n  }\n\n  return n;\n}\n\n/**\n * Force a hex value to have 2 characters\n * @hidden\n */\nexport function pad2(c: string): string {\n  return c.length === 1 ? '0' + c : String(c);\n}\n","import { bound01, pad2 } from './util';\nimport { RGB, HSL, HSV, Numberify } from './interfaces';\n\n// `rgbToHsl`, `rgbToHsv`, `hslToRgb`, `hsvToRgb` modified from:\n// <http://mjijackson.com/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript>\n\n/**\n * Handle bounds / percentage checking to conform to CSS color spec\n * <http://www.w3.org/TR/css3-color/>\n * *Assumes:* r, g, b in [0, 255] or [0, 1]\n * *Returns:* { r, g, b } in [0, 255]\n */\nexport function rgbToRgb(r: number | string, g: number | string, b: number | string): Numberify<RGB> {\n  return {\n    r: bound01(r, 255) * 255,\n    g: bound01(g, 255) * 255,\n    b: bound01(b, 255) * 255,\n  };\n}\n\n/**\n * Converts an RGB color value to HSL.\n * *Assumes:* r, g, and b are contained in [0, 255] or [0, 1]\n * *Returns:* { h, s, l } in [0,1]\n */\nexport function rgbToHsl(r: number, g: number, b: number): Numberify<HSL> {\n  r = bound01(r, 255);\n  g = bound01(g, 255);\n  b = bound01(b, 255);\n\n  const max = Math.max(r, g, b);\n  const min = Math.min(r, g, b);\n  let h = 0;\n  let s = 0;\n  const l = (max + min) / 2;\n\n  if (max === min) {\n    s = 0;\n    h = 0; // achromatic\n  } else {\n    const d = max - min;\n    s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n    switch (max) {\n      case r:\n        h = ((g - b) / d) + (g < b ? 6 : 0);\n        break;\n      case g:\n        h = ((b - r) / d) + 2;\n        break;\n      case b:\n        h = ((r - g) / d) + 4;\n        break;\n      default:\n        break;\n    }\n\n    h /= 6;\n  }\n\n  return { h, s, l };\n}\n\nfunction hue2rgb(p: number, q: number, t: number): number {\n  if (t < 0) {\n    t += 1;\n  }\n\n  if (t > 1) {\n    t -= 1;\n  }\n\n  if (t < 1 / 6) {\n    return p + ((q - p) * (6 * t));\n  }\n\n  if (t < 1 / 2) {\n    return q;\n  }\n\n  if (t < 2 / 3) {\n    return p + ((q - p) * ((2 / 3) - t) * 6);\n  }\n\n  return p;\n}\n\n/**\n * Converts an HSL color value to RGB.\n *\n * *Assumes:* h is contained in [0, 1] or [0, 360] and s and l are contained [0, 1] or [0, 100]\n * *Returns:* { r, g, b } in the set [0, 255]\n */\nexport function hslToRgb(h: number | string, s: number | string, l: number | string): Numberify<RGB> {\n  let r: number;\n  let g: number;\n  let b: number;\n\n  h = bound01(h, 360);\n  s = bound01(s, 100);\n  l = bound01(l, 100);\n\n  if (s === 0) {\n    // achromatic\n    g = l;\n    b = l;\n    r = l;\n  } else {\n    const q = l < 0.5 ? (l * (1 + s)) : (l + s - (l * s));\n    const p = (2 * l) - q;\n    r = hue2rgb(p, q, h + (1 / 3));\n    g = hue2rgb(p, q, h);\n    b = hue2rgb(p, q, h - (1 / 3));\n  }\n\n  return { r: r * 255, g: g * 255, b: b * 255 };\n}\n\n/**\n * Converts an RGB color value to HSV\n *\n * *Assumes:* r, g, and b are contained in the set [0, 255] or [0, 1]\n * *Returns:* { h, s, v } in [0,1]\n */\nexport function rgbToHsv(r: number, g: number, b: number): Numberify<HSV> {\n  r = bound01(r, 255);\n  g = bound01(g, 255);\n  b = bound01(b, 255);\n\n  const max = Math.max(r, g, b);\n  const min = Math.min(r, g, b);\n  let h = 0;\n  const v = max;\n  const d = max - min;\n  const s = max === 0 ? 0 : d / max;\n\n  if (max === min) {\n    h = 0; // achromatic\n  } else {\n    switch (max) {\n      case r:\n        h = ((g - b) / d) + (g < b ? 6 : 0);\n        break;\n      case g:\n        h = ((b - r) / d) + 2;\n        break;\n      case b:\n        h = ((r - g) / d) + 4;\n        break;\n      default:\n        break;\n    }\n\n    h /= 6;\n  }\n\n  return { h, s, v };\n}\n\n/**\n * Converts an HSV color value to RGB.\n *\n * *Assumes:* h is contained in [0, 1] or [0, 360] and s and v are contained in [0, 1] or [0, 100]\n * *Returns:* { r, g, b } in the set [0, 255]\n */\nexport function hsvToRgb(h: number | string, s: number | string, v: number | string): Numberify<RGB> {\n  h = bound01(h, 360) * 6;\n  s = bound01(s, 100);\n  v = bound01(v, 100);\n\n  const i = Math.floor(h);\n  const f = h - i;\n  const p = v * (1 - s);\n  const q = v * (1 - (f * s));\n  const t = v * (1 - ((1 - f) * s));\n  const mod = i % 6;\n  const r = [v, q, p, p, t, v][mod];\n  const g = [t, v, v, q, p, p][mod];\n  const b = [p, p, t, v, v, q][mod];\n\n  return { r: r * 255, g: g * 255, b: b * 255 };\n}\n\n/**\n * Converts an RGB color to hex\n *\n * Assumes r, g, and b are contained in the set [0, 255]\n * Returns a 3 or 6 character hex\n */\nexport function rgbToHex(r: number, g: number, b: number, allow3Char: boolean): string {\n  const hex = [\n    pad2(Math.round(r).toString(16)),\n    pad2(Math.round(g).toString(16)),\n    pad2(Math.round(b).toString(16)),\n  ];\n\n  // Return a 3 character hex if possible\n  if (\n    allow3Char &&\n    hex[0].startsWith(hex[0].charAt(1)) &&\n    hex[1].startsWith(hex[1].charAt(1)) &&\n    hex[2].startsWith(hex[2].charAt(1))\n  ) {\n    return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0);\n  }\n\n  return hex.join('');\n}\n\n/**\n * Converts an RGBA color plus alpha transparency to hex\n *\n * Assumes r, g, b are contained in the set [0, 255] and\n * a in [0, 1]. Returns a 4 or 8 character rgba hex\n */\n// eslint-disable-next-line max-params\nexport function rgbaToHex(r: number, g: number, b: number, a: number, allow4Char: boolean): string {\n  const hex = [\n    pad2(Math.round(r).toString(16)),\n    pad2(Math.round(g).toString(16)),\n    pad2(Math.round(b).toString(16)),\n    pad2(convertDecimalToHex(a)),\n  ];\n\n  // Return a 4 character hex if possible\n  if (\n    allow4Char &&\n    hex[0].startsWith(hex[0].charAt(1)) &&\n    hex[1].startsWith(hex[1].charAt(1)) &&\n    hex[2].startsWith(hex[2].charAt(1)) &&\n    hex[3].startsWith(hex[3].charAt(1))\n  ) {\n    return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0) + hex[3].charAt(0);\n  }\n\n  return hex.join('');\n}\n\n/**\n * Converts an RGBA color to an ARGB Hex8 string\n * Rarely used, but required for \"toFilter()\"\n */\nexport function rgbaToArgbHex(r: number, g: number, b: number, a: number): string {\n  const hex = [\n    pad2(convertDecimalToHex(a)),\n    pad2(Math.round(r).toString(16)),\n    pad2(Math.round(g).toString(16)),\n    pad2(Math.round(b).toString(16)),\n  ];\n\n  return hex.join('');\n}\n\n/** Converts a decimal to a hex value */\nexport function convertDecimalToHex(d: string | number): string {\n  return Math.round(parseFloat(d as string) * 255).toString(16);\n}\n\n/** Converts a hex value to a decimal */\nexport function convertHexToDecimal(h: string): number {\n  return parseIntFromHex(h) / 255;\n}\n\n/** Parse a base-16 hex value into a base-10 integer */\nexport function parseIntFromHex(val: string): number {\n  return parseInt(val, 16);\n}\n\nexport function numberInputToObject(color: number): RGB {\n  return {\n    r: color >> 16,\n    g: (color & 0xff00) >> 8,\n    b: color & 0xff,\n  };\n}\n","import { convertHexToDecimal, hslToRgb, hsvToRgb, parseIntFromHex, rgbToRgb } from './conversion';\nimport { names } from './css-color-names';\nimport { HSL, HSLA, HSV, HSVA, RGB, RGBA } from './interfaces';\nimport { boundAlpha, convertToPercentage } from './util';\n\n/**\n * Given a string or object, convert that input to RGB\n *\n * Possible string inputs:\n * ```\n * \"red\"\n * \"#f00\" or \"f00\"\n * \"#ff0000\" or \"ff0000\"\n * \"#ff000000\" or \"ff000000\"\n * \"rgb 255 0 0\" or \"rgb (255, 0, 0)\"\n * \"rgb 1.0 0 0\" or \"rgb (1, 0, 0)\"\n * \"rgba (255, 0, 0, 1)\" or \"rgba 255, 0, 0, 1\"\n * \"rgba (1.0, 0, 0, 1)\" or \"rgba 1.0, 0, 0, 1\"\n * \"hsl(0, 100%, 50%)\" or \"hsl 0 100% 50%\"\n * \"hsla(0, 100%, 50%, 1)\" or \"hsla 0 100% 50%, 1\"\n * \"hsv(0, 100%, 100%)\" or \"hsv 0 100% 100%\"\n * ```\n */\nexport function inputToRGB(\n  color: string | RGB | RGBA | HSL | HSLA | HSV | HSVA | any,\n): {\n    ok: boolean;\n    format: any;\n    r: number;\n    g: number;\n    b: number;\n    a: number;\n  } {\n  let rgb = { r: 0, g: 0, b: 0 };\n  let a = 1;\n  let s: string | number | null = null;\n  let v: string | number | null = null;\n  let l: string | number | null = null;\n  let ok = false;\n  let format: string | false = false;\n\n  if (typeof color === 'string') {\n    color = stringInputToObject(color);\n  }\n\n  if (typeof color === 'object') {\n    if (isValidCSSUnit(color.r) && isValidCSSUnit(color.g) && isValidCSSUnit(color.b)) {\n      rgb = rgbToRgb(color.r, color.g, color.b);\n      ok = true;\n      format = String(color.r).substr(-1) === '%' ? 'prgb' : 'rgb';\n    } else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.v)) {\n      s = convertToPercentage(color.s);\n      v = convertToPercentage(color.v);\n      rgb = hsvToRgb(color.h, s as number, v as number);\n      ok = true;\n      format = 'hsv';\n    } else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.l)) {\n      s = convertToPercentage(color.s);\n      l = convertToPercentage(color.l);\n      rgb = hslToRgb(color.h, s as number, l as number);\n      ok = true;\n      format = 'hsl';\n    }\n\n    if (Object.prototype.hasOwnProperty.call(color, 'a')) {\n      a = color.a;\n    }\n  }\n\n  a = boundAlpha(a);\n\n  return {\n    ok,\n    format: color.format || format,\n    r: Math.min(255, Math.max(rgb.r, 0)),\n    g: Math.min(255, Math.max(rgb.g, 0)),\n    b: Math.min(255, Math.max(rgb.b, 0)),\n    a,\n  };\n}\n\n// <http://www.w3.org/TR/css3-values/#integers>\nconst CSS_INTEGER = '[-\\\\+]?\\\\d+%?';\n\n// <http://www.w3.org/TR/css3-values/#number-value>\nconst CSS_NUMBER = '[-\\\\+]?\\\\d*\\\\.\\\\d+%?';\n\n// Allow positive/negative integer/number.  Don't capture the either/or, just the entire outcome.\nconst CSS_UNIT = `(?:${CSS_NUMBER})|(?:${CSS_INTEGER})`;\n\n// Actual matching.\n// Parentheses and commas are optional, but not required.\n// Whitespace can take the place of commas or opening paren\nconst PERMISSIVE_MATCH3 = `[\\\\s|\\\\(]+(${CSS_UNIT})[,|\\\\s]+(${CSS_UNIT})[,|\\\\s]+(${CSS_UNIT})\\\\s*\\\\)?`;\nconst PERMISSIVE_MATCH4 = `[\\\\s|\\\\(]+(${CSS_UNIT})[,|\\\\s]+(${CSS_UNIT})[,|\\\\s]+(${CSS_UNIT})[,|\\\\s]+(${CSS_UNIT})\\\\s*\\\\)?`;\n\nconst matchers = {\n  CSS_UNIT: new RegExp(CSS_UNIT),\n  rgb: new RegExp('rgb' + PERMISSIVE_MATCH3),\n  rgba: new RegExp('rgba' + PERMISSIVE_MATCH4),\n  hsl: new RegExp('hsl' + PERMISSIVE_MATCH3),\n  hsla: new RegExp('hsla' + PERMISSIVE_MATCH4),\n  hsv: new RegExp('hsv' + PERMISSIVE_MATCH3),\n  hsva: new RegExp('hsva' + PERMISSIVE_MATCH4),\n  hex3: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,\n  hex6: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,\n  hex4: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,\n  hex8: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,\n};\n\n/**\n * Permissive string parsing.  Take in a number of formats, and output an object\n * based on detected format.  Returns `{ r, g, b }` or `{ h, s, l }` or `{ h, s, v}`\n */\nexport function stringInputToObject(color: string): any {\n  color = color.trim().toLowerCase();\n  if (color.length === 0) {\n    return false;\n  }\n\n  let named = false;\n  if (names[color]) {\n    color = names[color];\n    named = true;\n  } else if (color === 'transparent') {\n    return { r: 0, g: 0, b: 0, a: 0, format: 'name' };\n  }\n\n  // Try to match string input using regular expressions.\n  // Keep most of the number bounding out of this function - don't worry about [0,1] or [0,100] or [0,360]\n  // Just return an object and let the conversion functions handle that.\n  // This way the result will be the same whether the tinycolor is initialized with string or object.\n  let match = matchers.rgb.exec(color);\n  if (match) {\n    return { r: match[1], g: match[2], b: match[3] };\n  }\n\n  match = matchers.rgba.exec(color);\n  if (match) {\n    return { r: match[1], g: match[2], b: match[3], a: match[4] };\n  }\n\n  match = matchers.hsl.exec(color);\n  if (match) {\n    return { h: match[1], s: match[2], l: match[3] };\n  }\n\n  match = matchers.hsla.exec(color);\n  if (match) {\n    return { h: match[1], s: match[2], l: match[3], a: match[4] };\n  }\n\n  match = matchers.hsv.exec(color);\n  if (match) {\n    return { h: match[1], s: match[2], v: match[3] };\n  }\n\n  match = matchers.hsva.exec(color);\n  if (match) {\n    return { h: match[1], s: match[2], v: match[3], a: match[4] };\n  }\n\n  match = matchers.hex8.exec(color);\n  if (match) {\n    return {\n      r: parseIntFromHex(match[1]),\n      g: parseIntFromHex(match[2]),\n      b: parseIntFromHex(match[3]),\n      a: convertHexToDecimal(match[4]),\n      format: named ? 'name' : 'hex8',\n    };\n  }\n\n  match = matchers.hex6.exec(color);\n  if (match) {\n    return {\n      r: parseIntFromHex(match[1]),\n      g: parseIntFromHex(match[2]),\n      b: parseIntFromHex(match[3]),\n      format: named ? 'name' : 'hex',\n    };\n  }\n\n  match = matchers.hex4.exec(color);\n  if (match) {\n    return {\n      r: parseIntFromHex(match[1] + match[1]),\n      g: parseIntFromHex(match[2] + match[2]),\n      b: parseIntFromHex(match[3] + match[3]),\n      a: convertHexToDecimal(match[4] + match[4]),\n      format: named ? 'name' : 'hex8',\n    };\n  }\n\n  match = matchers.hex3.exec(color);\n  if (match) {\n    return {\n      r: parseIntFromHex(match[1] + match[1]),\n      g: parseIntFromHex(match[2] + match[2]),\n      b: parseIntFromHex(match[3] + match[3]),\n      format: named ? 'name' : 'hex',\n    };\n  }\n\n  return false;\n}\n\n/**\n * Check to see if it looks like a CSS unit\n * (see `matchers` above for definition).\n */\nexport function isValidCSSUnit(color: string | number): boolean {\n  return Boolean(matchers.CSS_UNIT.exec(String(color)));\n}\n","import { rgbaToHex, rgbToHex, rgbToHsl, rgbToHsv, numberInputToObject } from './conversion';\nimport { names } from './css-color-names';\nimport { inputToRGB } from './format-input';\nimport { HSL, HSLA, HSV, HSVA, RGB, RGBA, Numberify } from './interfaces';\nimport { bound01, boundAlpha, clamp01 } from './util';\n\nexport interface TinyColorOptions {\n  format: string;\n  gradientType: string;\n}\n\nexport type ColorInput = string | number | RGB | RGBA | HSL | HSLA | HSV | HSVA | TinyColor;\n\nexport type ColorFormats =\n  | 'rgb'\n  | 'prgb'\n  | 'hex'\n  | 'hex3'\n  | 'hex4'\n  | 'hex6'\n  | 'hex8'\n  | 'name'\n  | 'hsl'\n  | 'hsv';\n\nexport class TinyColor {\n  /** red */\n  r!: number;\n\n  /** green */\n  g!: number;\n\n  /** blue */\n  b!: number;\n\n  /** alpha */\n  a!: number;\n\n  /** the format used to create the tinycolor instance */\n  format!: ColorFormats;\n\n  /** input passed into the constructer used to create the tinycolor instance */\n  originalInput!: ColorInput;\n\n  /** the color was successfully parsed */\n  isValid!: boolean;\n\n  gradientType?: string;\n\n  /** rounded alpha */\n  roundA!: number;\n\n  constructor(color: ColorInput = '', opts: Partial<TinyColorOptions> = {}) {\n    // If input is already a tinycolor, return itself\n    if (color instanceof TinyColor) {\n      // eslint-disable-next-line no-constructor-return\n      return color;\n    }\n\n    if (typeof color === 'number') {\n      color = numberInputToObject(color);\n    }\n\n    this.originalInput = color;\n    const rgb = inputToRGB(color);\n    this.originalInput = color;\n    this.r = rgb.r;\n    this.g = rgb.g;\n    this.b = rgb.b;\n    this.a = rgb.a;\n    this.roundA = Math.round(100 * this.a) / 100;\n    this.format = opts.format ?? rgb.format;\n    this.gradientType = opts.gradientType;\n\n    // Don't let the range of [0,255] come back in [0,1].\n    // Potentially lose a little bit of precision here, but will fix issues where\n    // .5 gets interpreted as half of the total, instead of half of 1\n    // If it was supposed to be 128, this was already taken care of by `inputToRgb`\n    if (this.r < 1) {\n      this.r = Math.round(this.r);\n    }\n\n    if (this.g < 1) {\n      this.g = Math.round(this.g);\n    }\n\n    if (this.b < 1) {\n      this.b = Math.round(this.b);\n    }\n\n    this.isValid = rgb.ok;\n  }\n\n  isDark(): boolean {\n    return this.getBrightness() < 128;\n  }\n\n  isLight(): boolean {\n    return !this.isDark();\n  }\n\n  /**\n   * Returns the perceived brightness of the color, from 0-255.\n   */\n  getBrightness(): number {\n    // http://www.w3.org/TR/AERT#color-contrast\n    const rgb = this.toRgb();\n    return ((rgb.r * 299) + (rgb.g * 587) + (rgb.b * 114)) / 1000;\n  }\n\n  /**\n   * Returns the perceived luminance of a color, from 0-1.\n   */\n  getLuminance(): number {\n    // http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef\n    const rgb = this.toRgb();\n    let R;\n    let G;\n    let B;\n    const RsRGB = rgb.r / 255;\n    const GsRGB = rgb.g / 255;\n    const BsRGB = rgb.b / 255;\n\n    if (RsRGB <= 0.03928) {\n      R = RsRGB / 12.92;\n    } else {\n      R = ((RsRGB + 0.055) / 1.055) ** 2.4;\n    }\n\n    if (GsRGB <= 0.03928) {\n      G = GsRGB / 12.92;\n    } else {\n      G = ((GsRGB + 0.055) / 1.055) ** 2.4;\n    }\n\n    if (BsRGB <= 0.03928) {\n      B = BsRGB / 12.92;\n    } else {\n      B = ((BsRGB + 0.055) / 1.055) ** 2.4;\n    }\n\n    return (0.2126 * R) + (0.7152 * G) + (0.0722 * B);\n  }\n\n  /**\n   * Returns the alpha value of a color, from 0-1.\n   */\n  getAlpha(): number {\n    return this.a;\n  }\n\n  /**\n   * Sets the alpha value on the current color.\n   *\n   * @param alpha - The new alpha value. The accepted range is 0-1.\n   */\n  setAlpha(alpha?: string | number): TinyColor {\n    this.a = boundAlpha(alpha);\n    this.roundA = Math.round(100 * this.a) / 100;\n    return this;\n  }\n\n  /**\n   * Returns the object as a HSVA object.\n   */\n  toHsv(): Numberify<HSVA> {\n    const hsv = rgbToHsv(this.r, this.g, this.b);\n    return { h: hsv.h * 360, s: hsv.s, v: hsv.v, a: this.a };\n  }\n\n  /**\n   * Returns the hsva values interpolated into a string with the following format:\n   * \"hsva(xxx, xxx, xxx, xx)\".\n   */\n  toHsvString(): string {\n    const hsv = rgbToHsv(this.r, this.g, this.b);\n    const h = Math.round(hsv.h * 360);\n    const s = Math.round(hsv.s * 100);\n    const v = Math.round(hsv.v * 100);\n    return this.a === 1 ? `hsv(${h}, ${s}%, ${v}%)` : `hsva(${h}, ${s}%, ${v}%, ${this.roundA})`;\n  }\n\n  /**\n   * Returns the object as a HSLA object.\n   */\n  toHsl(): Numberify<HSLA> {\n    const hsl = rgbToHsl(this.r, this.g, this.b);\n    return { h: hsl.h * 360, s: hsl.s, l: hsl.l, a: this.a };\n  }\n\n  /**\n   * Returns the hsla values interpolated into a string with the following format:\n   * \"hsla(xxx, xxx, xxx, xx)\".\n   */\n  toHslString(): string {\n    const hsl = rgbToHsl(this.r, this.g, this.b);\n    const h = Math.round(hsl.h * 360);\n    const s = Math.round(hsl.s * 100);\n    const l = Math.round(hsl.l * 100);\n    return this.a === 1 ? `hsl(${h}, ${s}%, ${l}%)` : `hsla(${h}, ${s}%, ${l}%, ${this.roundA})`;\n  }\n\n  /**\n   * Returns the hex value of the color.\n   * @param allow3Char will shorten hex value to 3 char if possible\n   */\n  toHex(allow3Char = false): string {\n    return rgbToHex(this.r, this.g, this.b, allow3Char);\n  }\n\n  /**\n   * Returns the hex value of the color -with a # appened.\n   * @param allow3Char will shorten hex value to 3 char if possible\n   */\n  toHexString(allow3Char = false): string {\n    return '#' + this.toHex(allow3Char);\n  }\n\n  /**\n   * Returns the hex 8 value of the color.\n   * @param allow4Char will shorten hex value to 4 char if possible\n   */\n  toHex8(allow4Char = false): string {\n    return rgbaToHex(this.r, this.g, this.b, this.a, allow4Char);\n  }\n\n  /**\n   * Returns the hex 8 value of the color -with a # appened.\n   * @param allow4Char will shorten hex value to 4 char if possible\n   */\n  toHex8String(allow4Char = false): string {\n    return '#' + this.toHex8(allow4Char);\n  }\n\n  /**\n   * Returns the object as a RGBA object.\n   */\n  toRgb(): Numberify<RGBA> {\n    return {\n      r: Math.round(this.r),\n      g: Math.round(this.g),\n      b: Math.round(this.b),\n      a: this.a,\n    };\n  }\n\n  /**\n   * Returns the RGBA values interpolated into a string with the following format:\n   * \"RGBA(xxx, xxx, xxx, xx)\".\n   */\n  toRgbString(): string {\n    const r = Math.round(this.r);\n    const g = Math.round(this.g);\n    const b = Math.round(this.b);\n    return this.a === 1 ? `rgb(${r}, ${g}, ${b})` : `rgba(${r}, ${g}, ${b}, ${this.roundA})`;\n  }\n\n  /**\n   * Returns the object as a RGBA object.\n   */\n  toPercentageRgb(): RGBA {\n    const fmt = (x: number): string => `${Math.round(bound01(x, 255) * 100)}%`;\n    return {\n      r: fmt(this.r),\n      g: fmt(this.g),\n      b: fmt(this.b),\n      a: this.a,\n    };\n  }\n\n  /**\n   * Returns the RGBA relative values interpolated into a string\n   */\n  toPercentageRgbString(): string {\n    const rnd = (x: number): number => Math.round(bound01(x, 255) * 100);\n    return this.a === 1 ?\n      `rgb(${rnd(this.r)}%, ${rnd(this.g)}%, ${rnd(this.b)}%)` :\n      `rgba(${rnd(this.r)}%, ${rnd(this.g)}%, ${rnd(this.b)}%, ${this.roundA})`;\n  }\n\n  /**\n   * The 'real' name of the color -if there is one.\n   */\n  toName(): string | false {\n    if (this.a === 0) {\n      return 'transparent';\n    }\n\n    if (this.a < 1) {\n      return false;\n    }\n\n    const hex = '#' + rgbToHex(this.r, this.g, this.b, false);\n    for (const [key, value] of Object.entries(names)) {\n      if (hex === value) {\n        return key;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * String representation of the color.\n   *\n   * @param format - The format to be used when displaying the string representation.\n   */\n  toString(format?: ColorFormats): string | false {\n    const formatSet = Boolean(format);\n    format = format ?? this.format;\n\n    let formattedString: string | false = false;\n    const hasAlpha = this.a < 1 && this.a >= 0;\n    const needsAlphaFormat =\n      !formatSet && hasAlpha && (format.startsWith('hex') || format === 'name');\n\n    if (needsAlphaFormat) {\n      // Special case for \"transparent\", all other non-alpha formats\n      // will return rgba when there is transparency.\n      if (format === 'name' && this.a === 0) {\n        return this.toName();\n      }\n\n      return this.toRgbString();\n    }\n\n    if (format === 'rgb') {\n      formattedString = this.toRgbString();\n    }\n\n    if (format === 'prgb') {\n      formattedString = this.toPercentageRgbString();\n    }\n\n    if (format === 'hex' || format === 'hex6') {\n      formattedString = this.toHexString();\n    }\n\n    if (format === 'hex3') {\n      formattedString = this.toHexString(true);\n    }\n\n    if (format === 'hex4') {\n      formattedString = this.toHex8String(true);\n    }\n\n    if (format === 'hex8') {\n      formattedString = this.toHex8String();\n    }\n\n    if (format === 'name') {\n      formattedString = this.toName();\n    }\n\n    if (format === 'hsl') {\n      formattedString = this.toHslString();\n    }\n\n    if (format === 'hsv') {\n      formattedString = this.toHsvString();\n    }\n\n    return formattedString || this.toHexString();\n  }\n\n  toNumber(): number {\n    return (Math.round(this.r) << 16) + (Math.round(this.g) << 8) + (Math.round(this.b));\n  }\n\n  clone(): TinyColor {\n    return new TinyColor(this.toString() as string);\n  }\n\n  /**\n   * Lighten the color a given amount. Providing 100 will always return white.\n   * @param amount - valid between 1-100\n   */\n  lighten(amount = 10): TinyColor {\n    const hsl = this.toHsl();\n    hsl.l += amount / 100;\n    hsl.l = clamp01(hsl.l);\n    return new TinyColor(hsl);\n  }\n\n  /**\n   * Brighten the color a given amount, from 0 to 100.\n   * @param amount - valid between 1-100\n   */\n  brighten(amount = 10): TinyColor {\n    const rgb = this.toRgb();\n    rgb.r = Math.max(0, Math.min(255, rgb.r - Math.round(255 * -(amount / 100))));\n    rgb.g = Math.max(0, Math.min(255, rgb.g - Math.round(255 * -(amount / 100))));\n    rgb.b = Math.max(0, Math.min(255, rgb.b - Math.round(255 * -(amount / 100))));\n    return new TinyColor(rgb);\n  }\n\n  /**\n   * Darken the color a given amount, from 0 to 100.\n   * Providing 100 will always return black.\n   * @param amount - valid between 1-100\n   */\n  darken(amount = 10): TinyColor {\n    const hsl = this.toHsl();\n    hsl.l -= amount / 100;\n    hsl.l = clamp01(hsl.l);\n    return new TinyColor(hsl);\n  }\n\n  /**\n   * Mix the color with pure white, from 0 to 100.\n   * Providing 0 will do nothing, providing 100 will always return white.\n   * @param amount - valid between 1-100\n   */\n  tint(amount = 10): TinyColor {\n    return this.mix('white', amount);\n  }\n\n  /**\n   * Mix the color with pure black, from 0 to 100.\n   * Providing 0 will do nothing, providing 100 will always return black.\n   * @param amount - valid between 1-100\n   */\n  shade(amount = 10): TinyColor {\n    return this.mix('black', amount);\n  }\n\n  /**\n   * Desaturate the color a given amount, from 0 to 100.\n   * Providing 100 will is the same as calling greyscale\n   * @param amount - valid between 1-100\n   */\n  desaturate(amount = 10): TinyColor {\n    const hsl = this.toHsl();\n    hsl.s -= amount / 100;\n    hsl.s = clamp01(hsl.s);\n    return new TinyColor(hsl);\n  }\n\n  /**\n   * Saturate the color a given amount, from 0 to 100.\n   * @param amount - valid between 1-100\n   */\n  saturate(amount = 10): TinyColor {\n    const hsl = this.toHsl();\n    hsl.s += amount / 100;\n    hsl.s = clamp01(hsl.s);\n    return new TinyColor(hsl);\n  }\n\n  /**\n   * Completely desaturates a color into greyscale.\n   * Same as calling `desaturate(100)`\n   */\n  greyscale(): TinyColor {\n    return this.desaturate(100);\n  }\n\n  /**\n   * Spin takes a positive or negative amount within [-360, 360] indicating the change of hue.\n   * Values outside of this range will be wrapped into this range.\n   */\n  spin(amount: number): TinyColor {\n    const hsl = this.toHsl();\n    const hue = (hsl.h + amount) % 360;\n    hsl.h = hue < 0 ? 360 + hue : hue;\n    return new TinyColor(hsl);\n  }\n\n  /**\n   * Mix the current color a given amount with another color, from 0 to 100.\n   * 0 means no mixing (return current color).\n   */\n  mix(color: ColorInput, amount = 50): TinyColor {\n    const rgb1 = this.toRgb();\n    const rgb2 = new TinyColor(color).toRgb();\n\n    const p = amount / 100;\n    const rgba = {\n      r: ((rgb2.r - rgb1.r) * p) + rgb1.r,\n      g: ((rgb2.g - rgb1.g) * p) + rgb1.g,\n      b: ((rgb2.b - rgb1.b) * p) + rgb1.b,\n      a: ((rgb2.a - rgb1.a) * p) + rgb1.a,\n    };\n\n    return new TinyColor(rgba);\n  }\n\n  analogous(results = 6, slices = 30): TinyColor[] {\n    const hsl = this.toHsl();\n    const part = 360 / slices;\n    const ret: TinyColor[] = [this];\n\n    for (hsl.h = (hsl.h - ((part * results) >> 1) + 720) % 360; --results;) {\n      hsl.h = (hsl.h + part) % 360;\n      ret.push(new TinyColor(hsl));\n    }\n\n    return ret;\n  }\n\n  /**\n   * taken from https://github.com/infusion/jQuery-xcolor/blob/master/jquery.xcolor.js\n   */\n  complement(): TinyColor {\n    const hsl = this.toHsl();\n    hsl.h = (hsl.h + 180) % 360;\n    return new TinyColor(hsl);\n  }\n\n  monochromatic(results = 6): TinyColor[] {\n    const hsv = this.toHsv();\n    const { h } = hsv;\n    const { s } = hsv;\n    let { v } = hsv;\n    const res: TinyColor[] = [];\n    const modification = 1 / results;\n\n    while (results--) {\n      res.push(new TinyColor({ h, s, v }));\n      v = (v + modification) % 1;\n    }\n\n    return res;\n  }\n\n  splitcomplement(): TinyColor[] {\n    const hsl = this.toHsl();\n    const { h } = hsl;\n    return [\n      this,\n      new TinyColor({ h: (h + 72) % 360, s: hsl.s, l: hsl.l }),\n      new TinyColor({ h: (h + 216) % 360, s: hsl.s, l: hsl.l }),\n    ];\n  }\n\n  /**\n   * Alias for `polyad(3)`\n   */\n  triad(): TinyColor[] {\n    return this.polyad(3);\n  }\n\n  /**\n   * Alias for `polyad(4)`\n   */\n  tetrad(): TinyColor[] {\n    return this.polyad(4);\n  }\n\n  /**\n   * Get polyad colors, like (for 1, 2, 3, 4, 5, 6, 7, 8, etc...)\n   * monad, dyad, triad, tetrad, pentad, hexad, heptad, octad, etc...\n   */\n  polyad(n: number): TinyColor[] {\n    const hsl = this.toHsl();\n    const { h } = hsl;\n\n    const result: TinyColor[] = [this];\n    const increment = 360 / n;\n    for (let i = 1; i < n; i++) {\n      result.push(new TinyColor({ h: (h + (i * increment)) % 360, s: hsl.s, l: hsl.l }));\n    }\n\n    return result;\n  }\n\n  /**\n   * compare color vs current color\n   */\n  equals(color?: ColorInput): boolean {\n    return this.toRgbString() === new TinyColor(color).toRgbString();\n  }\n}\n\n// kept for backwards compatability with v1\nexport function tinycolor(color: ColorInput = '', opts: Partial<TinyColorOptions> = {}): TinyColor {\n  return new TinyColor(color, opts);\n}\n","// randomColor by David Merfield under the CC0 license\n// https://github.com/davidmerfield/randomColor/\nimport { TinyColor } from './index';\nimport { HSVA } from './interfaces';\n\nexport interface RandomOptions {\n  seed?: number;\n  hue?:\n  | number\n  | string\n  | 'red'\n  | 'orange'\n  | 'yellow'\n  | 'green'\n  | 'blue'\n  | 'purple'\n  | 'pink'\n  | 'monochrome';\n  luminosity?: 'random' | 'bright' | 'dark' | 'light';\n  alpha?: number;\n}\n\nexport interface RandomCountOptions extends RandomOptions {\n  count?: number | null;\n}\n\nexport function random(options?: RandomOptions): TinyColor;\nexport function random(options?: RandomCountOptions): TinyColor[];\nexport function random(options: RandomOptions | RandomCountOptions = {}): TinyColor | TinyColor[] {\n  // Check if we need to generate multiple colors\n  if ((options as RandomCountOptions).count !== undefined && (options as RandomCountOptions).count !== null) {\n    const totalColors: number = (options as RandomCountOptions).count as number;\n    const colors: TinyColor[] = [];\n\n    (options as RandomCountOptions).count = undefined;\n\n    while (totalColors > colors.length) {\n      // Since we're generating multiple colors,\n      // incremement the seed. Otherwise we'd just\n      // generate the same color each time...\n      (options as RandomCountOptions).count = null;\n      if (options.seed) {\n        options.seed += 1;\n      }\n\n      colors.push(random(options as RandomOptions));\n    }\n\n    (options as RandomCountOptions).count = totalColors;\n    return colors;\n  }\n\n  // First we pick a hue (H)\n  const h = pickHue(options.hue, options.seed);\n\n  // Then use H to determine saturation (S)\n  const s = pickSaturation(h, options);\n\n  // Then use S and H to determine brightness (B).\n  const v = pickBrightness(h, s, options);\n  const res: Partial<HSVA> = { h, s, v };\n  if (options.alpha !== undefined) {\n    res.a = options.alpha;\n  }\n\n  // Then we return the HSB color in the desired format\n  return new TinyColor(res as HSVA);\n}\n\nfunction pickHue(hue: number | string | undefined, seed?: number): number {\n  const hueRange = getHueRange(hue);\n  let res = randomWithin(hueRange, seed);\n\n  // Instead of storing red as two seperate ranges,\n  // we group them, using negative numbers\n  if (res < 0) {\n    res = 360 + res;\n  }\n\n  return res;\n}\n\nfunction pickSaturation(hue: number, options: RandomOptions): number {\n  if (options.hue === 'monochrome') {\n    return 0;\n  }\n\n  if (options.luminosity === 'random') {\n    return randomWithin([0, 100], options.seed);\n  }\n\n  const { saturationRange } = getColorInfo(hue);\n\n  let sMin = saturationRange[0];\n  let sMax = saturationRange[1];\n\n  switch (options.luminosity) {\n    case 'bright':\n      sMin = 55;\n      break;\n    case 'dark':\n      sMin = sMax - 10;\n      break;\n    case 'light':\n      sMax = 55;\n      break;\n    default:\n      break;\n  }\n\n  return randomWithin([sMin, sMax], options.seed);\n}\n\nfunction pickBrightness(H: number, S: number, options: RandomOptions): number {\n  let bMin = getMinimumBrightness(H, S);\n  let bMax = 100;\n\n  switch (options.luminosity) {\n    case 'dark':\n      bMax = bMin + 20;\n      break;\n    case 'light':\n      bMin = (bMax + bMin) / 2;\n      break;\n    case 'random':\n      bMin = 0;\n      bMax = 100;\n      break;\n    default:\n      break;\n  }\n\n  return randomWithin([bMin, bMax], options.seed);\n}\n\nfunction getMinimumBrightness(H: number, S: number): number {\n  const { lowerBounds } = getColorInfo(H);\n\n  for (let i = 0; i < lowerBounds.length - 1; i++) {\n    const s1 = lowerBounds[i][0];\n    const v1 = lowerBounds[i][1];\n\n    const s2 = lowerBounds[i + 1][0];\n    const v2 = lowerBounds[i + 1][1];\n\n    if (S >= s1 && S <= s2) {\n      const m = (v2 - v1) / (s2 - s1);\n      const b = v1 - (m * s1);\n\n      return (m * S) + b;\n    }\n  }\n\n  return 0;\n}\n\nfunction getHueRange(colorInput?: number | string): [number, number] {\n  const num = parseInt(colorInput as string, 10);\n  if (!Number.isNaN(num) && num < 360 && num > 0) {\n    return [num, num];\n  }\n\n  if (typeof colorInput === 'string') {\n    const namedColor = bounds.find(n => n.name === colorInput);\n    if (namedColor) {\n      const color = defineColor(namedColor);\n      if (color.hueRange) {\n        return color.hueRange;\n      }\n    }\n\n    const parsed = new TinyColor(colorInput);\n    if (parsed.isValid) {\n      const hue = parsed.toHsv().h;\n      return [hue, hue];\n    }\n  }\n\n  return [0, 360];\n}\n\nfunction getColorInfo(hue: number): {\n  name: string;\n  hueRange: [number, number] | null;\n  lowerBounds: Array<[number, number]>;\n  saturationRange: number[];\n  brightnessRange: number[];\n} {\n  // Maps red colors to make picking hue easier\n  if (hue >= 334 && hue <= 360) {\n    hue -= 360;\n  }\n\n  for (const bound of bounds) {\n    const color = defineColor(bound);\n    if (color.hueRange && hue >= color.hueRange[0] && hue <= color.hueRange[1]) {\n      return color;\n    }\n  }\n\n  throw Error('Color not found');\n}\n\nfunction randomWithin(range: [number, number], seed?: number): number {\n  if (seed === undefined) {\n    return Math.floor(range[0] + (Math.random() * (range[1] + 1 - range[0])));\n  }\n\n  // Seeded random algorithm from http://indiegamr.com/generate-repeatable-random-numbers-in-js/\n  const max = range[1] || 1;\n  const min = range[0] || 0;\n  seed = ((seed * 9301) + 49297) % 233280;\n  const rnd = seed / 233280.0;\n  return Math.floor(min + (rnd * (max - min)));\n}\n\nfunction defineColor(bound: ColorBound): {\n  name: string;\n  hueRange: [number, number] | null;\n  lowerBounds: Array<[number, number]>;\n  saturationRange: number[];\n  brightnessRange: number[];\n} {\n  const sMin = bound.lowerBounds[0][0];\n  const sMax = bound.lowerBounds[bound.lowerBounds.length - 1][0];\n  const bMin = bound.lowerBounds[bound.lowerBounds.length - 1][1];\n  const bMax = bound.lowerBounds[0][1];\n\n  return {\n    name: bound.name,\n    hueRange: bound.hueRange,\n    lowerBounds: bound.lowerBounds,\n    saturationRange: [sMin, sMax],\n    brightnessRange: [bMin, bMax],\n  };\n}\n\n/**\n * @hidden\n */\nexport interface ColorBound {\n  name: string;\n  hueRange: [number, number] | null;\n  lowerBounds: Array<[number, number]>;\n}\n\n/**\n * @hidden\n */\nexport const bounds: ColorBound[] = [\n  {\n    name: 'monochrome',\n    hueRange: null,\n    lowerBounds: [[0, 0], [100, 0]],\n  },\n  {\n    name: 'red',\n    hueRange: [-26, 18],\n    lowerBounds: [\n      [20, 100],\n      [30, 92],\n      [40, 89],\n      [50, 85],\n      [60, 78],\n      [70, 70],\n      [80, 60],\n      [90, 55],\n      [100, 50],\n    ],\n  },\n  {\n    name: 'orange',\n    hueRange: [19, 46],\n    lowerBounds: [[20, 100], [30, 93], [40, 88], [50, 86], [60, 85], [70, 70], [100, 70]],\n  },\n  {\n    name: 'yellow',\n    hueRange: [47, 62],\n    lowerBounds: [[25, 100], [40, 94], [50, 89], [60, 86], [70, 84], [80, 82], [90, 80], [100, 75]],\n  },\n  {\n    name: 'green',\n    hueRange: [63, 178],\n    lowerBounds: [[30, 100], [40, 90], [50, 85], [60, 81], [70, 74], [80, 64], [90, 50], [100, 40]],\n  },\n  {\n    name: 'blue',\n    hueRange: [179, 257],\n    lowerBounds: [\n      [20, 100],\n      [30, 86],\n      [40, 80],\n      [50, 74],\n      [60, 60],\n      [70, 52],\n      [80, 44],\n      [90, 39],\n      [100, 35],\n    ],\n  },\n  {\n    name: 'purple',\n    hueRange: [258, 282],\n    lowerBounds: [\n      [20, 100],\n      [30, 87],\n      [40, 79],\n      [50, 70],\n      [60, 65],\n      [70, 59],\n      [80, 52],\n      [90, 45],\n      [100, 42],\n    ],\n  },\n  {\n    name: 'pink',\n    hueRange: [283, 334],\n    lowerBounds: [[20, 100], [30, 90], [40, 86], [60, 84], [80, 80], [90, 75], [100, 73]],\n  },\n];\n","import { ColorInput, TinyColor } from './index';\n\n// Readability Functions\n// ---------------------\n// <http://www.w3.org/TR/2008/REC-WCAG20-20081211/#contrast-ratiodef (WCAG Version 2)\n\n/**\n * AKA `contrast`\n *\n * Analyze the 2 colors and returns the color contrast defined by (WCAG Version 2)\n */\nexport function readability(color1: ColorInput, color2: ColorInput): number {\n  const c1 = new TinyColor(color1);\n  const c2 = new TinyColor(color2);\n  return (\n    (Math.max(c1.getLuminance(), c2.getLuminance()) + 0.05) /\n    (Math.min(c1.getLuminance(), c2.getLuminance()) + 0.05)\n  );\n}\n\nexport interface WCAG2Parms {\n  level?: 'AA' | 'AAA';\n  size?: 'large' | 'small';\n}\n\n/**\n * Ensure that foreground and background color combinations meet WCAG2 guidelines.\n * The third argument is an object.\n *      the 'level' property states 'AA' or 'AAA' - if missing or invalid, it defaults to 'AA';\n *      the 'size' property states 'large' or 'small' - if missing or invalid, it defaults to 'small'.\n * If the entire object is absent, isReadable defaults to {level:\"AA\",size:\"small\"}.\n *\n * Example\n * ```ts\n * new TinyColor().isReadable('#000', '#111') => false\n * new TinyColor().isReadable('#000', '#111', { level: 'AA', size: 'large' }) => false\n * ```\n */\nexport function isReadable(\n  color1: ColorInput,\n  color2: ColorInput,\n  wcag2: WCAG2Parms = { level: 'AA', size: 'small' },\n): boolean {\n  const readabilityLevel = readability(color1, color2);\n  switch ((wcag2.level ?? 'AA') + (wcag2.size ?? 'small')) {\n    case 'AAsmall':\n    case 'AAAlarge':\n      return readabilityLevel >= 4.5;\n    case 'AAlarge':\n      return readabilityLevel >= 3;\n    case 'AAAsmall':\n      return readabilityLevel >= 7;\n    default:\n      return false;\n  }\n}\n\nexport interface WCAG2FallbackParms extends WCAG2Parms {\n  includeFallbackColors?: boolean;\n}\n\n/**\n * Given a base color and a list of possible foreground or background\n * colors for that base, returns the most readable color.\n * Optionally returns Black or White if the most readable color is unreadable.\n *\n * @param baseColor - the base color.\n * @param colorList - array of colors to pick the most readable one from.\n * @param args - and object with extra arguments\n *\n * Example\n * ```ts\n * new TinyColor().mostReadable('#123', ['#124\", \"#125'], { includeFallbackColors: false }).toHexString(); // \"#112255\"\n * new TinyColor().mostReadable('#123', ['#124\", \"#125'],{ includeFallbackColors: true }).toHexString();  // \"#ffffff\"\n * new TinyColor().mostReadable('#a8015a', [\"#faf3f3\"], { includeFallbackColors:true, level: 'AAA', size: 'large' }).toHexString(); // \"#faf3f3\"\n * new TinyColor().mostReadable('#a8015a', [\"#faf3f3\"], { includeFallbackColors:true, level: 'AAA', size: 'small' }).toHexString(); // \"#ffffff\"\n * ```\n */\nexport function mostReadable(\n  baseColor: ColorInput,\n  colorList: ColorInput[],\n  args: WCAG2FallbackParms = { includeFallbackColors: false, level: 'AA', size: 'small' },\n): TinyColor | null {\n  let bestColor: TinyColor | null = null;\n  let bestScore = 0;\n  const { includeFallbackColors, level, size } = args;\n\n  for (const color of colorList) {\n    const score = readability(baseColor, color);\n    if (score > bestScore) {\n      bestScore = score;\n      bestColor = new TinyColor(color);\n    }\n  }\n\n  if (isReadable(baseColor, bestColor as TinyColor, { level, size }) || !includeFallbackColors) {\n    return bestColor;\n  }\n\n  args.includeFallbackColors = false;\n  return mostReadable(baseColor, ['#fff', '#000'], args);\n}\n","/* eslint-disable @typescript-eslint/member-ordering */\n\nimport { names } from './css-color-names';\nimport { inputToRGB, isValidCSSUnit, stringInputToObject } from './format-input';\nimport { fromRatio, legacyRandom } from './from-ratio';\nimport { tinycolor, TinyColor } from './index';\nimport { random } from './random';\nimport { mostReadable, readability } from './readability';\nimport { toMsFilter } from './to-ms-filter';\n\nexport interface TinyColorUMD {\n  (): TinyColor;\n  TinyColor: typeof TinyColor;\n  readability: typeof readability;\n  random: typeof random;\n  names: typeof names;\n  fromRatio: typeof fromRatio;\n  legacyRandom: typeof legacyRandom;\n  toMsFilter: typeof toMsFilter;\n  inputToRGB: typeof inputToRGB;\n  stringInputToObject: typeof stringInputToObject;\n  isValidCSSUnit: typeof isValidCSSUnit;\n  mostReadable: typeof mostReadable;\n}\nconst tinycolorumd = tinycolor as TinyColorUMD;\ntinycolorumd.TinyColor = TinyColor;\ntinycolorumd.readability = readability;\ntinycolorumd.mostReadable = mostReadable;\ntinycolorumd.random = random;\ntinycolorumd.names = names;\ntinycolorumd.fromRatio = fromRatio;\ntinycolorumd.legacyRandom = legacyRandom;\ntinycolorumd.toMsFilter = toMsFilter;\ntinycolorumd.inputToRGB = inputToRGB;\ntinycolorumd.stringInputToObject = stringInputToObject;\ntinycolorumd.isValidCSSUnit = isValidCSSUnit;\nexport default tinycolorumd;\n","import { TinyColor } from './index';\nimport { RGBA } from './interfaces';\nimport { convertToPercentage } from './util';\n\nexport interface RatioInput {\n  r: number | string;\n  g: number | string;\n  b: number | string;\n  a?: number | string;\n}\n\n/**\n * If input is an object, force 1 into \"1.0\" to handle ratios properly\n * String input requires \"1.0\" as input, so 1 will be treated as 1\n */\nexport function fromRatio(ratio: RatioInput, opts?: any): TinyColor {\n  const newColor: Partial<RGBA> = {\n    r: convertToPercentage(ratio.r),\n    g: convertToPercentage(ratio.g),\n    b: convertToPercentage(ratio.b),\n  };\n  if (ratio.a !== undefined) {\n    newColor.a = Number(ratio.a);\n  }\n\n  return new TinyColor(newColor as RGBA, opts);\n}\n\n/** old random function */\nexport function legacyRandom(): TinyColor {\n  return new TinyColor({\n    r: Math.random(),\n    g: Math.random(),\n    b: Math.random(),\n  });\n}\n","import { rgbaToArgbHex } from './conversion';\nimport { ColorInput, TinyColor } from './index';\n/**\n * Returns the color represented as a Microsoft filter for use in old versions of IE.\n */\nexport function toMsFilter(firstColor: ColorInput, secondColor?: ColorInput): string {\n  const color = new TinyColor(firstColor);\n  const hex8String = '#' + rgbaToArgbHex(color.r, color.g, color.b, color.a);\n  let secondHex8String = hex8String;\n  const gradientType: string = color.gradientType ? 'GradientType = 1, ' : '';\n\n  if (secondColor) {\n    const s = new TinyColor(secondColor);\n    secondHex8String = '#' + rgbaToArgbHex(s.r, s.g, s.b, s.a);\n  }\n\n  return `progid:DXImageTransform.Microsoft.gradient(${gradientType}startColorstr=${hex8String},endColorstr=${secondHex8String})`;\n}\n"],"names":["names","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkgrey","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","goldenrod","gold","gray","green","greenyellow","grey","honeydew","hotpink","indianred","indigo","ivory","khaki","lavenderblush","lavender","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgreen","lightgrey","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","rebeccapurple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","bound01","n","max","includes","parseFloat","isOnePointZero","isPercent","isPercentage","Math","min","parseInt","String","abs","clamp01","val","boundAlpha","a","isNaN","convertToPercentage","Number","pad2","c","length","rgbToHsl","r","g","b","h","s","l","d","hue2rgb","p","q","t","rgbToHsv","v","rgbToHex","allow3Char","hex","round","toString","startsWith","charAt","join","rgbaToArgbHex","convertDecimalToHex","convertHexToDecimal","parseIntFromHex","inputToRGB","color","rgb","ok","format","stringInputToObject","isValidCSSUnit","substr","i","floor","f","mod","hsvToRgb","hslToRgb","Object","prototype","hasOwnProperty","call","CSS_UNIT","PERMISSIVE_MATCH3","PERMISSIVE_MATCH4","matchers","RegExp","rgba","hsl","hsla","hsv","hsva","hex3","hex6","hex4","hex8","trim","toLowerCase","named","match","exec","Boolean","opts","TinyColor","numberInputToObject","this","originalInput","roundA","gradientType","isValid","getBrightness","isDark","toRgb","RsRGB","GsRGB","BsRGB","alpha","toHex","allow4Char","rgbaToHex","toHex8","fmt","x","rnd","_a","entries","_i","_b","key","formatSet","formattedString","hasAlpha","toRgbString","toPercentageRgbString","toHexString","toHex8String","toName","toHslString","toHsvString","amount","toHsl","mix","desaturate","hue","rgb1","rgb2","results","slices","part","ret","push","toHsv","res","modification","polyad","result","increment","getColorInfo","bounds_1","defineColor","hueRange","Error","randomWithin","range","seed","undefined","random","bound","sMin","lowerBounds","sMax","bMin","bMax","name","saturationRange","brightnessRange","bounds","readability","color1","color2","c1","c2","getLuminance","tinycolorumd","mostReadable","baseColor","colorList","args","includeFallbackColors","level","size","bestColor","bestScore","colorList_1","score","wcag2","readabilityLevel","isReadable","options","count","totalColors","colors","colorInput","num","namedColor","find","parsed","getHueRange","pickHue","luminosity","pickSaturation","H","S","s1","v1","s2","v2","m","getMinimumBrightness","pickBrightness","fromRatio","ratio","newColor","legacyRandom","toMsFilter","firstColor","secondColor","hex8String","secondHex8String"],"mappings":"gMAIO,IAAMA,EAAmC,CAC9CC,UAAW,UACXC,aAAc,UACdC,KAAM,UACNC,WAAY,UACZC,MAAO,UACPC,MAAO,UACPC,OAAQ,UACRC,MAAO,UACPC,eAAgB,UAChBC,KAAM,UACNC,WAAY,UACZC,MAAO,UACPC,UAAW,UACXC,UAAW,UACXC,WAAY,UACZC,UAAW,UACXC,MAAO,UACPC,eAAgB,UAChBC,SAAU,UACVC,QAAS,UACTC,KAAM,UACNC,SAAU,UACVC,SAAU,UACVC,cAAe,UACfC,SAAU,UACVC,UAAW,UACXC,SAAU,UACVC,UAAW,UACXC,YAAa,UACbC,eAAgB,UAChBC,WAAY,UACZC,WAAY,UACZC,QAAS,UACTC,WAAY,UACZC,aAAc,UACdC,cAAe,UACfC,cAAe,UACfC,cAAe,UACfC,cAAe,UACfC,WAAY,UACZC,SAAU,UACVC,YAAa,UACbC,QAAS,UACTC,QAAS,UACTC,WAAY,UACZC,UAAW,UACXC,YAAa,UACbC,YAAa,UACbC,QAAS,UACTC,UAAW,UACXC,WAAY,UACZC,UAAW,UACXC,KAAM,UACNC,KAAM,UACNC,MAAO,UACPC,YAAa,UACbC,KAAM,UACNC,SAAU,UACVC,QAAS,UACTC,UAAW,UACXC,OAAQ,UACRC,MAAO,UACPC,MAAO,UACPC,cAAe,UACfC,SAAU,UACVC,UAAW,UACXC,aAAc,UACdC,UAAW,UACXC,WAAY,UACZC,UAAW,UACXC,qBAAsB,UACtBC,UAAW,UACXC,WAAY,UACZC,UAAW,UACXC,UAAW,UACXC,YAAa,UACbC,cAAe,UACfC,aAAc,UACdC,eAAgB,UAChBC,eAAgB,UAChBC,eAAgB,UAChBC,YAAa,UACbC,KAAM,UACNC,UAAW,UACXC,MAAO,UACPC,QAAS,UACTC,OAAQ,UACRC,iBAAkB,UAClBC,WAAY,UACZC,aAAc,UACdC,aAAc,UACdC,eAAgB,UAChBC,gBAAiB,UACjBC,kBAAmB,UACnBC,gBAAiB,UACjBC,gBAAiB,UACjBC,aAAc,UACdC,UAAW,UACXC,UAAW,UACXC,SAAU,UACVC,YAAa,UACbC,KAAM,UACNC,QAAS,UACTC,MAAO,UACPC,UAAW,UACXC,OAAQ,UACRC,UAAW,UACXC,OAAQ,UACRC,cAAe,UACfC,UAAW,UACXC,cAAe,UACfC,cAAe,UACfC,WAAY,UACZC,UAAW,UACXC,KAAM,UACNC,KAAM,UACNC,KAAM,UACNC,WAAY,UACZC,OAAQ,UACRC,cAAe,UACfC,IAAK,UACLC,UAAW,UACXC,UAAW,UACXC,YAAa,UACbC,OAAQ,UACRC,WAAY,UACZC,SAAU,UACVC,SAAU,UACVC,OAAQ,UACRC,OAAQ,UACRC,QAAS,UACTC,UAAW,UACXC,UAAW,UACXC,UAAW,UACXC,KAAM,UACNC,YAAa,UACbC,UAAW,UACXC,IAAK,UACLC,KAAM,UACNC,QAAS,UACTC,OAAQ,UACRC,UAAW,UACXC,OAAQ,UACRC,MAAO,UACPC,MAAO,UACPC,WAAY,UACZC,OAAQ,UACRC,YAAa,oBCpJCC,EAAQC,EAAQC,aA8CDD,GAC7B,MAAoB,iBAANA,GAAkBA,EAAEE,SAAS,MAA0B,IAAlBC,WAAWH,IA9C1DI,CAAeJ,KACjBA,EAAI,QAGN,IAAMK,WAiDqBL,GAC3B,MAAoB,iBAANA,GAAkBA,EAAEE,SAAS,KAlDzBI,CAAaN,GAS/B,OARAA,EAAY,MAARC,EAAcD,EAAIO,KAAKC,IAAIP,EAAKM,KAAKN,IAAI,EAAGE,WAAWH,KAGvDK,IACFL,EAAIS,SAASC,OAAOV,EAAIC,GAAM,IAAM,KAIlCM,KAAKI,IAAIX,EAAIC,GAAO,KACf,EAQPD,EAJU,MAARC,GAIGD,EAAI,EAAKA,EAAIC,EAAOA,EAAMD,EAAIC,GAAOE,WAAWO,OAAOT,IAIvDD,EAAIC,EAAOE,WAAWO,OAAOT,aAUtBW,EAAQC,GACtB,OAAON,KAAKC,IAAI,EAAGD,KAAKN,IAAI,EAAGY,aAwBjBC,EAAWC,GAOzB,OANAA,EAAIZ,WAAWY,IAEXC,MAAMD,IAAMA,EAAI,GAAKA,EAAI,KAC3BA,EAAI,GAGCA,WAOOE,EAAoBjB,GAClC,OAAIA,GAAK,EACe,IAAZkB,OAAOlB,OAGZA,WAOOmB,EAAKC,GACnB,OAAoB,IAAbA,EAAEC,OAAe,IAAMD,EAAIV,OAAOU,YCpE3BE,EAASC,EAAWC,EAAWC,GAC7CF,EAAIxB,EAAQwB,EAAG,KACfC,EAAIzB,EAAQyB,EAAG,KACfC,EAAI1B,EAAQ0B,EAAG,KAEf,IAAMxB,EAAMM,KAAKN,IAAIsB,EAAGC,EAAGC,GACrBjB,EAAMD,KAAKC,IAAIe,EAAGC,EAAGC,GACvBC,EAAI,EACJC,EAAI,EACFC,GAAK3B,EAAMO,GAAO,EAExB,GAAIP,IAAQO,EACVmB,EAAI,EACJD,EAAI,MACC,CACL,IAAMG,EAAI5B,EAAMO,EAEhB,OADAmB,EAAIC,EAAI,GAAMC,GAAK,EAAI5B,EAAMO,GAAOqB,GAAK5B,EAAMO,GACvCP,GACN,KAAKsB,EACHG,GAAMF,EAAIC,GAAKI,GAAML,EAAIC,EAAI,EAAI,GACjC,MACF,KAAKD,EACHE,GAAMD,EAAIF,GAAKM,EAAK,EACpB,MACF,KAAKJ,EACHC,GAAMH,EAAIC,GAAKK,EAAK,EAMxBH,GAAK,EAGP,MAAO,CAAEA,IAAGC,IAAGC,KAGjB,SAASE,EAAQC,EAAWC,EAAWC,GASrC,OARIA,EAAI,IACNA,GAAK,GAGHA,EAAI,IACNA,GAAK,GAGHA,EAAI,EAAI,EACHF,EAAgB,EAAIE,GAAdD,EAAID,GAGfE,EAAI,GACCD,EAGLC,EAAI,EAAI,EACHF,GAAMC,EAAID,IAAO,EAAI,EAAKE,GAAK,EAGjCF,WAwCOG,EAASX,EAAWC,EAAWC,GAC7CF,EAAIxB,EAAQwB,EAAG,KACfC,EAAIzB,EAAQyB,EAAG,KACfC,EAAI1B,EAAQ0B,EAAG,KAEf,IAAMxB,EAAMM,KAAKN,IAAIsB,EAAGC,EAAGC,GACrBjB,EAAMD,KAAKC,IAAIe,EAAGC,EAAGC,GACvBC,EAAI,EACFS,EAAIlC,EACJ4B,EAAI5B,EAAMO,EACVmB,EAAY,IAAR1B,EAAY,EAAI4B,EAAI5B,EAE9B,GAAIA,IAAQO,EACVkB,EAAI,MACC,CACL,OAAQzB,GACN,KAAKsB,EACHG,GAAMF,EAAIC,GAAKI,GAAML,EAAIC,EAAI,EAAI,GACjC,MACF,KAAKD,EACHE,GAAMD,EAAIF,GAAKM,EAAK,EACpB,MACF,KAAKJ,EACHC,GAAMH,EAAIC,GAAKK,EAAK,EAMxBH,GAAK,EAGP,MAAO,CAAEA,IAAGC,IAAGQ,cAiCDC,EAASb,EAAWC,EAAWC,EAAWY,GACxD,IAAMC,EAAM,CACVnB,EAAKZ,KAAKgC,MAAMhB,GAAGiB,SAAS,KAC5BrB,EAAKZ,KAAKgC,MAAMf,GAAGgB,SAAS,KAC5BrB,EAAKZ,KAAKgC,MAAMd,GAAGe,SAAS,MAI9B,OACEH,GACAC,EAAI,GAAGG,WAAWH,EAAI,GAAGI,OAAO,KAChCJ,EAAI,GAAGG,WAAWH,EAAI,GAAGI,OAAO,KAChCJ,EAAI,GAAGG,WAAWH,EAAI,GAAGI,OAAO,IAEzBJ,EAAI,GAAGI,OAAO,GAAKJ,EAAI,GAAGI,OAAO,GAAKJ,EAAI,GAAGI,OAAO,GAGtDJ,EAAIK,KAAK,aAoCFC,EAAcrB,EAAWC,EAAWC,EAAWV,GAQ7D,MAPY,CACVI,EAAK0B,EAAoB9B,IACzBI,EAAKZ,KAAKgC,MAAMhB,GAAGiB,SAAS,KAC5BrB,EAAKZ,KAAKgC,MAAMf,GAAGgB,SAAS,KAC5BrB,EAAKZ,KAAKgC,MAAMd,GAAGe,SAAS,MAGnBG,KAAK,aAIFE,EAAoBhB,GAClC,OAAOtB,KAAKgC,MAAgC,IAA1BpC,WAAW0B,IAAoBW,SAAS,aAI5CM,EAAoBpB,GAClC,OAAOqB,EAAgBrB,GAAK,aAIdqB,EAAgBlC,GAC9B,OAAOJ,SAASI,EAAK,aCjPPmC,EACdC,GASA,IDrBuB1B,EAAoBC,EAAoBC,ECqB3DyB,EAAM,CAAE3B,EAAG,EAAGC,EAAG,EAAGC,EAAG,GACvBV,EAAI,EACJY,EAA4B,KAC5BQ,EAA4B,KAC5BP,EAA4B,KAC5BuB,GAAK,EACLC,GAAyB,EAgC7B,MA9BqB,iBAAVH,IACTA,EAAQI,EAAoBJ,IAGT,iBAAVA,IACLK,EAAeL,EAAM1B,IAAM+B,EAAeL,EAAMzB,IAAM8B,EAAeL,EAAMxB,IDlC1DF,ECmCJ0B,EAAM1B,EDnCkBC,ECmCfyB,EAAMzB,EDnC6BC,ECmC1BwB,EAAMxB,EAAvCyB,EDlCG,CACL3B,EAAqB,IAAlBxB,EAAQwB,EAAG,KACdC,EAAqB,IAAlBzB,EAAQyB,EAAG,KACdC,EAAqB,IAAlB1B,EAAQ0B,EAAG,MCgCZ0B,GAAK,EACLC,EAAwC,MAA/B1C,OAAOuC,EAAM1B,GAAGgC,QAAQ,GAAa,OAAS,OAC9CD,EAAeL,EAAMvB,IAAM4B,EAAeL,EAAMtB,IAAM2B,EAAeL,EAAMd,IACpFR,EAAIV,EAAoBgC,EAAMtB,GAC9BQ,EAAIlB,EAAoBgC,EAAMd,GAC9Be,WD+GmBxB,EAAoBC,EAAoBQ,GAC/DT,EAAsB,EAAlB3B,EAAQ2B,EAAG,KACfC,EAAI5B,EAAQ4B,EAAG,KACfQ,EAAIpC,EAAQoC,EAAG,KAEf,IAAMqB,EAAIjD,KAAKkD,MAAM/B,GACfgC,EAAIhC,EAAI8B,EACRzB,EAAII,GAAK,EAAIR,GACbK,EAAIG,GAAK,EAAKuB,EAAI/B,GAClBM,EAAIE,GAAK,GAAM,EAAIuB,GAAK/B,GACxBgC,EAAMH,EAAI,EAKhB,MAAO,CAAEjC,EAAO,IAJN,CAACY,EAAGH,EAAGD,EAAGA,EAAGE,EAAGE,GAAGwB,GAIRnC,EAAO,IAHlB,CAACS,EAAGE,EAAGA,EAAGH,EAAGD,EAAGA,GAAG4B,GAGIlC,EAAO,IAF9B,CAACM,EAAGA,EAAGE,EAAGE,EAAGA,EAAGH,GAAG2B,IC5HnBC,CAASX,EAAMvB,EAAGC,EAAaQ,GACrCgB,GAAK,EACLC,EAAS,OACAE,EAAeL,EAAMvB,IAAM4B,EAAeL,EAAMtB,IAAM2B,EAAeL,EAAMrB,KACpFD,EAAIV,EAAoBgC,EAAMtB,GAC9BC,EAAIX,EAAoBgC,EAAMrB,GAC9BsB,WDiCmBxB,EAAoBC,EAAoBC,GAC/D,IAAIL,EACAC,EACAC,EAMJ,GAJAC,EAAI3B,EAAQ2B,EAAG,KACfC,EAAI5B,EAAQ4B,EAAG,KACfC,EAAI7B,EAAQ6B,EAAG,KAEL,IAAND,EAEFH,EAAII,EACJH,EAAIG,EACJL,EAAIK,MACC,CACL,IAAMI,EAAIJ,EAAI,GAAOA,GAAK,EAAID,GAAOC,EAAID,EAAKC,EAAID,EAC5CI,EAAK,EAAIH,EAAKI,EACpBT,EAAIO,EAAQC,EAAGC,EAAGN,EAAK,EAAI,GAC3BF,EAAIM,EAAQC,EAAGC,EAAGN,GAClBD,EAAIK,EAAQC,EAAGC,EAAGN,EAAK,EAAI,GAG7B,MAAO,CAAEH,EAAO,IAAJA,EAASC,EAAO,IAAJA,EAASC,EAAO,IAAJA,GCvD1BoC,CAASZ,EAAMvB,EAAGC,EAAaC,GACrCuB,GAAK,EACLC,EAAS,OAGPU,OAAOC,UAAUC,eAAeC,KAAKhB,EAAO,OAC9ClC,EAAIkC,EAAMlC,IAIdA,EAAID,EAAWC,GAER,CACLoC,KACAC,OAAQH,EAAMG,QAAUA,EACxB7B,EAAGhB,KAAKC,IAAI,IAAKD,KAAKN,IAAIiD,EAAI3B,EAAG,IACjCC,EAAGjB,KAAKC,IAAI,IAAKD,KAAKN,IAAIiD,EAAI1B,EAAG,IACjCC,EAAGlB,KAAKC,IAAI,IAAKD,KAAKN,IAAIiD,EAAIzB,EAAG,IACjCV,KAKJ,IAMMmD,EAAW,6CAKXC,EAAoB,cAAcD,eAAqBA,eAAqBA,cAC5EE,EAAoB,cAAcF,eAAqBA,eAAqBA,eAAqBA,cAEjGG,EAAW,CACfH,SAAU,IAAII,OAAOJ,GACrBhB,IAAK,IAAIoB,OAAO,MAAQH,GACxBI,KAAM,IAAID,OAAO,OAASF,GAC1BI,IAAK,IAAIF,OAAO,MAAQH,GACxBM,KAAM,IAAIH,OAAO,OAASF,GAC1BM,IAAK,IAAIJ,OAAO,MAAQH,GACxBQ,KAAM,IAAIL,OAAO,OAASF,GAC1BQ,KAAM,uDACNC,KAAM,uDACNC,KAAM,uEACNC,KAAM,iFAOQ1B,EAAoBJ,GAElC,GAAqB,KADrBA,EAAQA,EAAM+B,OAAOC,eACX5D,OACR,OAAO,EAGT,IAAI6D,GAAQ,EACZ,GAAIxO,EAAMuM,GACRA,EAAQvM,EAAMuM,GACdiC,GAAQ,OACH,GAAc,gBAAVjC,EACT,MAAO,CAAE1B,EAAG,EAAGC,EAAG,EAAGC,EAAG,EAAGV,EAAG,EAAGqC,OAAQ,QAO3C,IAAI+B,EAAQd,EAASnB,IAAIkC,KAAKnC,GAC9B,OAAIkC,EACK,CAAE5D,EAAG4D,EAAM,GAAI3D,EAAG2D,EAAM,GAAI1D,EAAG0D,EAAM,KAG9CA,EAAQd,EAASE,KAAKa,KAAKnC,IAElB,CAAE1B,EAAG4D,EAAM,GAAI3D,EAAG2D,EAAM,GAAI1D,EAAG0D,EAAM,GAAIpE,EAAGoE,EAAM,KAG3DA,EAAQd,EAASG,IAAIY,KAAKnC,IAEjB,CAAEvB,EAAGyD,EAAM,GAAIxD,EAAGwD,EAAM,GAAIvD,EAAGuD,EAAM,KAG9CA,EAAQd,EAASI,KAAKW,KAAKnC,IAElB,CAAEvB,EAAGyD,EAAM,GAAIxD,EAAGwD,EAAM,GAAIvD,EAAGuD,EAAM,GAAIpE,EAAGoE,EAAM,KAG3DA,EAAQd,EAASK,IAAIU,KAAKnC,IAEjB,CAAEvB,EAAGyD,EAAM,GAAIxD,EAAGwD,EAAM,GAAIhD,EAAGgD,EAAM,KAG9CA,EAAQd,EAASM,KAAKS,KAAKnC,IAElB,CAAEvB,EAAGyD,EAAM,GAAIxD,EAAGwD,EAAM,GAAIhD,EAAGgD,EAAM,GAAIpE,EAAGoE,EAAM,KAG3DA,EAAQd,EAASU,KAAKK,KAAKnC,IAElB,CACL1B,EAAGwB,EAAgBoC,EAAM,IACzB3D,EAAGuB,EAAgBoC,EAAM,IACzB1D,EAAGsB,EAAgBoC,EAAM,IACzBpE,EAAG+B,EAAoBqC,EAAM,IAC7B/B,OAAQ8B,EAAQ,OAAS,SAI7BC,EAAQd,EAASQ,KAAKO,KAAKnC,IAElB,CACL1B,EAAGwB,EAAgBoC,EAAM,IACzB3D,EAAGuB,EAAgBoC,EAAM,IACzB1D,EAAGsB,EAAgBoC,EAAM,IACzB/B,OAAQ8B,EAAQ,OAAS,QAI7BC,EAAQd,EAASS,KAAKM,KAAKnC,IAElB,CACL1B,EAAGwB,EAAgBoC,EAAM,GAAKA,EAAM,IACpC3D,EAAGuB,EAAgBoC,EAAM,GAAKA,EAAM,IACpC1D,EAAGsB,EAAgBoC,EAAM,GAAKA,EAAM,IACpCpE,EAAG+B,EAAoBqC,EAAM,GAAKA,EAAM,IACxC/B,OAAQ8B,EAAQ,OAAS,WAI7BC,EAAQd,EAASO,KAAKQ,KAAKnC,KAElB,CACL1B,EAAGwB,EAAgBoC,EAAM,GAAKA,EAAM,IACpC3D,EAAGuB,EAAgBoC,EAAM,GAAKA,EAAM,IACpC1D,EAAGsB,EAAgBoC,EAAM,GAAKA,EAAM,IACpC/B,OAAQ8B,EAAQ,OAAS,gBAWf5B,EAAeL,GAC7B,OAAOoC,QAAQhB,EAASH,SAASkB,KAAK1E,OAAOuC,KC3L/C,iBA2BE,WAAYA,EAAwBqC,SAElC,gBAFUrC,mBAAwBqC,MAE9BrC,aAAiBsC,EAEnB,OAAOtC,EAGY,iBAAVA,IACTA,WF+M8BA,GAClC,MAAO,CACL1B,EAAG0B,GAAS,GACZzB,GAAY,MAARyB,IAAmB,EACvBxB,EAAW,IAARwB,GEnNOuC,CAAoBvC,IAG9BwC,KAAKC,cAAgBzC,EACrB,IAAMC,EAAMF,EAAWC,GACvBwC,KAAKC,cAAgBzC,EACrBwC,KAAKlE,EAAI2B,EAAI3B,EACbkE,KAAKjE,EAAI0B,EAAI1B,EACbiE,KAAKhE,EAAIyB,EAAIzB,EACbgE,KAAK1E,EAAImC,EAAInC,EACb0E,KAAKE,OAASpF,KAAKgC,MAAM,IAAMkD,KAAK1E,GAAK,IACzC0E,KAAKrC,iBAASkC,EAAKlC,sBAAUF,EAAIE,OACjCqC,KAAKG,aAAeN,EAAKM,aAMrBH,KAAKlE,EAAI,IACXkE,KAAKlE,EAAIhB,KAAKgC,MAAMkD,KAAKlE,IAGvBkE,KAAKjE,EAAI,IACXiE,KAAKjE,EAAIjB,KAAKgC,MAAMkD,KAAKjE,IAGvBiE,KAAKhE,EAAI,IACXgE,KAAKhE,EAAIlB,KAAKgC,MAAMkD,KAAKhE,IAG3BgE,KAAKI,QAAU3C,EAAIC,GAkevB,OA/dEoC,mBAAA,WACE,OAAOE,KAAKK,gBAAkB,KAGhCP,oBAAA,WACE,OAAQE,KAAKM,UAMfR,0BAAA,WAEE,IAAMrC,EAAMuC,KAAKO,QACjB,OAAiB,IAAR9C,EAAI3B,EAAoB,IAAR2B,EAAI1B,EAAoB,IAAR0B,EAAIzB,GAAY,KAM3D8D,yBAAA,WAEE,IAAMrC,EAAMuC,KAAKO,QAIXC,EAAQ/C,EAAI3B,EAAI,IAChB2E,EAAQhD,EAAI1B,EAAI,IAChB2E,EAAQjD,EAAIzB,EAAI,IAoBtB,MAAQ,OAlBJwE,GAAS,OACPA,EAAQ,MAER1F,UAAE0F,EAAQ,MAAS,MAAU,MAeZ,OAZnBC,GAAS,OACPA,EAAQ,MAER3F,UAAE2F,EAAQ,MAAS,MAAU,MASG,OANlCC,GAAS,OACPA,EAAQ,MAER5F,UAAE4F,EAAQ,MAAS,MAAU,OASrCZ,qBAAA,WACE,OAAOE,KAAK1E,GAQdwE,qBAAA,SAASa,GAGP,OAFAX,KAAK1E,EAAID,EAAWsF,GACpBX,KAAKE,OAASpF,KAAKgC,MAAM,IAAMkD,KAAK1E,GAAK,IAClC0E,MAMTF,kBAAA,WACE,IAAMb,EAAMxC,EAASuD,KAAKlE,EAAGkE,KAAKjE,EAAGiE,KAAKhE,GAC1C,MAAO,CAAEC,EAAW,IAARgD,EAAIhD,EAASC,EAAG+C,EAAI/C,EAAGQ,EAAGuC,EAAIvC,EAAGpB,EAAG0E,KAAK1E,IAOvDwE,wBAAA,WACE,IAAMb,EAAMxC,EAASuD,KAAKlE,EAAGkE,KAAKjE,EAAGiE,KAAKhE,GACpCC,EAAInB,KAAKgC,MAAc,IAARmC,EAAIhD,GACnBC,EAAIpB,KAAKgC,MAAc,IAARmC,EAAI/C,GACnBQ,EAAI5B,KAAKgC,MAAc,IAARmC,EAAIvC,GACzB,OAAkB,IAAXsD,KAAK1E,EAAU,OAAOW,OAAMC,QAAOQ,OAAQ,QAAQT,OAAMC,QAAOQ,QAAOsD,KAAKE,YAMrFJ,kBAAA,WACE,IAAMf,EAAMlD,EAASmE,KAAKlE,EAAGkE,KAAKjE,EAAGiE,KAAKhE,GAC1C,MAAO,CAAEC,EAAW,IAAR8C,EAAI9C,EAASC,EAAG6C,EAAI7C,EAAGC,EAAG4C,EAAI5C,EAAGb,EAAG0E,KAAK1E,IAOvDwE,wBAAA,WACE,IAAMf,EAAMlD,EAASmE,KAAKlE,EAAGkE,KAAKjE,EAAGiE,KAAKhE,GACpCC,EAAInB,KAAKgC,MAAc,IAARiC,EAAI9C,GACnBC,EAAIpB,KAAKgC,MAAc,IAARiC,EAAI7C,GACnBC,EAAIrB,KAAKgC,MAAc,IAARiC,EAAI5C,GACzB,OAAkB,IAAX6D,KAAK1E,EAAU,OAAOW,OAAMC,QAAOC,OAAQ,QAAQF,OAAMC,QAAOC,QAAO6D,KAAKE,YAOrFJ,kBAAA,SAAMlD,GACJ,oBADIA,MACGD,EAASqD,KAAKlE,EAAGkE,KAAKjE,EAAGiE,KAAKhE,EAAGY,IAO1CkD,wBAAA,SAAYlD,GACV,oBADUA,MACH,IAAMoD,KAAKY,MAAMhE,IAO1BkD,mBAAA,SAAOe,GACL,oBADKA,eFPiB/E,EAAWC,EAAWC,EAAWV,EAAWuF,GACpE,IAAMhE,EAAM,CACVnB,EAAKZ,KAAKgC,MAAMhB,GAAGiB,SAAS,KAC5BrB,EAAKZ,KAAKgC,MAAMf,GAAGgB,SAAS,KAC5BrB,EAAKZ,KAAKgC,MAAMd,GAAGe,SAAS,KAC5BrB,EAAK0B,EAAoB9B,KAI3B,OACEuF,GACAhE,EAAI,GAAGG,WAAWH,EAAI,GAAGI,OAAO,KAChCJ,EAAI,GAAGG,WAAWH,EAAI,GAAGI,OAAO,KAChCJ,EAAI,GAAGG,WAAWH,EAAI,GAAGI,OAAO,KAChCJ,EAAI,GAAGG,WAAWH,EAAI,GAAGI,OAAO,IAEzBJ,EAAI,GAAGI,OAAO,GAAKJ,EAAI,GAAGI,OAAO,GAAKJ,EAAI,GAAGI,OAAO,GAAKJ,EAAI,GAAGI,OAAO,GAGzEJ,EAAIK,KAAK,IEXP4D,CAAUd,KAAKlE,EAAGkE,KAAKjE,EAAGiE,KAAKhE,EAAGgE,KAAK1E,EAAGuF,IAOnDf,yBAAA,SAAae,GACX,oBADWA,MACJ,IAAMb,KAAKe,OAAOF,IAM3Bf,kBAAA,WACE,MAAO,CACLhE,EAAGhB,KAAKgC,MAAMkD,KAAKlE,GACnBC,EAAGjB,KAAKgC,MAAMkD,KAAKjE,GACnBC,EAAGlB,KAAKgC,MAAMkD,KAAKhE,GACnBV,EAAG0E,KAAK1E,IAQZwE,wBAAA,WACE,IAAMhE,EAAIhB,KAAKgC,MAAMkD,KAAKlE,GACpBC,EAAIjB,KAAKgC,MAAMkD,KAAKjE,GACpBC,EAAIlB,KAAKgC,MAAMkD,KAAKhE,GAC1B,OAAkB,IAAXgE,KAAK1E,EAAU,OAAOQ,OAAMC,OAAMC,MAAO,QAAQF,OAAMC,OAAMC,OAAMgE,KAAKE,YAMjFJ,4BAAA,WACE,IAAMkB,EAAM,SAACC,GAAsB,OAAGnG,KAAKgC,MAAwB,IAAlBxC,EAAQ2G,EAAG,WAC5D,MAAO,CACLnF,EAAGkF,EAAIhB,KAAKlE,GACZC,EAAGiF,EAAIhB,KAAKjE,GACZC,EAAGgF,EAAIhB,KAAKhE,GACZV,EAAG0E,KAAK1E,IAOZwE,kCAAA,WACE,IAAMoB,EAAM,SAACD,GAAsB,OAAAnG,KAAKgC,MAAwB,IAAlBxC,EAAQ2G,EAAG,OACzD,OAAkB,IAAXjB,KAAK1E,EACV,OAAO4F,EAAIlB,KAAKlE,SAAQoF,EAAIlB,KAAKjE,SAAQmF,EAAIlB,KAAKhE,QAClD,QAAQkF,EAAIlB,KAAKlE,SAAQoF,EAAIlB,KAAKjE,SAAQmF,EAAIlB,KAAKhE,SAAQgE,KAAKE,YAMpEJ,mBAAA,WACE,GAAe,IAAXE,KAAK1E,EACP,MAAO,cAGT,GAAI0E,KAAK1E,EAAI,EACX,OAAO,EAIT,IADA,IAAMuB,EAAM,IAAMF,EAASqD,KAAKlE,EAAGkE,KAAKjE,EAAGiE,KAAKhE,GAAG,OACxBmF,EAAA9C,OAAO+C,QAAQnQ,GAAfoQ,WAAAA,IAAuB,CAAvC,IAAAC,OAACC,OACV,GAAI1E,SACF,OAAO0E,EAIX,OAAO,GAQTzB,qBAAA,SAASnC,GACP,IAAM6D,EAAY5B,QAAQjC,GAC1BA,EAASA,MAAAA,EAAAA,EAAUqC,KAAKrC,OAExB,IAAI8D,GAAkC,EAChCC,EAAW1B,KAAK1E,EAAI,GAAK0E,KAAK1E,GAAK,EAIzC,OAFGkG,IAAaE,IAAa/D,EAAOX,WAAW,QAAqB,SAAXW,GAY1C,QAAXA,IACF8D,EAAkBzB,KAAK2B,eAGV,SAAXhE,IACF8D,EAAkBzB,KAAK4B,yBAGV,QAAXjE,GAA+B,SAAXA,IACtB8D,EAAkBzB,KAAK6B,eAGV,SAAXlE,IACF8D,EAAkBzB,KAAK6B,aAAY,IAGtB,SAAXlE,IACF8D,EAAkBzB,KAAK8B,cAAa,IAGvB,SAAXnE,IACF8D,EAAkBzB,KAAK8B,gBAGV,SAAXnE,IACF8D,EAAkBzB,KAAK+B,UAGV,QAAXpE,IACF8D,EAAkBzB,KAAKgC,eAGV,QAAXrE,IACF8D,EAAkBzB,KAAKiC,eAGlBR,GAAmBzB,KAAK6B,eA3Cd,SAAXlE,GAAgC,IAAXqC,KAAK1E,EACrB0E,KAAK+B,SAGP/B,KAAK2B,eA0ChB7B,qBAAA,WACE,OAAQhF,KAAKgC,MAAMkD,KAAKlE,IAAM,KAAOhB,KAAKgC,MAAMkD,KAAKjE,IAAM,GAAMjB,KAAKgC,MAAMkD,KAAKhE,IAGnF8D,kBAAA,WACE,OAAO,IAAIA,EAAUE,KAAKjD,aAO5B+C,oBAAA,SAAQoC,gBAAAA,MACN,IAAMnD,EAAMiB,KAAKmC,QAGjB,OAFApD,EAAI5C,GAAK+F,EAAS,IAClBnD,EAAI5C,EAAIhB,EAAQ4D,EAAI5C,GACb,IAAI2D,EAAUf,IAOvBe,qBAAA,SAASoC,gBAAAA,MACP,IAAMzE,EAAMuC,KAAKO,QAIjB,OAHA9C,EAAI3B,EAAIhB,KAAKN,IAAI,EAAGM,KAAKC,IAAI,IAAK0C,EAAI3B,EAAIhB,KAAKgC,OAAcoF,EAAS,IAAjB,OACrDzE,EAAI1B,EAAIjB,KAAKN,IAAI,EAAGM,KAAKC,IAAI,IAAK0C,EAAI1B,EAAIjB,KAAKgC,OAAcoF,EAAS,IAAjB,OACrDzE,EAAIzB,EAAIlB,KAAKN,IAAI,EAAGM,KAAKC,IAAI,IAAK0C,EAAIzB,EAAIlB,KAAKgC,OAAcoF,EAAS,IAAjB,OAC9C,IAAIpC,EAAUrC,IAQvBqC,mBAAA,SAAOoC,gBAAAA,MACL,IAAMnD,EAAMiB,KAAKmC,QAGjB,OAFApD,EAAI5C,GAAK+F,EAAS,IAClBnD,EAAI5C,EAAIhB,EAAQ4D,EAAI5C,GACb,IAAI2D,EAAUf,IAQvBe,iBAAA,SAAKoC,GACH,oBADGA,MACIlC,KAAKoC,IAAI,QAASF,IAQ3BpC,kBAAA,SAAMoC,GACJ,oBADIA,MACGlC,KAAKoC,IAAI,QAASF,IAQ3BpC,uBAAA,SAAWoC,gBAAAA,MACT,IAAMnD,EAAMiB,KAAKmC,QAGjB,OAFApD,EAAI7C,GAAKgG,EAAS,IAClBnD,EAAI7C,EAAIf,EAAQ4D,EAAI7C,GACb,IAAI4D,EAAUf,IAOvBe,qBAAA,SAASoC,gBAAAA,MACP,IAAMnD,EAAMiB,KAAKmC,QAGjB,OAFApD,EAAI7C,GAAKgG,EAAS,IAClBnD,EAAI7C,EAAIf,EAAQ4D,EAAI7C,GACb,IAAI4D,EAAUf,IAOvBe,sBAAA,WACE,OAAOE,KAAKqC,WAAW,MAOzBvC,iBAAA,SAAKoC,GACH,IAAMnD,EAAMiB,KAAKmC,QACXG,GAAOvD,EAAI9C,EAAIiG,GAAU,IAE/B,OADAnD,EAAI9C,EAAIqG,EAAM,EAAI,IAAMA,EAAMA,EACvB,IAAIxC,EAAUf,IAOvBe,gBAAA,SAAItC,EAAmB0E,gBAAAA,MACrB,IAAMK,EAAOvC,KAAKO,QACZiC,EAAO,IAAI1C,EAAUtC,GAAO+C,QAE5BjE,EAAI4F,EAAS,IAQnB,OAAO,IAAIpC,EAPE,CACXhE,GAAK0G,EAAK1G,EAAIyG,EAAKzG,GAAKQ,EAAKiG,EAAKzG,EAClCC,GAAKyG,EAAKzG,EAAIwG,EAAKxG,GAAKO,EAAKiG,EAAKxG,EAClCC,GAAKwG,EAAKxG,EAAIuG,EAAKvG,GAAKM,EAAKiG,EAAKvG,EAClCV,GAAKkH,EAAKlH,EAAIiH,EAAKjH,GAAKgB,EAAKiG,EAAKjH,KAMtCwE,sBAAA,SAAU2C,EAAaC,gBAAbD,kBAAaC,MACrB,IAAM3D,EAAMiB,KAAKmC,QACXQ,EAAO,IAAMD,EACbE,EAAmB,CAAC5C,MAE1B,IAAKjB,EAAI9C,GAAK8C,EAAI9C,GAAM0G,EAAOF,GAAY,GAAK,KAAO,MAAOA,GAC5D1D,EAAI9C,GAAK8C,EAAI9C,EAAI0G,GAAQ,IACzBC,EAAIC,KAAK,IAAI/C,EAAUf,IAGzB,OAAO6D,GAMT9C,uBAAA,WACE,IAAMf,EAAMiB,KAAKmC,QAEjB,OADApD,EAAI9C,GAAK8C,EAAI9C,EAAI,KAAO,IACjB,IAAI6D,EAAUf,IAGvBe,0BAAA,SAAc2C,gBAAAA,KAQZ,IAPA,IAAMxD,EAAMe,KAAK8C,QACT7G,EAAMgD,IACN/C,EAAM+C,IACRvC,EAAMuC,IACN8D,EAAmB,GACnBC,EAAe,EAAIP,EAElBA,KACLM,EAAIF,KAAK,IAAI/C,EAAU,CAAE7D,IAAGC,IAAGQ,OAC/BA,GAAKA,EAAIsG,GAAgB,EAG3B,OAAOD,GAGTjD,4BAAA,WACE,IAAMf,EAAMiB,KAAKmC,QACTlG,EAAM8C,IACd,MAAO,CACLiB,KACA,IAAIF,EAAU,CAAE7D,GAAIA,EAAI,IAAM,IAAKC,EAAG6C,EAAI7C,EAAGC,EAAG4C,EAAI5C,IACpD,IAAI2D,EAAU,CAAE7D,GAAIA,EAAI,KAAO,IAAKC,EAAG6C,EAAI7C,EAAGC,EAAG4C,EAAI5C,MAOzD2D,kBAAA,WACE,OAAOE,KAAKiD,OAAO,IAMrBnD,mBAAA,WACE,OAAOE,KAAKiD,OAAO,IAOrBnD,mBAAA,SAAOvF,GAML,IALA,IAAMwE,EAAMiB,KAAKmC,QACTlG,EAAM8C,IAERmE,EAAsB,CAAClD,MACvBmD,EAAY,IAAM5I,EACfwD,EAAI,EAAGA,EAAIxD,EAAGwD,IACrBmF,EAAOL,KAAK,IAAI/C,EAAU,CAAE7D,GAAIA,EAAK8B,EAAIoF,GAAc,IAAKjH,EAAG6C,EAAI7C,EAAGC,EAAG4C,EAAI5C,KAG/E,OAAO+G,GAMTpD,mBAAA,SAAOtC,GACL,OAAOwC,KAAK2B,gBAAkB,IAAI7B,EAAUtC,GAAOmE,oBCrYvD,SAASyB,EAAad,GAQhBA,GAAO,KAAOA,GAAO,MACvBA,GAAO,KAGT,IAAoB,QAAAe,IAAAhC,WAAAA,IAAQ,CAAvB,IACG7D,EAAQ8F,QACd,GAAI9F,EAAM+F,UAAYjB,GAAO9E,EAAM+F,SAAS,IAAMjB,GAAO9E,EAAM+F,SAAS,GACtE,OAAO/F,EAIX,MAAMgG,MAAM,mBAGd,SAASC,EAAaC,EAAyBC,GAC7C,QAAaC,IAATD,EACF,OAAO7I,KAAKkD,MAAM0F,EAAM,GAAM5I,KAAK+I,UAAYH,EAAM,GAAK,EAAIA,EAAM,KAItE,IAAMlJ,EAAMkJ,EAAM,IAAM,EAClB3I,EAAM2I,EAAM,IAAM,EAElBxC,GADNyC,GAAgB,KAAPA,EAAe,OAAS,QACd,OACnB,OAAO7I,KAAKkD,MAAMjD,EAAOmG,GAAO1G,EAAMO,IAGxC,SAASuI,EAAYQ,GAOnB,IAAMC,EAAOD,EAAME,YAAY,GAAG,GAC5BC,EAAOH,EAAME,YAAYF,EAAME,YAAYpI,OAAS,GAAG,GACvDsI,EAAOJ,EAAME,YAAYF,EAAME,YAAYpI,OAAS,GAAG,GACvDuI,EAAOL,EAAME,YAAY,GAAG,GAElC,MAAO,CACLI,KAAMN,EAAMM,KACZb,SAAUO,EAAMP,SAChBS,YAAaF,EAAME,YACnBK,gBAAiB,CAACN,EAAME,GACxBK,gBAAiB,CAACJ,EAAMC,IAgBrB,IAAMI,EAAuB,CAClC,CACEH,KAAM,aACNb,SAAU,KACVS,YAAa,CAAC,CAAC,EAAG,GAAI,CAAC,IAAK,KAE9B,CACEI,KAAM,MACNb,SAAU,EAAE,GAAI,IAChBS,YAAa,CACX,CAAC,GAAI,KACL,CAAC,GAAI,IACL,CAAC,GAAI,IACL,CAAC,GAAI,IACL,CAAC,GAAI,IACL,CAAC,GAAI,IACL,CAAC,GAAI,IACL,CAAC,GAAI,IACL,CAAC,IAAK,MAGV,CACEI,KAAM,SACNb,SAAU,CAAC,GAAI,IACfS,YAAa,CAAC,CAAC,GAAI,KAAM,CAAC,GAAI,IAAK,CAAC,GAAI,IAAK,CAAC,GAAI,IAAK,CAAC,GAAI,IAAK,CAAC,GAAI,IAAK,CAAC,IAAK,MAEnF,CACEI,KAAM,SACNb,SAAU,CAAC,GAAI,IACfS,YAAa,CAAC,CAAC,GAAI,KAAM,CAAC,GAAI,IAAK,CAAC,GAAI,IAAK,CAAC,GAAI,IAAK,CAAC,GAAI,IAAK,CAAC,GAAI,IAAK,CAAC,GAAI,IAAK,CAAC,IAAK,MAE7F,CACEI,KAAM,QACNb,SAAU,CAAC,GAAI,KACfS,YAAa,CAAC,CAAC,GAAI,KAAM,CAAC,GAAI,IAAK,CAAC,GAAI,IAAK,CAAC,GAAI,IAAK,CAAC,GAAI,IAAK,CAAC,GAAI,IAAK,CAAC,GAAI,IAAK,CAAC,IAAK,MAE7F,CACEI,KAAM,OACNb,SAAU,CAAC,IAAK,KAChBS,YAAa,CACX,CAAC,GAAI,KACL,CAAC,GAAI,IACL,CAAC,GAAI,IACL,CAAC,GAAI,IACL,CAAC,GAAI,IACL,CAAC,GAAI,IACL,CAAC,GAAI,IACL,CAAC,GAAI,IACL,CAAC,IAAK,MAGV,CACEI,KAAM,SACNb,SAAU,CAAC,IAAK,KAChBS,YAAa,CACX,CAAC,GAAI,KACL,CAAC,GAAI,IACL,CAAC,GAAI,IACL,CAAC,GAAI,IACL,CAAC,GAAI,IACL,CAAC,GAAI,IACL,CAAC,GAAI,IACL,CAAC,GAAI,IACL,CAAC,IAAK,MAGV,CACEI,KAAM,OACNb,SAAU,CAAC,IAAK,KAChBS,YAAa,CAAC,CAAC,GAAI,KAAM,CAAC,GAAI,IAAK,CAAC,GAAI,IAAK,CAAC,GAAI,IAAK,CAAC,GAAI,IAAK,CAAC,GAAI,IAAK,CAAC,IAAK,gBCnTrEQ,EAAYC,EAAoBC,GAC9C,IAAMC,EAAK,IAAI7E,EAAU2E,GACnBG,EAAK,IAAI9E,EAAU4E,GACzB,OACG5J,KAAKN,IAAImK,EAAGE,eAAgBD,EAAGC,gBAAkB,MACjD/J,KAAKC,IAAI4J,EAAGE,eAAgBD,EAAGC,gBAAkB,SCQhDC,WHuiBoBtH,EAAwBqC,GAChD,oBADwBrC,mBAAwBqC,MACzC,IAAIC,EAAUtC,EAAOqC,WGviB9BiF,EAAahF,UAAYA,EACzBgF,EAAaN,YAAcA,EAC3BM,EAAaC,sBDmDGA,EACdC,EACAC,EACAC,gBAAAA,GAA6BC,uBAAuB,EAAOC,MAAO,KAAMC,KAAM,UAM9E,IAJA,IAAIC,EAA8B,KAC9BC,EAAY,EACRJ,EAAuCD,wBAAhBE,EAAgBF,QAATG,EAASH,WAE3BM,IAAAnE,WAAAA,IAAW,CAA1B,IAAM7D,OACHiI,EAAQjB,EAAYQ,EAAWxH,GACjCiI,EAAQF,IACVA,EAAYE,EACZH,EAAY,IAAIxF,EAAUtC,IAI9B,gBAxDAiH,EACAC,EACAgB,wBAAAA,GAAsBN,MAAO,KAAMC,KAAM,UAEzC,IAAMM,EAAmBnB,EAAYC,EAAQC,GAC7C,kBAASgB,EAAMN,qBAAS,iBAASM,EAAML,oBAAQ,UAC7C,IAAK,UACL,IAAK,WACH,OAAOM,GAAoB,IAC7B,IAAK,UACH,OAAOA,GAAoB,EAC7B,IAAK,WACH,OAAOA,GAAoB,EAC7B,QACE,OAAO,GA0CPC,CAAWZ,EAAWM,EAAwB,CAAEF,QAAOC,WAAYF,EAC9DG,GAGTJ,EAAKC,uBAAwB,EACtBJ,EAAaC,EAAW,CAAC,OAAQ,QAASE,KCxEnDJ,EAAajB,gBFAGA,EAAOgC,GAErB,gBAFqBA,WAEyBjC,IAAzCiC,EAA+BC,OAAiE,OAAzCD,EAA+BC,MAAgB,CACzG,IAAMC,EAAuBF,EAA+BC,MACtDE,EAAsB,GAI5B,IAFCH,EAA+BC,WAAQlC,EAEjCmC,EAAcC,EAAOpK,QAIzBiK,EAA+BC,MAAQ,KACpCD,EAAQlC,OACVkC,EAAQlC,MAAQ,GAGlBqC,EAAOnD,KAAKgB,EAAOgC,IAIrB,OADCA,EAA+BC,MAAQC,EACjCC,EAIT,IAAM/J,EAgBR,SAAiBqG,EAAkCqB,GACjD,IACIZ,EAAMU,EAqFZ,SAAqBwC,GACnB,IAAMC,EAAMlL,SAASiL,EAAsB,IAC3C,IAAKxK,OAAOF,MAAM2K,IAAQA,EAAM,KAAOA,EAAM,EAC3C,MAAO,CAACA,EAAKA,GAGf,GAA0B,iBAAfD,EAAyB,CAClC,IAAME,EAAa5B,EAAO6B,MAAK,SAAA7L,GAAK,OAAAA,EAAE6J,OAAS6B,KAC/C,GAAIE,EAAY,CACd,IAAM3I,EAAQ8F,EAAY6C,GAC1B,GAAI3I,EAAM+F,SACR,OAAO/F,EAAM+F,SAIjB,IAAM8C,EAAS,IAAIvG,EAAUmG,GAC7B,GAAII,EAAOjG,QAAS,CAClB,IAAMkC,EAAM+D,EAAOvD,QAAQ7G,EAC3B,MAAO,CAACqG,EAAKA,IAIjB,MAAO,CAAC,EAAG,KA5GMgE,CAAYhE,GACIqB,GAI7BZ,EAAM,IACRA,EAAM,IAAMA,GAGd,OAAOA,EA1BGwD,CAAQV,EAAQvD,IAAKuD,EAAQlC,MAGjCzH,EA0BR,SAAwBoG,EAAauD,GACnC,GAAoB,eAAhBA,EAAQvD,IACV,OAAO,EAGT,GAA2B,WAAvBuD,EAAQW,WACV,OAAO/C,EAAa,CAAC,EAAG,KAAMoC,EAAQlC,MAGhC,IAAAU,EAAoBjB,EAAad,mBAErCyB,EAAOM,EAAgB,GACvBJ,EAAOI,EAAgB,GAE3B,OAAQwB,EAAQW,YACd,IAAK,SACHzC,EAAO,GACP,MACF,IAAK,OACHA,EAAOE,EAAO,GACd,MACF,IAAK,QACHA,EAAO,GAMX,OAAOR,EAAa,CAACM,EAAME,GAAO4B,EAAQlC,MAtDhC8C,CAAexK,EAAG4J,GAItB9C,EAAqB,CAAE9G,IAAGC,IAAGQ,EAqDrC,SAAwBgK,EAAWC,EAAWd,GAC5C,IAAI3B,EAqBN,SAA8BwC,EAAWC,GAGvC,IAFQ,IAAA3C,EAAgBZ,EAAasD,eAE5B3I,EAAI,EAAGA,EAAIiG,EAAYpI,OAAS,EAAGmC,IAAK,CAC/C,IAAM6I,EAAK5C,EAAYjG,GAAG,GACpB8I,EAAK7C,EAAYjG,GAAG,GAEpB+I,EAAK9C,EAAYjG,EAAI,GAAG,GACxBgJ,EAAK/C,EAAYjG,EAAI,GAAG,GAE9B,GAAI4I,GAAKC,GAAMD,GAAKG,EAAI,CACtB,IAAME,GAAKD,EAAKF,IAAOC,EAAKF,GAG5B,OAAQI,EAAIL,GAFFE,EAAMG,EAAIJ,IAMxB,OAAO,EAvCIK,CAAqBP,EAAGC,GAC/BxC,EAAO,IAEX,OAAQ0B,EAAQW,YACd,IAAK,OACHrC,EAAOD,EAAO,GACd,MACF,IAAK,QACHA,GAAQC,EAAOD,GAAQ,EACvB,MACF,IAAK,SACHA,EAAO,EACPC,EAAO,IAMX,OAAOV,EAAa,CAACS,EAAMC,GAAO0B,EAAQlC,MAzEhCuD,CAAejL,EAAGC,EAAG2J,IAO/B,YALsBjC,IAAlBiC,EAAQlF,QACVoC,EAAIzH,EAAIuK,EAAQlF,OAIX,IAAIb,EAAUiD,IErCvB+B,EAAa7T,MAAQA,EACrB6T,EAAaqC,mBCfaC,EAAmBvH,GAC3C,IAAMwH,EAA0B,CAC9BvL,EAAGN,EAAoB4L,EAAMtL,GAC7BC,EAAGP,EAAoB4L,EAAMrL,GAC7BC,EAAGR,EAAoB4L,EAAMpL,IAM/B,YAJgB4H,IAAZwD,EAAM9L,IACR+L,EAAS/L,EAAIG,OAAO2L,EAAM9L,IAGrB,IAAIwE,EAAUuH,EAAkBxH,IDMzCiF,EAAawC,wBCDX,OAAO,IAAIxH,EAAU,CACnBhE,EAAGhB,KAAK+I,SACR9H,EAAGjB,KAAK+I,SACR7H,EAAGlB,KAAK+I,YDDZiB,EAAayC,oBE3BcC,EAAwBC,GACjD,IAAMjK,EAAQ,IAAIsC,EAAU0H,GACtBE,EAAa,IAAMvK,EAAcK,EAAM1B,EAAG0B,EAAMzB,EAAGyB,EAAMxB,EAAGwB,EAAMlC,GACpEqM,EAAmBD,EACjBvH,EAAuB3C,EAAM2C,aAAe,qBAAuB,GAEzE,GAAIsH,EAAa,CACf,IAAMvL,EAAI,IAAI4D,EAAU2H,GACxBE,EAAmB,IAAMxK,EAAcjB,EAAEJ,EAAGI,EAAEH,EAAGG,EAAEF,EAAGE,EAAEZ,GAG1D,MAAO,8CAA8C6E,mBAA6BuH,kBAA0BC,OFiB9G7C,EAAavH,WAAaA,EAC1BuH,EAAalH,oBAAsBA,EACnCkH,EAAajH,eAAiBA"}