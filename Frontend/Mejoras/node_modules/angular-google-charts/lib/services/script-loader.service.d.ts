import { NgZone } from '@angular/core';
import { Observable } from 'rxjs';
import { GoogleChartsConfig } from '../types/google-charts-config';
import * as ɵngcc0 from '@angular/core';
export declare class ScriptLoaderService {
    private zone;
    private localeId;
    private readonly config$;
    private readonly scriptSource;
    private readonly scriptLoadSubject;
    constructor(zone: NgZone, localeId: string, config$: Observable<GoogleChartsConfig>);
    /**
     * Checks whether `google.charts` is available.
     *
     * If not, it can be loaded by calling `loadChartPackages`.
     *
     * @returns `true` if `google.charts` is available, `false` otherwise.
     */
    isGoogleChartsAvailable(): boolean;
    /**
     * Loads the Google Chart script and the provided chart packages.
     * Can be called multiple times to load more packages.
     *
     * When called without any arguments, this will just load the default package
     * containing the namespaces `google.charts` and `google.visualization` without any charts.
     *
     * @param packages The packages to load.
     * @returns A stream emitting as soon as the chart packages are loaded.
     */
    loadChartPackages(...packages: string[]): Observable<null>;
    /**
     * Loads the Google Charts script. After the script is loaded, `google.charts` is defined.
     *
     * @returns A stream emitting as soon as loading has completed.
     * If the google charts script is already loaded, the stream emits immediately.
     */
    private loadGoogleCharts;
    private isLoadingGoogleCharts;
    private getGoogleChartsScript;
    private createGoogleChartsScript;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ScriptLoaderService, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<ScriptLoaderService>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2NyaXB0LWxvYWRlci5zZXJ2aWNlLmQudHMiLCJzb3VyY2VzIjpbInNjcmlwdC1sb2FkZXIuc2VydmljZS5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmdab25lIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBHb29nbGVDaGFydHNDb25maWcgfSBmcm9tICcuLi90eXBlcy9nb29nbGUtY2hhcnRzLWNvbmZpZyc7XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBTY3JpcHRMb2FkZXJTZXJ2aWNlIHtcbiAgICBwcml2YXRlIHpvbmU7XG4gICAgcHJpdmF0ZSBsb2NhbGVJZDtcbiAgICBwcml2YXRlIHJlYWRvbmx5IGNvbmZpZyQ7XG4gICAgcHJpdmF0ZSByZWFkb25seSBzY3JpcHRTb3VyY2U7XG4gICAgcHJpdmF0ZSByZWFkb25seSBzY3JpcHRMb2FkU3ViamVjdDtcbiAgICBjb25zdHJ1Y3Rvcih6b25lOiBOZ1pvbmUsIGxvY2FsZUlkOiBzdHJpbmcsIGNvbmZpZyQ6IE9ic2VydmFibGU8R29vZ2xlQ2hhcnRzQ29uZmlnPik7XG4gICAgLyoqXG4gICAgICogQ2hlY2tzIHdoZXRoZXIgYGdvb2dsZS5jaGFydHNgIGlzIGF2YWlsYWJsZS5cbiAgICAgKlxuICAgICAqIElmIG5vdCwgaXQgY2FuIGJlIGxvYWRlZCBieSBjYWxsaW5nIGBsb2FkQ2hhcnRQYWNrYWdlc2AuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBgdHJ1ZWAgaWYgYGdvb2dsZS5jaGFydHNgIGlzIGF2YWlsYWJsZSwgYGZhbHNlYCBvdGhlcndpc2UuXG4gICAgICovXG4gICAgaXNHb29nbGVDaGFydHNBdmFpbGFibGUoKTogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBMb2FkcyB0aGUgR29vZ2xlIENoYXJ0IHNjcmlwdCBhbmQgdGhlIHByb3ZpZGVkIGNoYXJ0IHBhY2thZ2VzLlxuICAgICAqIENhbiBiZSBjYWxsZWQgbXVsdGlwbGUgdGltZXMgdG8gbG9hZCBtb3JlIHBhY2thZ2VzLlxuICAgICAqXG4gICAgICogV2hlbiBjYWxsZWQgd2l0aG91dCBhbnkgYXJndW1lbnRzLCB0aGlzIHdpbGwganVzdCBsb2FkIHRoZSBkZWZhdWx0IHBhY2thZ2VcbiAgICAgKiBjb250YWluaW5nIHRoZSBuYW1lc3BhY2VzIGBnb29nbGUuY2hhcnRzYCBhbmQgYGdvb2dsZS52aXN1YWxpemF0aW9uYCB3aXRob3V0IGFueSBjaGFydHMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gcGFja2FnZXMgVGhlIHBhY2thZ2VzIHRvIGxvYWQuXG4gICAgICogQHJldHVybnMgQSBzdHJlYW0gZW1pdHRpbmcgYXMgc29vbiBhcyB0aGUgY2hhcnQgcGFja2FnZXMgYXJlIGxvYWRlZC5cbiAgICAgKi9cbiAgICBsb2FkQ2hhcnRQYWNrYWdlcyguLi5wYWNrYWdlczogc3RyaW5nW10pOiBPYnNlcnZhYmxlPG51bGw+O1xuICAgIC8qKlxuICAgICAqIExvYWRzIHRoZSBHb29nbGUgQ2hhcnRzIHNjcmlwdC4gQWZ0ZXIgdGhlIHNjcmlwdCBpcyBsb2FkZWQsIGBnb29nbGUuY2hhcnRzYCBpcyBkZWZpbmVkLlxuICAgICAqXG4gICAgICogQHJldHVybnMgQSBzdHJlYW0gZW1pdHRpbmcgYXMgc29vbiBhcyBsb2FkaW5nIGhhcyBjb21wbGV0ZWQuXG4gICAgICogSWYgdGhlIGdvb2dsZSBjaGFydHMgc2NyaXB0IGlzIGFscmVhZHkgbG9hZGVkLCB0aGUgc3RyZWFtIGVtaXRzIGltbWVkaWF0ZWx5LlxuICAgICAqL1xuICAgIHByaXZhdGUgbG9hZEdvb2dsZUNoYXJ0cztcbiAgICBwcml2YXRlIGlzTG9hZGluZ0dvb2dsZUNoYXJ0cztcbiAgICBwcml2YXRlIGdldEdvb2dsZUNoYXJ0c1NjcmlwdDtcbiAgICBwcml2YXRlIGNyZWF0ZUdvb2dsZUNoYXJ0c1NjcmlwdDtcbn1cbiJdfQ==