/// <reference types="@types/google.visualization" />
import { EventEmitter, OnChanges, OnInit, SimpleChanges } from '@angular/core';
import { ScriptLoaderService } from '../../services/script-loader.service';
import { FilterType } from '../../types/control-type';
import { ChartErrorEvent, ChartReadyEvent } from '../../types/events';
import { ChartBase } from '../chart-base/chart-base.component';
import * as ɵngcc0 from '@angular/core';
export declare class ControlWrapperComponent implements OnInit, OnChanges {
    private loaderService;
    /**
     * Charts controlled by this control wrapper. Can be a single chart or an array of charts.
     */
    for: ChartBase | ChartBase[];
    /**
     * The class name of the control.
     * The `google.visualization` package name can be omitted for Google controls.
     *
     * @example
     *
     * ```html
     * <control-wrapper type="CategoryFilter"></control-wrapper>
     * ```
     */
    type: FilterType;
    /**
     * An object describing the options for the control.
     * You can use either JavaScript literal notation, or provide a handle to the object.
     *
     * @example
     *
     * ```html
     * <control-wrapper [options]="{'filterColumnLabel': 'Age', 'minValue': 10, 'maxValue': 80}"></control-wrapper>
     * ```
     */
    options?: object;
    /**
     * An object describing the state of the control.
     * The state collects all the variables that the user operating the control can affect.
     *
     * For example, a range slider state can be described in term of the positions that the low and high thumb
     * of the slider occupy.
     * You can use either Javascript literal notation, or provide a handle to the object.
     *
     * @example
     *
     *  ```html
     * <control-wrapper [state]="{'lowValue': 20, 'highValue': 50}"></control-wrapper>
     * ```
     */
    state?: object;
    /**
     * Emits when an error occurs when attempting to render the control.
     */
    error: EventEmitter<ChartErrorEvent>;
    /**
     * The control is ready to accept user interaction and for external method calls.
     *
     * Alternatively, you can listen for a ready event on the dashboard holding the control
     * and call control methods only after the event was fired.
     */
    ready: EventEmitter<ChartReadyEvent<google.visualization.ChartBase>>;
    /**
     * Emits when the user interacts with the control, affecting its state.
     * For example, a `stateChange` event will be emitted whenever you move the thumbs of a range slider control.
     *
     * To retrieve an updated control state after the event fired, call `ControlWrapper.getState()`.
     */
    stateChange: EventEmitter<unknown>;
    /**
     * A generated id assigned to this components DOM element.
     */
    readonly id: string;
    private _controlWrapper?;
    private wrapperReadySubject;
    constructor(loaderService: ScriptLoaderService);
    /**
     * Emits after the `ControlWrapper` was created.
     */
    get wrapperReady$(): import("rxjs").Observable<google.visualization.ControlWrapper>;
    get controlWrapper(): google.visualization.ControlWrapper;
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    private createControlWrapper;
    private addEventListeners;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ControlWrapperComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<ControlWrapperComponent, "control-wrapper", ["controlWrapper"], { "for": "for"; "type": "type"; "options": "options"; "state": "state"; }, { "error": "error"; "ready": "ready"; "stateChange": "stateChange"; }, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udHJvbC13cmFwcGVyLmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJjb250cm9sLXdyYXBwZXIuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiLy8vIDxyZWZlcmVuY2UgdHlwZXM9XCJAdHlwZXMvZ29vZ2xlLnZpc3VhbGl6YXRpb25cIiAvPlxuaW1wb3J0IHsgRXZlbnRFbWl0dGVyLCBPbkNoYW5nZXMsIE9uSW5pdCwgU2ltcGxlQ2hhbmdlcyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgU2NyaXB0TG9hZGVyU2VydmljZSB9IGZyb20gJy4uLy4uL3NlcnZpY2VzL3NjcmlwdC1sb2FkZXIuc2VydmljZSc7XG5pbXBvcnQgeyBGaWx0ZXJUeXBlIH0gZnJvbSAnLi4vLi4vdHlwZXMvY29udHJvbC10eXBlJztcbmltcG9ydCB7IENoYXJ0RXJyb3JFdmVudCwgQ2hhcnRSZWFkeUV2ZW50IH0gZnJvbSAnLi4vLi4vdHlwZXMvZXZlbnRzJztcbmltcG9ydCB7IENoYXJ0QmFzZSB9IGZyb20gJy4uL2NoYXJ0LWJhc2UvY2hhcnQtYmFzZS5jb21wb25lbnQnO1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgQ29udHJvbFdyYXBwZXJDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIE9uQ2hhbmdlcyB7XG4gICAgcHJpdmF0ZSBsb2FkZXJTZXJ2aWNlO1xuICAgIC8qKlxuICAgICAqIENoYXJ0cyBjb250cm9sbGVkIGJ5IHRoaXMgY29udHJvbCB3cmFwcGVyLiBDYW4gYmUgYSBzaW5nbGUgY2hhcnQgb3IgYW4gYXJyYXkgb2YgY2hhcnRzLlxuICAgICAqL1xuICAgIGZvcjogQ2hhcnRCYXNlIHwgQ2hhcnRCYXNlW107XG4gICAgLyoqXG4gICAgICogVGhlIGNsYXNzIG5hbWUgb2YgdGhlIGNvbnRyb2wuXG4gICAgICogVGhlIGBnb29nbGUudmlzdWFsaXphdGlvbmAgcGFja2FnZSBuYW1lIGNhbiBiZSBvbWl0dGVkIGZvciBHb29nbGUgY29udHJvbHMuXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogYGBgaHRtbFxuICAgICAqIDxjb250cm9sLXdyYXBwZXIgdHlwZT1cIkNhdGVnb3J5RmlsdGVyXCI+PC9jb250cm9sLXdyYXBwZXI+XG4gICAgICogYGBgXG4gICAgICovXG4gICAgdHlwZTogRmlsdGVyVHlwZTtcbiAgICAvKipcbiAgICAgKiBBbiBvYmplY3QgZGVzY3JpYmluZyB0aGUgb3B0aW9ucyBmb3IgdGhlIGNvbnRyb2wuXG4gICAgICogWW91IGNhbiB1c2UgZWl0aGVyIEphdmFTY3JpcHQgbGl0ZXJhbCBub3RhdGlvbiwgb3IgcHJvdmlkZSBhIGhhbmRsZSB0byB0aGUgb2JqZWN0LlxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGBgYGh0bWxcbiAgICAgKiA8Y29udHJvbC13cmFwcGVyIFtvcHRpb25zXT1cInsnZmlsdGVyQ29sdW1uTGFiZWwnOiAnQWdlJywgJ21pblZhbHVlJzogMTAsICdtYXhWYWx1ZSc6IDgwfVwiPjwvY29udHJvbC13cmFwcGVyPlxuICAgICAqIGBgYFxuICAgICAqL1xuICAgIG9wdGlvbnM/OiBvYmplY3Q7XG4gICAgLyoqXG4gICAgICogQW4gb2JqZWN0IGRlc2NyaWJpbmcgdGhlIHN0YXRlIG9mIHRoZSBjb250cm9sLlxuICAgICAqIFRoZSBzdGF0ZSBjb2xsZWN0cyBhbGwgdGhlIHZhcmlhYmxlcyB0aGF0IHRoZSB1c2VyIG9wZXJhdGluZyB0aGUgY29udHJvbCBjYW4gYWZmZWN0LlxuICAgICAqXG4gICAgICogRm9yIGV4YW1wbGUsIGEgcmFuZ2Ugc2xpZGVyIHN0YXRlIGNhbiBiZSBkZXNjcmliZWQgaW4gdGVybSBvZiB0aGUgcG9zaXRpb25zIHRoYXQgdGhlIGxvdyBhbmQgaGlnaCB0aHVtYlxuICAgICAqIG9mIHRoZSBzbGlkZXIgb2NjdXB5LlxuICAgICAqIFlvdSBjYW4gdXNlIGVpdGhlciBKYXZhc2NyaXB0IGxpdGVyYWwgbm90YXRpb24sIG9yIHByb3ZpZGUgYSBoYW5kbGUgdG8gdGhlIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiAgYGBgaHRtbFxuICAgICAqIDxjb250cm9sLXdyYXBwZXIgW3N0YXRlXT1cInsnbG93VmFsdWUnOiAyMCwgJ2hpZ2hWYWx1ZSc6IDUwfVwiPjwvY29udHJvbC13cmFwcGVyPlxuICAgICAqIGBgYFxuICAgICAqL1xuICAgIHN0YXRlPzogb2JqZWN0O1xuICAgIC8qKlxuICAgICAqIEVtaXRzIHdoZW4gYW4gZXJyb3Igb2NjdXJzIHdoZW4gYXR0ZW1wdGluZyB0byByZW5kZXIgdGhlIGNvbnRyb2wuXG4gICAgICovXG4gICAgZXJyb3I6IEV2ZW50RW1pdHRlcjxDaGFydEVycm9yRXZlbnQ+O1xuICAgIC8qKlxuICAgICAqIFRoZSBjb250cm9sIGlzIHJlYWR5IHRvIGFjY2VwdCB1c2VyIGludGVyYWN0aW9uIGFuZCBmb3IgZXh0ZXJuYWwgbWV0aG9kIGNhbGxzLlxuICAgICAqXG4gICAgICogQWx0ZXJuYXRpdmVseSwgeW91IGNhbiBsaXN0ZW4gZm9yIGEgcmVhZHkgZXZlbnQgb24gdGhlIGRhc2hib2FyZCBob2xkaW5nIHRoZSBjb250cm9sXG4gICAgICogYW5kIGNhbGwgY29udHJvbCBtZXRob2RzIG9ubHkgYWZ0ZXIgdGhlIGV2ZW50IHdhcyBmaXJlZC5cbiAgICAgKi9cbiAgICByZWFkeTogRXZlbnRFbWl0dGVyPENoYXJ0UmVhZHlFdmVudDxnb29nbGUudmlzdWFsaXphdGlvbi5DaGFydEJhc2U+PjtcbiAgICAvKipcbiAgICAgKiBFbWl0cyB3aGVuIHRoZSB1c2VyIGludGVyYWN0cyB3aXRoIHRoZSBjb250cm9sLCBhZmZlY3RpbmcgaXRzIHN0YXRlLlxuICAgICAqIEZvciBleGFtcGxlLCBhIGBzdGF0ZUNoYW5nZWAgZXZlbnQgd2lsbCBiZSBlbWl0dGVkIHdoZW5ldmVyIHlvdSBtb3ZlIHRoZSB0aHVtYnMgb2YgYSByYW5nZSBzbGlkZXIgY29udHJvbC5cbiAgICAgKlxuICAgICAqIFRvIHJldHJpZXZlIGFuIHVwZGF0ZWQgY29udHJvbCBzdGF0ZSBhZnRlciB0aGUgZXZlbnQgZmlyZWQsIGNhbGwgYENvbnRyb2xXcmFwcGVyLmdldFN0YXRlKClgLlxuICAgICAqL1xuICAgIHN0YXRlQ2hhbmdlOiBFdmVudEVtaXR0ZXI8dW5rbm93bj47XG4gICAgLyoqXG4gICAgICogQSBnZW5lcmF0ZWQgaWQgYXNzaWduZWQgdG8gdGhpcyBjb21wb25lbnRzIERPTSBlbGVtZW50LlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGlkOiBzdHJpbmc7XG4gICAgcHJpdmF0ZSBfY29udHJvbFdyYXBwZXI/O1xuICAgIHByaXZhdGUgd3JhcHBlclJlYWR5U3ViamVjdDtcbiAgICBjb25zdHJ1Y3Rvcihsb2FkZXJTZXJ2aWNlOiBTY3JpcHRMb2FkZXJTZXJ2aWNlKTtcbiAgICAvKipcbiAgICAgKiBFbWl0cyBhZnRlciB0aGUgYENvbnRyb2xXcmFwcGVyYCB3YXMgY3JlYXRlZC5cbiAgICAgKi9cbiAgICBnZXQgd3JhcHBlclJlYWR5JCgpOiBpbXBvcnQoXCJyeGpzXCIpLk9ic2VydmFibGU8Z29vZ2xlLnZpc3VhbGl6YXRpb24uQ29udHJvbFdyYXBwZXI+O1xuICAgIGdldCBjb250cm9sV3JhcHBlcigpOiBnb29nbGUudmlzdWFsaXphdGlvbi5Db250cm9sV3JhcHBlcjtcbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xuICAgIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkO1xuICAgIHByaXZhdGUgY3JlYXRlQ29udHJvbFdyYXBwZXI7XG4gICAgcHJpdmF0ZSBhZGRFdmVudExpc3RlbmVycztcbn1cbiJdfQ==