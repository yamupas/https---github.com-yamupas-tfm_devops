import { ElementRef, EventEmitter, OnChanges, OnInit, SimpleChanges } from '@angular/core';
import { DataTableService } from '../../services/data-table.service';
import { ScriptLoaderService } from '../../services/script-loader.service';
import { ChartErrorEvent } from '../../types/events';
import { Formatter } from '../../types/formatter';
import { Column, Row } from '../chart-base/chart-base.component';
import * as ɵngcc0 from '@angular/core';
export declare class DashboardComponent implements OnInit, OnChanges {
    private element;
    private loaderService;
    private dataTableService;
    /**
     * Data used to initialize the table.
     *
     * This must also contain all roles that are set in the `columns` property.
     */
    data: Row[];
    /**
     * The columns the `data` consists of.
     * The length of this array must match the length of each row in the `data` object.
     *
     * If {@link https://developers.google.com/chart/interactive/docs/roles roles} should be applied, they must be included in this array as well.
     */
    columns?: Column[];
    /**
     * Used to change the displayed value of the specified column in all rows.
     *
     * Each array element must consist of an instance of a [`formatter`](https://developers.google.com/chart/interactive/docs/reference#formatters)
     * and the index of the column you want the formatter to get applied to.
     */
    formatters?: Formatter[];
    /**
     * The dashboard has completed drawing and is ready to accept changes.
     *
     * The ready event will also fire:
     * - after the completion of a dashboard refresh triggered by a user or programmatic interaction with one of the controls,
     * - after redrawing any chart on the dashboard.
     */
    ready: EventEmitter<void>;
    /**
     * Emits when an error occurs when attempting to render the dashboard.
     * One or more of the controls and charts that are part of the dashboard may have failed rendering.
     */
    error: EventEmitter<ChartErrorEvent>;
    private controlWrappers;
    private dashboard?;
    private dataTable?;
    private initialized;
    constructor(element: ElementRef, loaderService: ScriptLoaderService, dataTableService: DataTableService);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    private createDashboard;
    private registerEvents;
    private initializeBindings;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<DashboardComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<DashboardComponent, "dashboard", ["dashboard"], { "data": "data"; "columns": "columns"; "formatters": "formatters"; }, { "ready": "ready"; "error": "error"; }, ["controlWrappers"], ["*"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGFzaGJvYXJkLmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJkYXNoYm9hcmQuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRWxlbWVudFJlZiwgRXZlbnRFbWl0dGVyLCBPbkNoYW5nZXMsIE9uSW5pdCwgU2ltcGxlQ2hhbmdlcyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRGF0YVRhYmxlU2VydmljZSB9IGZyb20gJy4uLy4uL3NlcnZpY2VzL2RhdGEtdGFibGUuc2VydmljZSc7XG5pbXBvcnQgeyBTY3JpcHRMb2FkZXJTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vc2VydmljZXMvc2NyaXB0LWxvYWRlci5zZXJ2aWNlJztcbmltcG9ydCB7IENoYXJ0RXJyb3JFdmVudCB9IGZyb20gJy4uLy4uL3R5cGVzL2V2ZW50cyc7XG5pbXBvcnQgeyBGb3JtYXR0ZXIgfSBmcm9tICcuLi8uLi90eXBlcy9mb3JtYXR0ZXInO1xuaW1wb3J0IHsgQ29sdW1uLCBSb3cgfSBmcm9tICcuLi9jaGFydC1iYXNlL2NoYXJ0LWJhc2UuY29tcG9uZW50JztcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIERhc2hib2FyZENvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgT25DaGFuZ2VzIHtcbiAgICBwcml2YXRlIGVsZW1lbnQ7XG4gICAgcHJpdmF0ZSBsb2FkZXJTZXJ2aWNlO1xuICAgIHByaXZhdGUgZGF0YVRhYmxlU2VydmljZTtcbiAgICAvKipcbiAgICAgKiBEYXRhIHVzZWQgdG8gaW5pdGlhbGl6ZSB0aGUgdGFibGUuXG4gICAgICpcbiAgICAgKiBUaGlzIG11c3QgYWxzbyBjb250YWluIGFsbCByb2xlcyB0aGF0IGFyZSBzZXQgaW4gdGhlIGBjb2x1bW5zYCBwcm9wZXJ0eS5cbiAgICAgKi9cbiAgICBkYXRhOiBSb3dbXTtcbiAgICAvKipcbiAgICAgKiBUaGUgY29sdW1ucyB0aGUgYGRhdGFgIGNvbnNpc3RzIG9mLlxuICAgICAqIFRoZSBsZW5ndGggb2YgdGhpcyBhcnJheSBtdXN0IG1hdGNoIHRoZSBsZW5ndGggb2YgZWFjaCByb3cgaW4gdGhlIGBkYXRhYCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBJZiB7QGxpbmsgaHR0cHM6Ly9kZXZlbG9wZXJzLmdvb2dsZS5jb20vY2hhcnQvaW50ZXJhY3RpdmUvZG9jcy9yb2xlcyByb2xlc30gc2hvdWxkIGJlIGFwcGxpZWQsIHRoZXkgbXVzdCBiZSBpbmNsdWRlZCBpbiB0aGlzIGFycmF5IGFzIHdlbGwuXG4gICAgICovXG4gICAgY29sdW1ucz86IENvbHVtbltdO1xuICAgIC8qKlxuICAgICAqIFVzZWQgdG8gY2hhbmdlIHRoZSBkaXNwbGF5ZWQgdmFsdWUgb2YgdGhlIHNwZWNpZmllZCBjb2x1bW4gaW4gYWxsIHJvd3MuXG4gICAgICpcbiAgICAgKiBFYWNoIGFycmF5IGVsZW1lbnQgbXVzdCBjb25zaXN0IG9mIGFuIGluc3RhbmNlIG9mIGEgW2Bmb3JtYXR0ZXJgXShodHRwczovL2RldmVsb3BlcnMuZ29vZ2xlLmNvbS9jaGFydC9pbnRlcmFjdGl2ZS9kb2NzL3JlZmVyZW5jZSNmb3JtYXR0ZXJzKVxuICAgICAqIGFuZCB0aGUgaW5kZXggb2YgdGhlIGNvbHVtbiB5b3Ugd2FudCB0aGUgZm9ybWF0dGVyIHRvIGdldCBhcHBsaWVkIHRvLlxuICAgICAqL1xuICAgIGZvcm1hdHRlcnM/OiBGb3JtYXR0ZXJbXTtcbiAgICAvKipcbiAgICAgKiBUaGUgZGFzaGJvYXJkIGhhcyBjb21wbGV0ZWQgZHJhd2luZyBhbmQgaXMgcmVhZHkgdG8gYWNjZXB0IGNoYW5nZXMuXG4gICAgICpcbiAgICAgKiBUaGUgcmVhZHkgZXZlbnQgd2lsbCBhbHNvIGZpcmU6XG4gICAgICogLSBhZnRlciB0aGUgY29tcGxldGlvbiBvZiBhIGRhc2hib2FyZCByZWZyZXNoIHRyaWdnZXJlZCBieSBhIHVzZXIgb3IgcHJvZ3JhbW1hdGljIGludGVyYWN0aW9uIHdpdGggb25lIG9mIHRoZSBjb250cm9scyxcbiAgICAgKiAtIGFmdGVyIHJlZHJhd2luZyBhbnkgY2hhcnQgb24gdGhlIGRhc2hib2FyZC5cbiAgICAgKi9cbiAgICByZWFkeTogRXZlbnRFbWl0dGVyPHZvaWQ+O1xuICAgIC8qKlxuICAgICAqIEVtaXRzIHdoZW4gYW4gZXJyb3Igb2NjdXJzIHdoZW4gYXR0ZW1wdGluZyB0byByZW5kZXIgdGhlIGRhc2hib2FyZC5cbiAgICAgKiBPbmUgb3IgbW9yZSBvZiB0aGUgY29udHJvbHMgYW5kIGNoYXJ0cyB0aGF0IGFyZSBwYXJ0IG9mIHRoZSBkYXNoYm9hcmQgbWF5IGhhdmUgZmFpbGVkIHJlbmRlcmluZy5cbiAgICAgKi9cbiAgICBlcnJvcjogRXZlbnRFbWl0dGVyPENoYXJ0RXJyb3JFdmVudD47XG4gICAgcHJpdmF0ZSBjb250cm9sV3JhcHBlcnM7XG4gICAgcHJpdmF0ZSBkYXNoYm9hcmQ/O1xuICAgIHByaXZhdGUgZGF0YVRhYmxlPztcbiAgICBwcml2YXRlIGluaXRpYWxpemVkO1xuICAgIGNvbnN0cnVjdG9yKGVsZW1lbnQ6IEVsZW1lbnRSZWYsIGxvYWRlclNlcnZpY2U6IFNjcmlwdExvYWRlclNlcnZpY2UsIGRhdGFUYWJsZVNlcnZpY2U6IERhdGFUYWJsZVNlcnZpY2UpO1xuICAgIG5nT25Jbml0KCk6IHZvaWQ7XG4gICAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQ7XG4gICAgcHJpdmF0ZSBjcmVhdGVEYXNoYm9hcmQ7XG4gICAgcHJpdmF0ZSByZWdpc3RlckV2ZW50cztcbiAgICBwcml2YXRlIGluaXRpYWxpemVCaW5kaW5ncztcbn1cbiJdfQ==