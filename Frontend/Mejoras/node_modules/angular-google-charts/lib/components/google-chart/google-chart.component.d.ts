/// <reference types="@types/google.visualization" />
import { ElementRef, EventEmitter, OnChanges, OnDestroy, OnInit, SimpleChanges } from '@angular/core';
import { Observable } from 'rxjs';
import { DataTableService } from '../../services/data-table.service';
import { ScriptLoaderService } from '../../services/script-loader.service';
import { ChartType } from '../../types/chart-type';
import { ChartErrorEvent, ChartMouseLeaveEvent, ChartMouseOverEvent, ChartReadyEvent, ChartSelectionChangedEvent } from '../../types/events';
import { Formatter } from '../../types/formatter';
import { ChartBase, Column, Row } from '../chart-base/chart-base.component';
import { DashboardComponent } from '../dashboard/dashboard.component';
import * as ɵngcc0 from '@angular/core';
export declare class GoogleChartComponent implements ChartBase, OnInit, OnChanges, OnDestroy {
    private element;
    private scriptLoaderService;
    private dataTableService;
    private dashboard?;
    /**
     * The type of the chart to create.
     */
    type: ChartType;
    /**
     * Data used to initialize the table.
     *
     * This must also contain all roles that are set in the `columns` property.
     */
    data: Row[];
    /**
     * The columns the `data` consists of.
     * The length of this array must match the length of each row in the `data` object.
     *
     * If {@link https://developers.google.com/chart/interactive/docs/roles roles} should be applied, they must be included in this array as well.
     */
    columns?: Column[];
    /**
     * A convenience property used to set the title of the chart.
     *
     * This can also be set using `options.title`, which, if existant, will overwrite this value.
     */
    title?: string;
    /**
     * A convenience property used to set the width of the chart in pixels.
     *
     * This can also be set using `options.width`, which, if existant, will overwrite this value.
     */
    width?: number;
    /**
     * A convenience property used to set the height of the chart in pixels.
     *
     * This can also be set using `options.height`, which, if existant, will overwrite this value.
     */
    height?: number;
    /**
     * The chart-specific options. All options listen in the Google Charts documentation applying
     * to the chart type specified can be used here.
     */
    options: object;
    /**
     * Used to change the displayed value of the specified column in all rows.
     *
     * Each array element must consist of an instance of a [`formatter`](https://developers.google.com/chart/interactive/docs/reference#formatters)
     * and the index of the column you want the formatter to get applied to.
     */
    formatters?: Formatter[];
    /**
     * If this is set to `true`, the chart will be redrawn if the browser window is resized.
     * Defaults to `false` and should only be used when specifying the width or height of the chart
     * in percent.
     *
     * Note that this can impact performance.
     */
    dynamicResize: boolean;
    ready: EventEmitter<ChartReadyEvent<google.visualization.ChartBase>>;
    error: EventEmitter<ChartErrorEvent>;
    select: EventEmitter<ChartSelectionChangedEvent>;
    mouseover: EventEmitter<ChartMouseOverEvent>;
    mouseleave: EventEmitter<ChartMouseLeaveEvent>;
    private resizeSubscription?;
    private dataTable;
    private wrapper;
    private wrapperReadySubject;
    private initialized;
    private eventListeners;
    constructor(element: ElementRef, scriptLoaderService: ScriptLoaderService, dataTableService: DataTableService, dashboard?: DashboardComponent | undefined);
    get chart(): google.visualization.ChartBase | null;
    get wrapperReady$(): Observable<google.visualization.ChartWrapper>;
    get chartWrapper(): google.visualization.ChartWrapper;
    set chartWrapper(wrapper: google.visualization.ChartWrapper);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    /**
     * For listening to events other than the most common ones (available via Output properties).
     *
     * Can be called after the chart emits that it's "ready".
     *
     * Returns a handle that can be used for `removeEventListener`.
     */
    addEventListener(eventName: string, callback: Function): any;
    removeEventListener(handle: any): void;
    private updateResizeListener;
    private unsubscribeToResizeIfSubscribed;
    private mergeOptions;
    private registerChartEvents;
    private registerChartEvent;
    private drawChart;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<GoogleChartComponent, [null, null, null, { optional: true; }]>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<GoogleChartComponent, "google-chart", ["googleChart"], { "options": "options"; "dynamicResize": "dynamicResize"; "type": "type"; "data": "data"; "columns": "columns"; "title": "title"; "width": "width"; "height": "height"; "formatters": "formatters"; }, { "ready": "ready"; "error": "error"; "select": "select"; "mouseover": "mouseover"; "mouseleave": "mouseleave"; }, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ29vZ2xlLWNoYXJ0LmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJnb29nbGUtY2hhcnQuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiLy8vIDxyZWZlcmVuY2UgdHlwZXM9XCJAdHlwZXMvZ29vZ2xlLnZpc3VhbGl6YXRpb25cIiAvPlxuaW1wb3J0IHsgRWxlbWVudFJlZiwgRXZlbnRFbWl0dGVyLCBPbkNoYW5nZXMsIE9uRGVzdHJveSwgT25Jbml0LCBTaW1wbGVDaGFuZ2VzIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBEYXRhVGFibGVTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vc2VydmljZXMvZGF0YS10YWJsZS5zZXJ2aWNlJztcbmltcG9ydCB7IFNjcmlwdExvYWRlclNlcnZpY2UgfSBmcm9tICcuLi8uLi9zZXJ2aWNlcy9zY3JpcHQtbG9hZGVyLnNlcnZpY2UnO1xuaW1wb3J0IHsgQ2hhcnRUeXBlIH0gZnJvbSAnLi4vLi4vdHlwZXMvY2hhcnQtdHlwZSc7XG5pbXBvcnQgeyBDaGFydEVycm9yRXZlbnQsIENoYXJ0TW91c2VMZWF2ZUV2ZW50LCBDaGFydE1vdXNlT3ZlckV2ZW50LCBDaGFydFJlYWR5RXZlbnQsIENoYXJ0U2VsZWN0aW9uQ2hhbmdlZEV2ZW50IH0gZnJvbSAnLi4vLi4vdHlwZXMvZXZlbnRzJztcbmltcG9ydCB7IEZvcm1hdHRlciB9IGZyb20gJy4uLy4uL3R5cGVzL2Zvcm1hdHRlcic7XG5pbXBvcnQgeyBDaGFydEJhc2UsIENvbHVtbiwgUm93IH0gZnJvbSAnLi4vY2hhcnQtYmFzZS9jaGFydC1iYXNlLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBEYXNoYm9hcmRDb21wb25lbnQgfSBmcm9tICcuLi9kYXNoYm9hcmQvZGFzaGJvYXJkLmNvbXBvbmVudCc7XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBHb29nbGVDaGFydENvbXBvbmVudCBpbXBsZW1lbnRzIENoYXJ0QmFzZSwgT25Jbml0LCBPbkNoYW5nZXMsIE9uRGVzdHJveSB7XG4gICAgcHJpdmF0ZSBlbGVtZW50O1xuICAgIHByaXZhdGUgc2NyaXB0TG9hZGVyU2VydmljZTtcbiAgICBwcml2YXRlIGRhdGFUYWJsZVNlcnZpY2U7XG4gICAgcHJpdmF0ZSBkYXNoYm9hcmQ/O1xuICAgIC8qKlxuICAgICAqIFRoZSB0eXBlIG9mIHRoZSBjaGFydCB0byBjcmVhdGUuXG4gICAgICovXG4gICAgdHlwZTogQ2hhcnRUeXBlO1xuICAgIC8qKlxuICAgICAqIERhdGEgdXNlZCB0byBpbml0aWFsaXplIHRoZSB0YWJsZS5cbiAgICAgKlxuICAgICAqIFRoaXMgbXVzdCBhbHNvIGNvbnRhaW4gYWxsIHJvbGVzIHRoYXQgYXJlIHNldCBpbiB0aGUgYGNvbHVtbnNgIHByb3BlcnR5LlxuICAgICAqL1xuICAgIGRhdGE6IFJvd1tdO1xuICAgIC8qKlxuICAgICAqIFRoZSBjb2x1bW5zIHRoZSBgZGF0YWAgY29uc2lzdHMgb2YuXG4gICAgICogVGhlIGxlbmd0aCBvZiB0aGlzIGFycmF5IG11c3QgbWF0Y2ggdGhlIGxlbmd0aCBvZiBlYWNoIHJvdyBpbiB0aGUgYGRhdGFgIG9iamVjdC5cbiAgICAgKlxuICAgICAqIElmIHtAbGluayBodHRwczovL2RldmVsb3BlcnMuZ29vZ2xlLmNvbS9jaGFydC9pbnRlcmFjdGl2ZS9kb2NzL3JvbGVzIHJvbGVzfSBzaG91bGQgYmUgYXBwbGllZCwgdGhleSBtdXN0IGJlIGluY2x1ZGVkIGluIHRoaXMgYXJyYXkgYXMgd2VsbC5cbiAgICAgKi9cbiAgICBjb2x1bW5zPzogQ29sdW1uW107XG4gICAgLyoqXG4gICAgICogQSBjb252ZW5pZW5jZSBwcm9wZXJ0eSB1c2VkIHRvIHNldCB0aGUgdGl0bGUgb2YgdGhlIGNoYXJ0LlxuICAgICAqXG4gICAgICogVGhpcyBjYW4gYWxzbyBiZSBzZXQgdXNpbmcgYG9wdGlvbnMudGl0bGVgLCB3aGljaCwgaWYgZXhpc3RhbnQsIHdpbGwgb3ZlcndyaXRlIHRoaXMgdmFsdWUuXG4gICAgICovXG4gICAgdGl0bGU/OiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogQSBjb252ZW5pZW5jZSBwcm9wZXJ0eSB1c2VkIHRvIHNldCB0aGUgd2lkdGggb2YgdGhlIGNoYXJ0IGluIHBpeGVscy5cbiAgICAgKlxuICAgICAqIFRoaXMgY2FuIGFsc28gYmUgc2V0IHVzaW5nIGBvcHRpb25zLndpZHRoYCwgd2hpY2gsIGlmIGV4aXN0YW50LCB3aWxsIG92ZXJ3cml0ZSB0aGlzIHZhbHVlLlxuICAgICAqL1xuICAgIHdpZHRoPzogbnVtYmVyO1xuICAgIC8qKlxuICAgICAqIEEgY29udmVuaWVuY2UgcHJvcGVydHkgdXNlZCB0byBzZXQgdGhlIGhlaWdodCBvZiB0aGUgY2hhcnQgaW4gcGl4ZWxzLlxuICAgICAqXG4gICAgICogVGhpcyBjYW4gYWxzbyBiZSBzZXQgdXNpbmcgYG9wdGlvbnMuaGVpZ2h0YCwgd2hpY2gsIGlmIGV4aXN0YW50LCB3aWxsIG92ZXJ3cml0ZSB0aGlzIHZhbHVlLlxuICAgICAqL1xuICAgIGhlaWdodD86IG51bWJlcjtcbiAgICAvKipcbiAgICAgKiBUaGUgY2hhcnQtc3BlY2lmaWMgb3B0aW9ucy4gQWxsIG9wdGlvbnMgbGlzdGVuIGluIHRoZSBHb29nbGUgQ2hhcnRzIGRvY3VtZW50YXRpb24gYXBwbHlpbmdcbiAgICAgKiB0byB0aGUgY2hhcnQgdHlwZSBzcGVjaWZpZWQgY2FuIGJlIHVzZWQgaGVyZS5cbiAgICAgKi9cbiAgICBvcHRpb25zOiBvYmplY3Q7XG4gICAgLyoqXG4gICAgICogVXNlZCB0byBjaGFuZ2UgdGhlIGRpc3BsYXllZCB2YWx1ZSBvZiB0aGUgc3BlY2lmaWVkIGNvbHVtbiBpbiBhbGwgcm93cy5cbiAgICAgKlxuICAgICAqIEVhY2ggYXJyYXkgZWxlbWVudCBtdXN0IGNvbnNpc3Qgb2YgYW4gaW5zdGFuY2Ugb2YgYSBbYGZvcm1hdHRlcmBdKGh0dHBzOi8vZGV2ZWxvcGVycy5nb29nbGUuY29tL2NoYXJ0L2ludGVyYWN0aXZlL2RvY3MvcmVmZXJlbmNlI2Zvcm1hdHRlcnMpXG4gICAgICogYW5kIHRoZSBpbmRleCBvZiB0aGUgY29sdW1uIHlvdSB3YW50IHRoZSBmb3JtYXR0ZXIgdG8gZ2V0IGFwcGxpZWQgdG8uXG4gICAgICovXG4gICAgZm9ybWF0dGVycz86IEZvcm1hdHRlcltdO1xuICAgIC8qKlxuICAgICAqIElmIHRoaXMgaXMgc2V0IHRvIGB0cnVlYCwgdGhlIGNoYXJ0IHdpbGwgYmUgcmVkcmF3biBpZiB0aGUgYnJvd3NlciB3aW5kb3cgaXMgcmVzaXplZC5cbiAgICAgKiBEZWZhdWx0cyB0byBgZmFsc2VgIGFuZCBzaG91bGQgb25seSBiZSB1c2VkIHdoZW4gc3BlY2lmeWluZyB0aGUgd2lkdGggb3IgaGVpZ2h0IG9mIHRoZSBjaGFydFxuICAgICAqIGluIHBlcmNlbnQuXG4gICAgICpcbiAgICAgKiBOb3RlIHRoYXQgdGhpcyBjYW4gaW1wYWN0IHBlcmZvcm1hbmNlLlxuICAgICAqL1xuICAgIGR5bmFtaWNSZXNpemU6IGJvb2xlYW47XG4gICAgcmVhZHk6IEV2ZW50RW1pdHRlcjxDaGFydFJlYWR5RXZlbnQ8Z29vZ2xlLnZpc3VhbGl6YXRpb24uQ2hhcnRCYXNlPj47XG4gICAgZXJyb3I6IEV2ZW50RW1pdHRlcjxDaGFydEVycm9yRXZlbnQ+O1xuICAgIHNlbGVjdDogRXZlbnRFbWl0dGVyPENoYXJ0U2VsZWN0aW9uQ2hhbmdlZEV2ZW50PjtcbiAgICBtb3VzZW92ZXI6IEV2ZW50RW1pdHRlcjxDaGFydE1vdXNlT3ZlckV2ZW50PjtcbiAgICBtb3VzZWxlYXZlOiBFdmVudEVtaXR0ZXI8Q2hhcnRNb3VzZUxlYXZlRXZlbnQ+O1xuICAgIHByaXZhdGUgcmVzaXplU3Vic2NyaXB0aW9uPztcbiAgICBwcml2YXRlIGRhdGFUYWJsZTtcbiAgICBwcml2YXRlIHdyYXBwZXI7XG4gICAgcHJpdmF0ZSB3cmFwcGVyUmVhZHlTdWJqZWN0O1xuICAgIHByaXZhdGUgaW5pdGlhbGl6ZWQ7XG4gICAgcHJpdmF0ZSBldmVudExpc3RlbmVycztcbiAgICBjb25zdHJ1Y3RvcihlbGVtZW50OiBFbGVtZW50UmVmLCBzY3JpcHRMb2FkZXJTZXJ2aWNlOiBTY3JpcHRMb2FkZXJTZXJ2aWNlLCBkYXRhVGFibGVTZXJ2aWNlOiBEYXRhVGFibGVTZXJ2aWNlLCBkYXNoYm9hcmQ/OiBEYXNoYm9hcmRDb21wb25lbnQgfCB1bmRlZmluZWQpO1xuICAgIGdldCBjaGFydCgpOiBnb29nbGUudmlzdWFsaXphdGlvbi5DaGFydEJhc2UgfCBudWxsO1xuICAgIGdldCB3cmFwcGVyUmVhZHkkKCk6IE9ic2VydmFibGU8Z29vZ2xlLnZpc3VhbGl6YXRpb24uQ2hhcnRXcmFwcGVyPjtcbiAgICBnZXQgY2hhcnRXcmFwcGVyKCk6IGdvb2dsZS52aXN1YWxpemF0aW9uLkNoYXJ0V3JhcHBlcjtcbiAgICBzZXQgY2hhcnRXcmFwcGVyKHdyYXBwZXI6IGdvb2dsZS52aXN1YWxpemF0aW9uLkNoYXJ0V3JhcHBlcik7XG4gICAgbmdPbkluaXQoKTogdm9pZDtcbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZDtcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEZvciBsaXN0ZW5pbmcgdG8gZXZlbnRzIG90aGVyIHRoYW4gdGhlIG1vc3QgY29tbW9uIG9uZXMgKGF2YWlsYWJsZSB2aWEgT3V0cHV0IHByb3BlcnRpZXMpLlxuICAgICAqXG4gICAgICogQ2FuIGJlIGNhbGxlZCBhZnRlciB0aGUgY2hhcnQgZW1pdHMgdGhhdCBpdCdzIFwicmVhZHlcIi5cbiAgICAgKlxuICAgICAqIFJldHVybnMgYSBoYW5kbGUgdGhhdCBjYW4gYmUgdXNlZCBmb3IgYHJlbW92ZUV2ZW50TGlzdGVuZXJgLlxuICAgICAqL1xuICAgIGFkZEV2ZW50TGlzdGVuZXIoZXZlbnROYW1lOiBzdHJpbmcsIGNhbGxiYWNrOiBGdW5jdGlvbik6IGFueTtcbiAgICByZW1vdmVFdmVudExpc3RlbmVyKGhhbmRsZTogYW55KTogdm9pZDtcbiAgICBwcml2YXRlIHVwZGF0ZVJlc2l6ZUxpc3RlbmVyO1xuICAgIHByaXZhdGUgdW5zdWJzY3JpYmVUb1Jlc2l6ZUlmU3Vic2NyaWJlZDtcbiAgICBwcml2YXRlIG1lcmdlT3B0aW9ucztcbiAgICBwcml2YXRlIHJlZ2lzdGVyQ2hhcnRFdmVudHM7XG4gICAgcHJpdmF0ZSByZWdpc3RlckNoYXJ0RXZlbnQ7XG4gICAgcHJpdmF0ZSBkcmF3Q2hhcnQ7XG59XG4iXX0=