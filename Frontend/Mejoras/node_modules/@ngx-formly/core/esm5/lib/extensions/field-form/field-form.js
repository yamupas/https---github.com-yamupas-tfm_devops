/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { FormGroup, FormControl, Validators } from '@angular/forms';
import { getFieldValue, defineHiddenProp } from '../../utils';
import { registerControl, findControl, updateValidity as updateControlValidity } from './utils';
import { of } from 'rxjs';
/**
 * \@experimental
 */
var /**
 * \@experimental
 */
FieldFormExtension = /** @class */ (function () {
    function FieldFormExtension(config) {
        this.config = config;
    }
    /**
     * @param {?} field
     * @return {?}
     */
    FieldFormExtension.prototype.onPopulate = /**
     * @param {?} field
     * @return {?}
     */
    function (field) {
        if (field.key) {
            this.addFormControl(field);
        }
        if (field.parent && field.fieldGroup && !field.key) {
            defineHiddenProp(field, 'formControl', field.parent.formControl);
        }
    };
    /**
     * @param {?} field
     * @return {?}
     */
    FieldFormExtension.prototype.postPopulate = /**
     * @param {?} field
     * @return {?}
     */
    function (field) {
        if (field.parent) {
            return;
        }
        /** @type {?} */
        var updateValidity = this.setValidators(field);
        updateValidity && ((/** @type {?} */ (field.formControl)))._updateTreeValidity();
    };
    /**
     * @private
     * @param {?} field
     * @return {?}
     */
    FieldFormExtension.prototype.addFormControl = /**
     * @private
     * @param {?} field
     * @return {?}
     */
    function (field) {
        /** @type {?} */
        var control = findControl(field);
        if (!control) {
            /** @type {?} */
            var controlOptions = { updateOn: field.modelOptions.updateOn };
            /** @type {?} */
            var value = getFieldValue(field);
            /** @type {?} */
            var ref = this.config ? this.config.resolveFieldTypeRef(field) : null;
            if (ref && ref.componentType && ref.componentType['createControl']) {
                /** @type {?} */
                var component = ref.componentType;
                console.warn("NgxFormly: '" + component.name + "::createControl' is deprecated since v5.0, use 'prePopulate' hook instead.");
                control = component['createControl'](value, field);
            }
            else if (field.fieldGroup) {
                // TODO: move to postPopulate
                control = new FormGroup({}, controlOptions);
            }
            else {
                control = new FormControl(value, controlOptions);
            }
        }
        registerControl(field, control);
    };
    /**
     * @private
     * @param {?} field
     * @return {?}
     */
    FieldFormExtension.prototype.setValidators = /**
     * @private
     * @param {?} field
     * @return {?}
     */
    function (field) {
        var _this = this;
        /** @type {?} */
        var updateValidity = false;
        if (field.key || !field.parent) {
            var c_1 = field.formControl;
            /** @type {?} */
            var disabled = field.templateOptions ? field.templateOptions.disabled : false;
            if (disabled && c_1.enabled) {
                c_1.disable({ emitEvent: false, onlySelf: true });
                updateValidity = true;
            }
            if (null === c_1.validator || null === c_1.asyncValidator) {
                c_1.setValidators((/**
                 * @return {?}
                 */
                function () {
                    /** @type {?} */
                    var v = Validators.compose(_this.mergeValidators(field, '_validators'));
                    return v ? v(c_1) : null;
                }));
                c_1.setAsyncValidators((/**
                 * @return {?}
                 */
                function () {
                    /** @type {?} */
                    var v = Validators.composeAsync(_this.mergeValidators(field, '_asyncValidators'));
                    return v ? v(c_1) : of(null);
                }));
                if (!c_1.parent) {
                    updateControlValidity(c_1);
                }
                else {
                    updateValidity = true;
                }
            }
        }
        (field.fieldGroup || []).forEach((/**
         * @param {?} f
         * @return {?}
         */
        function (f) { return _this.setValidators(f) && (updateValidity = true); }));
        return updateValidity;
    };
    /**
     * @private
     * @template T
     * @param {?} field
     * @param {?} type
     * @return {?}
     */
    FieldFormExtension.prototype.mergeValidators = /**
     * @private
     * @template T
     * @param {?} field
     * @param {?} type
     * @return {?}
     */
    function (field, type) {
        var _this = this;
        /** @type {?} */
        var validators = [];
        /** @type {?} */
        var c = field.formControl;
        if (c && c['_fields'] && c['_fields'].length > 1) {
            c['_fields']
                .filter((/**
             * @param {?} f
             * @return {?}
             */
            function (f) { return !f._hide; }))
                .forEach((/**
             * @param {?} f
             * @return {?}
             */
            function (f) { return validators.push.apply(validators, tslib_1.__spread(f[type])); }));
        }
        else {
            validators.push.apply(validators, tslib_1.__spread(field[type]));
        }
        if (field.fieldGroup) {
            field.fieldGroup
                .filter((/**
             * @param {?} f
             * @return {?}
             */
            function (f) { return !f.key && f.fieldGroup; }))
                .forEach((/**
             * @param {?} f
             * @return {?}
             */
            function (f) { return validators.push.apply(validators, tslib_1.__spread(_this.mergeValidators(f, type))); }));
        }
        return validators;
    };
    return FieldFormExtension;
}());
/**
 * \@experimental
 */
export { FieldFormExtension };
if (false) {
    /**
     * @type {?}
     * @private
     */
    FieldFormExtension.prototype.config;
}
//# sourceMappingURL=data:application/json;base64,