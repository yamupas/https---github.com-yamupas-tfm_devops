import { EventEmitter, ViewContainerRef, SimpleChanges, ComponentFactoryResolver, OnInit, OnChanges, OnDestroy, DoCheck, AfterContentInit, AfterContentChecked, AfterViewInit, AfterViewChecked, Renderer2, ElementRef } from '@angular/core';
import { FormGroup } from '@angular/forms';
import { FormlyConfig } from '../services/formly.config';
import { FormlyFieldConfig, FormlyFormOptions } from './formly.field.config';
import * as ɵngcc0 from '@angular/core';
export declare class FormlyField implements OnInit, OnChanges, DoCheck, AfterContentInit, AfterContentChecked, AfterViewInit, AfterViewChecked, OnDestroy {
    private formlyConfig;
    private renderer;
    private resolver;
    private elementRef;
    field: FormlyFieldConfig;
    warnDeprecation: boolean;
    model: any;
    form: FormGroup;
    options: FormlyFormOptions;
    modelChange: EventEmitter<any>;
    containerRef: ViewContainerRef;
    private hostObservers;
    private componentRefs;
    private hooksObservers;
    constructor(formlyConfig: FormlyConfig, renderer: Renderer2, resolver: ComponentFactoryResolver, elementRef: ElementRef, hideDeprecation: any);
    ngAfterContentInit(): void;
    ngAfterContentChecked(): void;
    ngAfterViewInit(): void;
    ngAfterViewChecked(): void;
    ngDoCheck(): void;
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    private renderField;
    private triggerHook;
    private attachComponentRef;
    private renderHostBinding;
    private resetRefs;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<FormlyField, [null, null, null, null, { attribute: "hide-deprecation"; }]>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<FormlyField, "formly-field", never, { "model": "model"; "form": "form"; "options": "options"; "field": "field"; }, { "modelChange": "modelChange"; }, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybWx5LmZpZWxkLmQudHMiLCJzb3VyY2VzIjpbImZvcm1seS5maWVsZC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRXZlbnRFbWl0dGVyLCBWaWV3Q29udGFpbmVyUmVmLCBTaW1wbGVDaGFuZ2VzLCBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIsIE9uSW5pdCwgT25DaGFuZ2VzLCBPbkRlc3Ryb3ksIERvQ2hlY2ssIEFmdGVyQ29udGVudEluaXQsIEFmdGVyQ29udGVudENoZWNrZWQsIEFmdGVyVmlld0luaXQsIEFmdGVyVmlld0NoZWNrZWQsIFJlbmRlcmVyMiwgRWxlbWVudFJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRm9ybUdyb3VwIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHsgRm9ybWx5Q29uZmlnIH0gZnJvbSAnLi4vc2VydmljZXMvZm9ybWx5LmNvbmZpZyc7XG5pbXBvcnQgeyBGb3JtbHlGaWVsZENvbmZpZywgRm9ybWx5Rm9ybU9wdGlvbnMgfSBmcm9tICcuL2Zvcm1seS5maWVsZC5jb25maWcnO1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgRm9ybWx5RmllbGQgaW1wbGVtZW50cyBPbkluaXQsIE9uQ2hhbmdlcywgRG9DaGVjaywgQWZ0ZXJDb250ZW50SW5pdCwgQWZ0ZXJDb250ZW50Q2hlY2tlZCwgQWZ0ZXJWaWV3SW5pdCwgQWZ0ZXJWaWV3Q2hlY2tlZCwgT25EZXN0cm95IHtcbiAgICBwcml2YXRlIGZvcm1seUNvbmZpZztcbiAgICBwcml2YXRlIHJlbmRlcmVyO1xuICAgIHByaXZhdGUgcmVzb2x2ZXI7XG4gICAgcHJpdmF0ZSBlbGVtZW50UmVmO1xuICAgIGZpZWxkOiBGb3JtbHlGaWVsZENvbmZpZztcbiAgICB3YXJuRGVwcmVjYXRpb246IGJvb2xlYW47XG4gICAgbW9kZWw6IGFueTtcbiAgICBmb3JtOiBGb3JtR3JvdXA7XG4gICAgb3B0aW9uczogRm9ybWx5Rm9ybU9wdGlvbnM7XG4gICAgbW9kZWxDaGFuZ2U6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIGNvbnRhaW5lclJlZjogVmlld0NvbnRhaW5lclJlZjtcbiAgICBwcml2YXRlIGhvc3RPYnNlcnZlcnM7XG4gICAgcHJpdmF0ZSBjb21wb25lbnRSZWZzO1xuICAgIHByaXZhdGUgaG9va3NPYnNlcnZlcnM7XG4gICAgY29uc3RydWN0b3IoZm9ybWx5Q29uZmlnOiBGb3JtbHlDb25maWcsIHJlbmRlcmVyOiBSZW5kZXJlcjIsIHJlc29sdmVyOiBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIsIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYsIGhpZGVEZXByZWNhdGlvbjogYW55KTtcbiAgICBuZ0FmdGVyQ29udGVudEluaXQoKTogdm9pZDtcbiAgICBuZ0FmdGVyQ29udGVudENoZWNrZWQoKTogdm9pZDtcbiAgICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZDtcbiAgICBuZ0FmdGVyVmlld0NoZWNrZWQoKTogdm9pZDtcbiAgICBuZ0RvQ2hlY2soKTogdm9pZDtcbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xuICAgIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkO1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG4gICAgcHJpdmF0ZSByZW5kZXJGaWVsZDtcbiAgICBwcml2YXRlIHRyaWdnZXJIb29rO1xuICAgIHByaXZhdGUgYXR0YWNoQ29tcG9uZW50UmVmO1xuICAgIHByaXZhdGUgcmVuZGVySG9zdEJpbmRpbmc7XG4gICAgcHJpdmF0ZSByZXNldFJlZnM7XG59XG4iXX0=