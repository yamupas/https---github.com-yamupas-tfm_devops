import { ElementRef, OnChanges, SimpleChanges, Renderer2, DoCheck, OnDestroy } from '@angular/core';
import { FormlyFieldConfig, FormlyTemplateOptions } from './formly.field.config';
import * as ɵngcc0 from '@angular/core';
export declare class FormlyAttributes implements OnChanges, DoCheck, OnDestroy {
    private renderer;
    private elementRef;
    field: FormlyFieldConfig;
    id: string;
    private document;
    private uiAttributesCache;
    private uiAttributes;
    /**
     * HostBinding doesn't register listeners conditionally which may produce some perf issues.
     *
     * Formly issue: https://github.com/ngx-formly/ngx-formly/issues/1991
     */
    private uiEvents;
    readonly to: FormlyTemplateOptions;
    private readonly fieldAttrElements;
    constructor(renderer: Renderer2, elementRef: ElementRef, _document: any);
    ngOnChanges(changes: SimpleChanges): void;
    /**
     * We need to re-evaluate all the attributes on every change detection cycle, because
     * by using a HostBinding we run into certain edge cases. This means that whatever logic
     * is in here has to be super lean or we risk seriously damaging or destroying the performance.
     *
     * Formly issue: https://github.com/ngx-formly/ngx-formly/issues/1317
     * Material issue: https://github.com/angular/components/issues/14024
     */
    ngDoCheck(): void;
    ngOnDestroy(): void;
    toggleFocus(value: boolean): void;
    onFocus($event: any): void;
    onBlur($event: any): void;
    onChange($event: any): void;
    private attachElementRef;
    private detachElementRef;
    private setAttribute;
    private removeAttribute;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<FormlyAttributes, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<FormlyAttributes, "[formlyAttributes]", never, { "field": "formlyAttributes"; "id": "id"; }, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybWx5LmF0dHJpYnV0ZXMuZC50cyIsInNvdXJjZXMiOlsiZm9ybWx5LmF0dHJpYnV0ZXMuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFbGVtZW50UmVmLCBPbkNoYW5nZXMsIFNpbXBsZUNoYW5nZXMsIFJlbmRlcmVyMiwgRG9DaGVjaywgT25EZXN0cm95IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBGb3JtbHlGaWVsZENvbmZpZywgRm9ybWx5VGVtcGxhdGVPcHRpb25zIH0gZnJvbSAnLi9mb3JtbHkuZmllbGQuY29uZmlnJztcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIEZvcm1seUF0dHJpYnV0ZXMgaW1wbGVtZW50cyBPbkNoYW5nZXMsIERvQ2hlY2ssIE9uRGVzdHJveSB7XG4gICAgcHJpdmF0ZSByZW5kZXJlcjtcbiAgICBwcml2YXRlIGVsZW1lbnRSZWY7XG4gICAgZmllbGQ6IEZvcm1seUZpZWxkQ29uZmlnO1xuICAgIGlkOiBzdHJpbmc7XG4gICAgcHJpdmF0ZSBkb2N1bWVudDtcbiAgICBwcml2YXRlIHVpQXR0cmlidXRlc0NhY2hlO1xuICAgIHByaXZhdGUgdWlBdHRyaWJ1dGVzO1xuICAgIC8qKlxuICAgICAqIEhvc3RCaW5kaW5nIGRvZXNuJ3QgcmVnaXN0ZXIgbGlzdGVuZXJzIGNvbmRpdGlvbmFsbHkgd2hpY2ggbWF5IHByb2R1Y2Ugc29tZSBwZXJmIGlzc3Vlcy5cbiAgICAgKlxuICAgICAqIEZvcm1seSBpc3N1ZTogaHR0cHM6Ly9naXRodWIuY29tL25neC1mb3JtbHkvbmd4LWZvcm1seS9pc3N1ZXMvMTk5MVxuICAgICAqL1xuICAgIHByaXZhdGUgdWlFdmVudHM7XG4gICAgcmVhZG9ubHkgdG86IEZvcm1seVRlbXBsYXRlT3B0aW9ucztcbiAgICBwcml2YXRlIHJlYWRvbmx5IGZpZWxkQXR0ckVsZW1lbnRzO1xuICAgIGNvbnN0cnVjdG9yKHJlbmRlcmVyOiBSZW5kZXJlcjIsIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYsIF9kb2N1bWVudDogYW55KTtcbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBXZSBuZWVkIHRvIHJlLWV2YWx1YXRlIGFsbCB0aGUgYXR0cmlidXRlcyBvbiBldmVyeSBjaGFuZ2UgZGV0ZWN0aW9uIGN5Y2xlLCBiZWNhdXNlXG4gICAgICogYnkgdXNpbmcgYSBIb3N0QmluZGluZyB3ZSBydW4gaW50byBjZXJ0YWluIGVkZ2UgY2FzZXMuIFRoaXMgbWVhbnMgdGhhdCB3aGF0ZXZlciBsb2dpY1xuICAgICAqIGlzIGluIGhlcmUgaGFzIHRvIGJlIHN1cGVyIGxlYW4gb3Igd2UgcmlzayBzZXJpb3VzbHkgZGFtYWdpbmcgb3IgZGVzdHJveWluZyB0aGUgcGVyZm9ybWFuY2UuXG4gICAgICpcbiAgICAgKiBGb3JtbHkgaXNzdWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9uZ3gtZm9ybWx5L25neC1mb3JtbHkvaXNzdWVzLzEzMTdcbiAgICAgKiBNYXRlcmlhbCBpc3N1ZTogaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvY29tcG9uZW50cy9pc3N1ZXMvMTQwMjRcbiAgICAgKi9cbiAgICBuZ0RvQ2hlY2soKTogdm9pZDtcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xuICAgIHRvZ2dsZUZvY3VzKHZhbHVlOiBib29sZWFuKTogdm9pZDtcbiAgICBvbkZvY3VzKCRldmVudDogYW55KTogdm9pZDtcbiAgICBvbkJsdXIoJGV2ZW50OiBhbnkpOiB2b2lkO1xuICAgIG9uQ2hhbmdlKCRldmVudDogYW55KTogdm9pZDtcbiAgICBwcml2YXRlIGF0dGFjaEVsZW1lbnRSZWY7XG4gICAgcHJpdmF0ZSBkZXRhY2hFbGVtZW50UmVmO1xuICAgIHByaXZhdGUgc2V0QXR0cmlidXRlO1xuICAgIHByaXZhdGUgcmVtb3ZlQXR0cmlidXRlO1xufVxuIl19