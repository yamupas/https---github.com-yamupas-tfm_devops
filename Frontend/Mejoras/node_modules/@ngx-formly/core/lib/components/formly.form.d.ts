import { DoCheck, OnChanges, SimpleChanges, EventEmitter, OnDestroy, ElementRef, NgZone } from '@angular/core';
import { FormGroup, FormArray, FormGroupDirective } from '@angular/forms';
import { FormlyFieldConfig, FormlyFormOptions } from './formly.field.config';
import { FormlyFormBuilder } from '../services/formly.form.builder';
import { FormlyConfig } from '../services/formly.config';
import * as ɵngcc0 from '@angular/core';
export declare class FormlyForm implements DoCheck, OnChanges, OnDestroy {
    private formlyBuilder;
    private formlyConfig;
    private ngZone;
    private parentFormGroup;
    form: FormGroup | FormArray;
    model: any;
    fields: FormlyFieldConfig[];
    options: FormlyFormOptions;
    modelChange: EventEmitter<any>;
    content: ElementRef<HTMLElement>;
    private immutable;
    private _model;
    private _modelChangeValue;
    private _fields;
    private _options;
    private modelChangeSubs;
    private modelChange$;
    private modelChangeSub;
    constructor(formlyBuilder: FormlyFormBuilder, formlyConfig: FormlyConfig, ngZone: NgZone, immutable: any, parentFormGroup: FormGroupDirective);
    ngDoCheck(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    changeModel({ key, value, field }: {
        key: string;
        value: any;
        field: FormlyFieldConfig;
    }): void;
    setOptions(): void;
    private checkExpressionChange;
    private trackModelChanges;
    private clearModelSubscriptions;
    private readonly field;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<FormlyForm, [null, null, null, { attribute: "immutable"; }, { optional: true; }]>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<FormlyForm, "formly-form", never, { "model": "model"; "fields": "fields"; "options": "options"; "form": "form"; }, { "modelChange": "modelChange"; }, never, ["*"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybWx5LmZvcm0uZC50cyIsInNvdXJjZXMiOlsiZm9ybWx5LmZvcm0uZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEb0NoZWNrLCBPbkNoYW5nZXMsIFNpbXBsZUNoYW5nZXMsIEV2ZW50RW1pdHRlciwgT25EZXN0cm95LCBFbGVtZW50UmVmLCBOZ1pvbmUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEZvcm1Hcm91cCwgRm9ybUFycmF5LCBGb3JtR3JvdXBEaXJlY3RpdmUgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyBGb3JtbHlGaWVsZENvbmZpZywgRm9ybWx5Rm9ybU9wdGlvbnMgfSBmcm9tICcuL2Zvcm1seS5maWVsZC5jb25maWcnO1xuaW1wb3J0IHsgRm9ybWx5Rm9ybUJ1aWxkZXIgfSBmcm9tICcuLi9zZXJ2aWNlcy9mb3JtbHkuZm9ybS5idWlsZGVyJztcbmltcG9ydCB7IEZvcm1seUNvbmZpZyB9IGZyb20gJy4uL3NlcnZpY2VzL2Zvcm1seS5jb25maWcnO1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgRm9ybWx5Rm9ybSBpbXBsZW1lbnRzIERvQ2hlY2ssIE9uQ2hhbmdlcywgT25EZXN0cm95IHtcbiAgICBwcml2YXRlIGZvcm1seUJ1aWxkZXI7XG4gICAgcHJpdmF0ZSBmb3JtbHlDb25maWc7XG4gICAgcHJpdmF0ZSBuZ1pvbmU7XG4gICAgcHJpdmF0ZSBwYXJlbnRGb3JtR3JvdXA7XG4gICAgZm9ybTogRm9ybUdyb3VwIHwgRm9ybUFycmF5O1xuICAgIG1vZGVsOiBhbnk7XG4gICAgZmllbGRzOiBGb3JtbHlGaWVsZENvbmZpZ1tdO1xuICAgIG9wdGlvbnM6IEZvcm1seUZvcm1PcHRpb25zO1xuICAgIG1vZGVsQ2hhbmdlOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBjb250ZW50OiBFbGVtZW50UmVmPEhUTUxFbGVtZW50PjtcbiAgICBwcml2YXRlIGltbXV0YWJsZTtcbiAgICBwcml2YXRlIF9tb2RlbDtcbiAgICBwcml2YXRlIF9tb2RlbENoYW5nZVZhbHVlO1xuICAgIHByaXZhdGUgX2ZpZWxkcztcbiAgICBwcml2YXRlIF9vcHRpb25zO1xuICAgIHByaXZhdGUgbW9kZWxDaGFuZ2VTdWJzO1xuICAgIHByaXZhdGUgbW9kZWxDaGFuZ2UkO1xuICAgIHByaXZhdGUgbW9kZWxDaGFuZ2VTdWI7XG4gICAgY29uc3RydWN0b3IoZm9ybWx5QnVpbGRlcjogRm9ybWx5Rm9ybUJ1aWxkZXIsIGZvcm1seUNvbmZpZzogRm9ybWx5Q29uZmlnLCBuZ1pvbmU6IE5nWm9uZSwgaW1tdXRhYmxlOiBhbnksIHBhcmVudEZvcm1Hcm91cDogRm9ybUdyb3VwRGlyZWN0aXZlKTtcbiAgICBuZ0RvQ2hlY2soKTogdm9pZDtcbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZDtcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xuICAgIGNoYW5nZU1vZGVsKHsga2V5LCB2YWx1ZSwgZmllbGQgfToge1xuICAgICAgICBrZXk6IHN0cmluZztcbiAgICAgICAgdmFsdWU6IGFueTtcbiAgICAgICAgZmllbGQ6IEZvcm1seUZpZWxkQ29uZmlnO1xuICAgIH0pOiB2b2lkO1xuICAgIHNldE9wdGlvbnMoKTogdm9pZDtcbiAgICBwcml2YXRlIGNoZWNrRXhwcmVzc2lvbkNoYW5nZTtcbiAgICBwcml2YXRlIHRyYWNrTW9kZWxDaGFuZ2VzO1xuICAgIHByaXZhdGUgY2xlYXJNb2RlbFN1YnNjcmlwdGlvbnM7XG4gICAgcHJpdmF0ZSByZWFkb25seSBmaWVsZDtcbn1cbiJdfQ==