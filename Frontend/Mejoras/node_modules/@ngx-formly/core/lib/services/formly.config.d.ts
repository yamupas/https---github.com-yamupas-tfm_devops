import { InjectionToken, ComponentRef } from '@angular/core';
import { ValidationErrors, AbstractControl } from '@angular/forms';
import { FieldType } from './../templates/field.type';
import { FormlyFieldConfig, FormlyFieldConfigCache } from '../components/formly.field.config';
import { Observable } from 'rxjs';
import * as ɵngcc0 from '@angular/core';
export declare const FORMLY_CONFIG: InjectionToken<FormlyConfig>;
/** @experimental */
export interface FormlyExtension {
    prePopulate?(field: FormlyFieldConfig): void;
    onPopulate?(field: FormlyFieldConfig): void;
    postPopulate?(field: FormlyFieldConfig): void;
}
/**
 * Maintains list of formly field directive types. This can be used to register new field templates.
 */
export declare class FormlyConfig {
    types: {
        [name: string]: TypeOption;
    };
    validators: {
        [name: string]: ValidatorOption;
    };
    wrappers: {
        [name: string]: WrapperOption;
    };
    messages: {
        [name: string]: ValidationMessageOption['message'];
    };
    templateManipulators: {
        preWrapper: ManipulatorWrapper[];
        postWrapper: ManipulatorWrapper[];
    };
    extras: ConfigOption['extras'];
    extensions: {
        [name: string]: FormlyExtension;
    };
    addConfig(config: ConfigOption): void;
    setType(options: TypeOption | TypeOption[]): void;
    getType(name: string): TypeOption;
    getMergedField(field?: FormlyFieldConfig): any;
    /** @internal */
    resolveFieldTypeRef(field?: FormlyFieldConfigCache): ComponentRef<FieldType>;
    setWrapper(options: WrapperOption): void;
    getWrapper(name: string): WrapperOption;
    setTypeWrapper(type: string, name: string): void;
    setValidator(options: ValidatorOption): void;
    getValidator(name: string): ValidatorOption;
    addValidatorMessage(name: string, message: ValidationMessageOption['message']): void;
    getValidatorMessage(name: string): string | ((error: any, field: FormlyFieldConfig) => string | Observable<string>);
    setManipulator(manipulator: ManipulatorOption): void;
    private mergeExtendedType;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<FormlyConfig, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<FormlyConfig>;
}
export interface TypeOption {
    name: string;
    component?: any;
    wrappers?: string[];
    extends?: string;
    defaultOptions?: FormlyFieldConfig;
}
export interface WrapperOption {
    name: string;
    component: any;
    types?: string[];
}
export interface FieldValidatorFn {
    (c: AbstractControl, field: FormlyFieldConfig, options?: {
        [id: string]: any;
    }): ValidationErrors | null;
}
export interface ValidatorOption {
    name: string;
    validation: FieldValidatorFn;
    options?: {
        [id: string]: any;
    };
}
export interface ExtensionOption {
    name: string;
    extension: FormlyExtension;
}
export interface ValidationMessageOption {
    name: string;
    message: string | ((error: any, field: FormlyFieldConfig) => string | Observable<string>);
}
export interface ManipulatorOption {
    class?: {
        new (): any;
    };
    method?: string;
}
export interface ManipulatorWrapper {
    (f: FormlyFieldConfig): string;
}
export interface TemplateManipulators {
    preWrapper?: ManipulatorWrapper[];
    postWrapper?: ManipulatorWrapper[];
}
export interface ConfigOption {
    types?: TypeOption[];
    wrappers?: WrapperOption[];
    validators?: ValidatorOption[];
    extensions?: ExtensionOption[];
    validationMessages?: ValidationMessageOption[];
    /** @deprecated use `extensions` instead */
    manipulators?: ManipulatorOption[];
    extras?: {
        /** @deprecated use `extensions` instead */
        fieldTransform?: any;
        immutable?: boolean;
        showError?: (field: FieldType) => boolean;
        /**
         * Defines the option which formly rely on to check field expression properties.
         * - `modelChange`: perform a check when the value of the form control changes.
         * - `changeDetectionCheck`: triggers an immediate check when `ngDoCheck` is called.
        */
        checkExpressionOn?: 'modelChange' | 'changeDetectionCheck';
    };
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybWx5LmNvbmZpZy5kLnRzIiwic291cmNlcyI6WyJmb3JtbHkuY29uZmlnLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3Rpb25Ub2tlbiwgQ29tcG9uZW50UmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBWYWxpZGF0aW9uRXJyb3JzLCBBYnN0cmFjdENvbnRyb2wgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyBGaWVsZFR5cGUgfSBmcm9tICcuLy4uL3RlbXBsYXRlcy9maWVsZC50eXBlJztcbmltcG9ydCB7IEZvcm1seUZpZWxkQ29uZmlnLCBGb3JtbHlGaWVsZENvbmZpZ0NhY2hlIH0gZnJvbSAnLi4vY29tcG9uZW50cy9mb3JtbHkuZmllbGQuY29uZmlnJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmV4cG9ydCBkZWNsYXJlIGNvbnN0IEZPUk1MWV9DT05GSUc6IEluamVjdGlvblRva2VuPEZvcm1seUNvbmZpZz47XG4vKiogQGV4cGVyaW1lbnRhbCAqL1xuZXhwb3J0IGludGVyZmFjZSBGb3JtbHlFeHRlbnNpb24ge1xuICAgIHByZVBvcHVsYXRlPyhmaWVsZDogRm9ybWx5RmllbGRDb25maWcpOiB2b2lkO1xuICAgIG9uUG9wdWxhdGU/KGZpZWxkOiBGb3JtbHlGaWVsZENvbmZpZyk6IHZvaWQ7XG4gICAgcG9zdFBvcHVsYXRlPyhmaWVsZDogRm9ybWx5RmllbGRDb25maWcpOiB2b2lkO1xufVxuLyoqXG4gKiBNYWludGFpbnMgbGlzdCBvZiBmb3JtbHkgZmllbGQgZGlyZWN0aXZlIHR5cGVzLiBUaGlzIGNhbiBiZSB1c2VkIHRvIHJlZ2lzdGVyIG5ldyBmaWVsZCB0ZW1wbGF0ZXMuXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIEZvcm1seUNvbmZpZyB7XG4gICAgdHlwZXM6IHtcbiAgICAgICAgW25hbWU6IHN0cmluZ106IFR5cGVPcHRpb247XG4gICAgfTtcbiAgICB2YWxpZGF0b3JzOiB7XG4gICAgICAgIFtuYW1lOiBzdHJpbmddOiBWYWxpZGF0b3JPcHRpb247XG4gICAgfTtcbiAgICB3cmFwcGVyczoge1xuICAgICAgICBbbmFtZTogc3RyaW5nXTogV3JhcHBlck9wdGlvbjtcbiAgICB9O1xuICAgIG1lc3NhZ2VzOiB7XG4gICAgICAgIFtuYW1lOiBzdHJpbmddOiBWYWxpZGF0aW9uTWVzc2FnZU9wdGlvblsnbWVzc2FnZSddO1xuICAgIH07XG4gICAgdGVtcGxhdGVNYW5pcHVsYXRvcnM6IHtcbiAgICAgICAgcHJlV3JhcHBlcjogTWFuaXB1bGF0b3JXcmFwcGVyW107XG4gICAgICAgIHBvc3RXcmFwcGVyOiBNYW5pcHVsYXRvcldyYXBwZXJbXTtcbiAgICB9O1xuICAgIGV4dHJhczogQ29uZmlnT3B0aW9uWydleHRyYXMnXTtcbiAgICBleHRlbnNpb25zOiB7XG4gICAgICAgIFtuYW1lOiBzdHJpbmddOiBGb3JtbHlFeHRlbnNpb247XG4gICAgfTtcbiAgICBhZGRDb25maWcoY29uZmlnOiBDb25maWdPcHRpb24pOiB2b2lkO1xuICAgIHNldFR5cGUob3B0aW9uczogVHlwZU9wdGlvbiB8IFR5cGVPcHRpb25bXSk6IHZvaWQ7XG4gICAgZ2V0VHlwZShuYW1lOiBzdHJpbmcpOiBUeXBlT3B0aW9uO1xuICAgIGdldE1lcmdlZEZpZWxkKGZpZWxkPzogRm9ybWx5RmllbGRDb25maWcpOiBhbnk7XG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIHJlc29sdmVGaWVsZFR5cGVSZWYoZmllbGQ/OiBGb3JtbHlGaWVsZENvbmZpZ0NhY2hlKTogQ29tcG9uZW50UmVmPEZpZWxkVHlwZT47XG4gICAgc2V0V3JhcHBlcihvcHRpb25zOiBXcmFwcGVyT3B0aW9uKTogdm9pZDtcbiAgICBnZXRXcmFwcGVyKG5hbWU6IHN0cmluZyk6IFdyYXBwZXJPcHRpb247XG4gICAgc2V0VHlwZVdyYXBwZXIodHlwZTogc3RyaW5nLCBuYW1lOiBzdHJpbmcpOiB2b2lkO1xuICAgIHNldFZhbGlkYXRvcihvcHRpb25zOiBWYWxpZGF0b3JPcHRpb24pOiB2b2lkO1xuICAgIGdldFZhbGlkYXRvcihuYW1lOiBzdHJpbmcpOiBWYWxpZGF0b3JPcHRpb247XG4gICAgYWRkVmFsaWRhdG9yTWVzc2FnZShuYW1lOiBzdHJpbmcsIG1lc3NhZ2U6IFZhbGlkYXRpb25NZXNzYWdlT3B0aW9uWydtZXNzYWdlJ10pOiB2b2lkO1xuICAgIGdldFZhbGlkYXRvck1lc3NhZ2UobmFtZTogc3RyaW5nKTogc3RyaW5nIHwgKChlcnJvcjogYW55LCBmaWVsZDogRm9ybWx5RmllbGRDb25maWcpID0+IHN0cmluZyB8IE9ic2VydmFibGU8c3RyaW5nPik7XG4gICAgc2V0TWFuaXB1bGF0b3IobWFuaXB1bGF0b3I6IE1hbmlwdWxhdG9yT3B0aW9uKTogdm9pZDtcbiAgICBwcml2YXRlIG1lcmdlRXh0ZW5kZWRUeXBlO1xufVxuZXhwb3J0IGludGVyZmFjZSBUeXBlT3B0aW9uIHtcbiAgICBuYW1lOiBzdHJpbmc7XG4gICAgY29tcG9uZW50PzogYW55O1xuICAgIHdyYXBwZXJzPzogc3RyaW5nW107XG4gICAgZXh0ZW5kcz86IHN0cmluZztcbiAgICBkZWZhdWx0T3B0aW9ucz86IEZvcm1seUZpZWxkQ29uZmlnO1xufVxuZXhwb3J0IGludGVyZmFjZSBXcmFwcGVyT3B0aW9uIHtcbiAgICBuYW1lOiBzdHJpbmc7XG4gICAgY29tcG9uZW50OiBhbnk7XG4gICAgdHlwZXM/OiBzdHJpbmdbXTtcbn1cbmV4cG9ydCBpbnRlcmZhY2UgRmllbGRWYWxpZGF0b3JGbiB7XG4gICAgKGM6IEFic3RyYWN0Q29udHJvbCwgZmllbGQ6IEZvcm1seUZpZWxkQ29uZmlnLCBvcHRpb25zPzoge1xuICAgICAgICBbaWQ6IHN0cmluZ106IGFueTtcbiAgICB9KTogVmFsaWRhdGlvbkVycm9ycyB8IG51bGw7XG59XG5leHBvcnQgaW50ZXJmYWNlIFZhbGlkYXRvck9wdGlvbiB7XG4gICAgbmFtZTogc3RyaW5nO1xuICAgIHZhbGlkYXRpb246IEZpZWxkVmFsaWRhdG9yRm47XG4gICAgb3B0aW9ucz86IHtcbiAgICAgICAgW2lkOiBzdHJpbmddOiBhbnk7XG4gICAgfTtcbn1cbmV4cG9ydCBpbnRlcmZhY2UgRXh0ZW5zaW9uT3B0aW9uIHtcbiAgICBuYW1lOiBzdHJpbmc7XG4gICAgZXh0ZW5zaW9uOiBGb3JtbHlFeHRlbnNpb247XG59XG5leHBvcnQgaW50ZXJmYWNlIFZhbGlkYXRpb25NZXNzYWdlT3B0aW9uIHtcbiAgICBuYW1lOiBzdHJpbmc7XG4gICAgbWVzc2FnZTogc3RyaW5nIHwgKChlcnJvcjogYW55LCBmaWVsZDogRm9ybWx5RmllbGRDb25maWcpID0+IHN0cmluZyB8IE9ic2VydmFibGU8c3RyaW5nPik7XG59XG5leHBvcnQgaW50ZXJmYWNlIE1hbmlwdWxhdG9yT3B0aW9uIHtcbiAgICBjbGFzcz86IHtcbiAgICAgICAgbmV3ICgpOiBhbnk7XG4gICAgfTtcbiAgICBtZXRob2Q/OiBzdHJpbmc7XG59XG5leHBvcnQgaW50ZXJmYWNlIE1hbmlwdWxhdG9yV3JhcHBlciB7XG4gICAgKGY6IEZvcm1seUZpZWxkQ29uZmlnKTogc3RyaW5nO1xufVxuZXhwb3J0IGludGVyZmFjZSBUZW1wbGF0ZU1hbmlwdWxhdG9ycyB7XG4gICAgcHJlV3JhcHBlcj86IE1hbmlwdWxhdG9yV3JhcHBlcltdO1xuICAgIHBvc3RXcmFwcGVyPzogTWFuaXB1bGF0b3JXcmFwcGVyW107XG59XG5leHBvcnQgaW50ZXJmYWNlIENvbmZpZ09wdGlvbiB7XG4gICAgdHlwZXM/OiBUeXBlT3B0aW9uW107XG4gICAgd3JhcHBlcnM/OiBXcmFwcGVyT3B0aW9uW107XG4gICAgdmFsaWRhdG9ycz86IFZhbGlkYXRvck9wdGlvbltdO1xuICAgIGV4dGVuc2lvbnM/OiBFeHRlbnNpb25PcHRpb25bXTtcbiAgICB2YWxpZGF0aW9uTWVzc2FnZXM/OiBWYWxpZGF0aW9uTWVzc2FnZU9wdGlvbltdO1xuICAgIC8qKiBAZGVwcmVjYXRlZCB1c2UgYGV4dGVuc2lvbnNgIGluc3RlYWQgKi9cbiAgICBtYW5pcHVsYXRvcnM/OiBNYW5pcHVsYXRvck9wdGlvbltdO1xuICAgIGV4dHJhcz86IHtcbiAgICAgICAgLyoqIEBkZXByZWNhdGVkIHVzZSBgZXh0ZW5zaW9uc2AgaW5zdGVhZCAqL1xuICAgICAgICBmaWVsZFRyYW5zZm9ybT86IGFueTtcbiAgICAgICAgaW1tdXRhYmxlPzogYm9vbGVhbjtcbiAgICAgICAgc2hvd0Vycm9yPzogKGZpZWxkOiBGaWVsZFR5cGUpID0+IGJvb2xlYW47XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBEZWZpbmVzIHRoZSBvcHRpb24gd2hpY2ggZm9ybWx5IHJlbHkgb24gdG8gY2hlY2sgZmllbGQgZXhwcmVzc2lvbiBwcm9wZXJ0aWVzLlxuICAgICAgICAgKiAtIGBtb2RlbENoYW5nZWA6IHBlcmZvcm0gYSBjaGVjayB3aGVuIHRoZSB2YWx1ZSBvZiB0aGUgZm9ybSBjb250cm9sIGNoYW5nZXMuXG4gICAgICAgICAqIC0gYGNoYW5nZURldGVjdGlvbkNoZWNrYDogdHJpZ2dlcnMgYW4gaW1tZWRpYXRlIGNoZWNrIHdoZW4gYG5nRG9DaGVja2AgaXMgY2FsbGVkLlxuICAgICAgICAqL1xuICAgICAgICBjaGVja0V4cHJlc3Npb25Pbj86ICdtb2RlbENoYW5nZScgfCAnY2hhbmdlRGV0ZWN0aW9uQ2hlY2snO1xuICAgIH07XG59XG4iXX0=