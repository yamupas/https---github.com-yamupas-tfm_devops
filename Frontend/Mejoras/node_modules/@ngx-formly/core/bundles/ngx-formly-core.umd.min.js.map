{"version":3,"sources":["node_modules/tslib/tslib.es6.js","ng://@ngx-formly/core/lib/utils.ts","ng://@ngx-formly/core/lib/services/formly.config.ts","ng://@ngx-formly/core/lib/services/formly.form.builder.ts","ng://@ngx-formly/core/lib/components/formly.form.ts","ng://@ngx-formly/core/lib/components/formly.field.ts","ng://@ngx-formly/core/lib/components/formly.attributes.ts","ng://@ngx-formly/core/lib/templates/field.type.ts","ng://@ngx-formly/core/lib/extensions/field-form/utils.ts","ng://@ngx-formly/core/lib/templates/field-array.type.ts","ng://@ngx-formly/core/lib/templates/field.wrapper.ts","ng://@ngx-formly/core/lib/templates/formly.group.ts","ng://@ngx-formly/core/lib/templates/formly.validation-message.ts","ng://@ngx-formly/core/lib/templates/field-template.type.ts","ng://@ngx-formly/core/lib/extensions/field-expression/utils.ts","ng://@ngx-formly/core/lib/extensions/field-expression/field-expression.ts","ng://@ngx-formly/core/lib/extensions/field-validation/field-validation.ts","ng://@ngx-formly/core/lib/extensions/field-form/field-form.ts","ng://@ngx-formly/core/lib/extensions/core/core.ts","ng://@ngx-formly/core/lib/core.module.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","apply","__rest","e","indexOf","getOwnPropertySymbols","propertyIsEnumerable","__values","o","m","Symbol","iterator","next","value","done","__read","r","ar","push","error","__spread","concat","getKeyPath","field","key","_keyPath","replace","path","split","slice","FORMLY_VALIDATORS","assignFieldValue","paths","parent","formControl","assignModelValue","model","isObject","test","clone","k","pop","reduce","getFieldValue","_b","tslib_1.__values","_c","reverseDeepMerge","dest","args","_i","forEach","src","srcArg","isNullOrUndefined","obj1","obj2","getPrototypeOf","isArray","undefined","isUndefined","isFunction","x","isObservable","changingThisBreaksApplicationSecurity","name","_isAMomentObject","AbstractControl","Date","getTime","map","v","proto","c","keys","newVal","prop","propDesc","getOwnPropertyDescriptor","get","defineProperty","defineHiddenProp","defaultValue","enumerable","writable","configurable","wrapProperty","setFn","_observers","fns","currentValue","firstChange","set","previousValue_1","changeFn","previousValue","splice","reduceFormUpdateValidityCalls","form","action","updateValidity","_updateTreeValidity","bind","updateValidityArgs","FORMLY_CONFIG","InjectionToken","FormlyConfig","types","validators","wrappers","messages","templateManipulators","preWrapper","postWrapper","extras","checkExpressionOn","showError","invalid","touched","options","parentForm","submitted","validation","show","extensions","addConfig","config","_this","type","setType","validator","setValidator","wrapper","setWrapper","manipulators","console","warn","manipulator","setManipulator","validationMessages","addValidatorMessage","message","extension","option","setTypeWrapper","getType","Error","mergeExtendedType","getMergedField","defaultOptions","extendDefaults","extends","optionsTypes","componentRef","resolveFieldTypeRef","instance","component","_a","_resolver","_injector","resolveComponentFactory","getWrapper","getValidator","getValidatorMessage","class","method","extendedType","Injectable","providedIn","FormlyFormBuilder","formlyConfig","componentFactoryResolver","injector","buildForm","fieldGroup","core","_setOptions","_buildForm","_checkField","getExtensions","prePopulate","onPopulate","f","postPopulate","formState","fieldChanges","Subject","_hiddenFieldsForCheck","_markForCheck","_componentRefs","ref","ChangeDetectorRef","markForCheck","ComponentFactoryResolver","Injector","FormlyForm","formlyBuilder","ngZone","immutable","parentFormGroup","modelChange","EventEmitter","_modelChangeValue","modelChangeSubs","modelChange$","modelChangeSub","pipe","switchMap","onStable","asObservable","take","subscribe","runGuarded","checkExpressionChange","emit","_model","_fields","fields","_options","content","nativeElement","nextSibling","ngDoCheck","ngOnChanges","changes","FormGroup","setOptions","updateInitialValue","clearModelSubscriptions","trackModelChanges","ngOnDestroy","unsubscribe","changeModel","resetModel","_initialModel","control","resetForm","reset","emitModelChange","rootKey","control_1","valueChanges","distinctUntilChanged","modelOptions","updateOn","debounce","default","debounceTime","FormControl","patchValue","emitEvent","onlySelf","parsers","parserFn","tslib_1.__spread","join","observers","unshift","sub","Component","selector","template","providers","NgZone","Attribute","FormGroupDirective","decorators","Optional","Input","Output","ViewChild","FormlyField","renderer","resolver","elementRef","hideDeprecation","warnDeprecation","hostObservers","componentRefs","hooksObservers","ngAfterContentInit","triggerHook","ngAfterContentChecked","ngAfterViewInit","ngAfterViewChecked","ngOnInit","resetRefs","renderField","containerRef","clear","wps_1","ref_1","createComponent","attachComponentRef","viewRef","detach","destroyed","insert","changeDetectorRef","detectChanges","hooks","sub_1","lifecycle","renderHostBinding","setStyle","setAttribute","filter","Renderer2","ElementRef","read","ViewContainerRef","static","FormlyAttributes","_document","uiAttributesCache","uiAttributes","uiEvents","listeners","events","document","templateOptions","listener","eventName","callback","to","onChange","listen","attributes","attr","removeAttribute","detachElementRef","attachElementRef","fieldAttrElements","id","toggleFocus","element","focus","isFocused","activeElement","some","contains","blur","onFocus","$event","onBlur","change","markAsDirty","index","Directive","host","(focus)","(blur)","Inject","DOCUMENT","FieldType","Field","_super","tslib_1.__extends","unregisterControl","opts","FormArray","key_1","controls","findIndex","updateControl","removeAt","key_2","removeControl","setParent","disabled","registerControl","disable","enable","registerOnDisabledChange","_hide","setControl","status","updateValueAndValidity","_forEachChild","cb","FieldArrayType","builder","fieldArray","add","initialModel","remove","FieldWrapper","FormlyGroup","[class]","FormlyValidationMessage","errorMessage$","statusChanges","startWith","errorMessage","of","fieldForm","errors","errorPath","asyncValidators","changeDetection","ChangeDetectionStrategy","OnPush","FormlyTemplateType","sanitizer","innerHtml","safeHtml","bypassSecurityTrustHtml","DomSanitizer","evalExpression","expression","thisArg","argVal","Function","FieldExpressionExtension","ignoreCache","checkField","_expressionProperties","expressionProperties","expressionProperty","this_1","_evalExpression","Observable","subscribe_1","setExprValue","subscription_1","onInit_1","onInit","onDestroy_1","onDestroy","hideExpression","hide","parent_1","parentExpression","evalStringExpression","argNames","sort","toggleFormControl","checkFieldExpressionChange","checkFieldVisibilityChange","expressionValue","JSON","stringify","hideExpressionResult","hidden","setDisabledState","every","target","lastIndex","FieldValidationExtension","initFieldValidation","getPredefinedFieldValidation","validatorName","wrapNgValidatorFn","VALIDATORS","opt","Validators","compose","required","pattern","minLength","maxLength","min","max","validatorOption","isPromise","obj","then","result","handleResult","ctrl","childCtrl_1","_d","setErrors","childErrors","FieldFormExtension","addFormControl","setValidators","findControl","controlOptions","componentType","c_1","enabled","asyncValidator","mergeValidators","setAsyncValidators","composeAsync","updateControlValidity","CoreExtension","formId","getFieldComponentInstance","fieldTransforms","fieldTransform","initFieldOptions","root","getFieldId","label","placeholder","initFieldWrappers","fieldTemplateManipulators","el","a","defaultFormlyConfig","FormlyModule","configService","configs","forRoot","ngModule","provide","multi","useFactory","deps","useValue","ANALYZE_FOR_ENTRY_COMPONENTS","forChild","NgModule","declarations","entryComponents","exports","imports","CommonModule","getFieldInitialValue","paths_1","paths_1_1"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { FormlyFieldConfig } from './core';\nimport { isObservable } from 'rxjs';\nimport { AbstractControl } from '@angular/forms';\nimport { FormlyFieldConfigCache } from './components/formly.field.config';\n\nexport function getFieldId(formId: string, field: FormlyFieldConfig, index: string|number) {\n  if (field.id) return field.id;\n  let type = field.type;\n  if (!type && field.template) type = 'template';\n  return [formId, type, field.key, index].join('_');\n}\n\nexport function getKeyPath(field: FormlyFieldConfigCache): string[] {\n  if (!field.key) {\n    return [];\n  }\n\n  /* We store the keyPath in the field for performance reasons. This function will be called frequently. */\n  if (!field._keyPath || field._keyPath.key !== field.key) {\n    const key = field.key.indexOf('[') === -1\n      ? field.key\n      : field.key.replace(/\\[(\\w+)\\]/g, '.$1');\n\n    field._keyPath = { key: field.key, path: key.indexOf('.') !== -1 ? key.split('.') : [key] };\n  }\n\n  return field._keyPath.path.slice(0);\n}\n\nexport const FORMLY_VALIDATORS = ['required', 'pattern', 'minLength', 'maxLength', 'min', 'max'];\n\nexport function assignFieldValue(field: FormlyFieldConfigCache, value: any) {\n  let paths = getKeyPath(field);\n  while (field.parent) {\n    field = field.parent;\n    paths = [...getKeyPath(field), ...paths];\n  }\n\n  if (value == null && field['autoClear'] && !field.formControl.parent) {\n    const k = paths.pop();\n    const m = paths.reduce((model, path) => model[path] || {}, field.parent.model);\n    delete m[k];\n    return;\n  }\n\n  assignModelValue(field.model, paths, value);\n}\n\nexport function assignModelValue(model: any, paths: string[], value: any) {\n  for (let i = 0; i < (paths.length - 1); i++) {\n    const path = paths[i];\n    if (!model[path] || !isObject(model[path])) {\n      model[path] = /^\\d+$/.test(paths[i + 1]) ? [] : {};\n    }\n\n    model = model[path];\n  }\n\n  model[paths[paths.length - 1]] = clone(value);\n}\n\nexport function getFieldInitialValue(field: FormlyFieldConfig) {\n  let value = field.options['_initialModel'];\n  let paths = getKeyPath(field);\n  while (field.parent) {\n    field = field.parent;\n    paths = [...getKeyPath(field), ...paths];\n  }\n\n  for (const path of paths) {\n    if (!value) {\n      return undefined;\n    }\n    value = value[path];\n  }\n\n  return value;\n}\n\nexport function getFieldValue(field: FormlyFieldConfig): any {\n  let model = field.parent.model;\n  for (const path of getKeyPath(field)) {\n    if (!model) {\n      return model;\n    }\n    model = model[path];\n  }\n\n  return model;\n}\n\nexport function reverseDeepMerge(dest: any, ...args: any[]) {\n  args.forEach(src => {\n    for (let srcArg in src) {\n      if (isNullOrUndefined(dest[srcArg]) || isBlankString(dest[srcArg])) {\n        dest[srcArg] = clone(src[srcArg]);\n      } else if (objAndSameType(dest[srcArg], src[srcArg])) {\n        reverseDeepMerge(dest[srcArg], src[srcArg]);\n      }\n    }\n  });\n  return dest;\n}\n\nexport function isNullOrUndefined(value: any) {\n  return value === undefined || value === null;\n}\n\nexport function isUndefined(value: any) {\n  return value === undefined;\n}\n\nexport function isBlankString(value: any) {\n  return value === '';\n}\n\nexport function isFunction(value: any) {\n  return typeof(value) === 'function';\n}\n\nexport function objAndSameType(obj1: any, obj2: any) {\n  return isObject(obj1) && isObject(obj2)\n    && Object.getPrototypeOf(obj1) === Object.getPrototypeOf(obj2)\n    && !(Array.isArray(obj1) || Array.isArray(obj2));\n}\n\nexport function isObject(x: any) {\n  return x != null && typeof x === 'object';\n}\n\nexport function isPromise(obj: any): obj is Promise<any> {\n  return !!obj && typeof obj.then === 'function';\n}\n\nexport function clone(value: any): any {\n  if (\n    !isObject(value)\n    || isObservable(value)\n    || /* instanceof SafeHtmlImpl */ value.changingThisBreaksApplicationSecurity\n    || ['RegExp', 'FileList', 'File', 'Blob'].indexOf(value.constructor.name) !== -1\n  ) {\n    return value;\n  }\n\n  // https://github.com/moment/moment/blob/master/moment.js#L252\n  if (value._isAMomentObject && isFunction(value.clone)) {\n    return value.clone();\n  }\n\n  if (value instanceof AbstractControl) {\n    return null;\n  }\n\n  if (value instanceof Date) {\n    return new Date(value.getTime());\n  }\n\n  if (Array.isArray(value)) {\n    return value.slice(0).map(v => clone(v));\n  }\n\n  // best way to clone a js object maybe\n  // https://stackoverflow.com/questions/41474986/how-to-clone-a-javascript-es6-class-instance\n  const proto = Object.getPrototypeOf(value);\n  let c = Object.create(proto);\n  c = Object.setPrototypeOf(c, proto);\n  // need to make a deep copy so we dont use Object.assign\n  // also Object.assign wont copy property descriptor exactly\n  return Object.keys(value).reduce((newVal, prop) => {\n    const propDesc = Object.getOwnPropertyDescriptor(value, prop);\n    if (propDesc.get) {\n      Object.defineProperty(newVal, prop, propDesc);\n    } else {\n      newVal[prop] = clone(value[prop]);\n    }\n\n    return newVal;\n  }, c);\n}\n\nexport function defineHiddenProp(field: any, prop: string, defaultValue: any) {\n  Object.defineProperty(field, prop, { enumerable: false, writable: true, configurable: true });\n  field[prop] = defaultValue;\n}\n\nexport function wrapProperty<T = any>(\n  o: any,\n  prop: string,\n  setFn: (change: {currentValue: T, previousValue?: T, firstChange: boolean}) => void,\n) {\n  if (!o._observers) {\n    defineHiddenProp(o, '_observers', {});\n  }\n\n  if (!o._observers[prop]) {\n    o._observers[prop] = [];\n  }\n\n  let fns: typeof setFn[] = o._observers[prop];\n  if (fns.indexOf(setFn) === -1) {\n    fns.push(setFn);\n    setFn({ currentValue: o[prop], firstChange: true });\n    if (fns.length === 1) {\n      defineHiddenProp(o, `___$${prop}`, o[prop]);\n      Object.defineProperty(o, prop, {\n        configurable: true,\n        get: () => o[`___$${prop}`],\n        set: currentValue => {\n          if (currentValue !== o[`___$${prop}`]) {\n            const previousValue = o[`___$${prop}`];\n            o[`___$${prop}`] = currentValue;\n            fns.forEach(changeFn => changeFn({ previousValue, currentValue, firstChange: false }));\n          }\n        },\n      });\n    }\n  }\n\n  return () => fns.splice(fns.indexOf(setFn), 1);\n}\n\nexport function reduceFormUpdateValidityCalls(form: any, action: Function) {\n  const updateValidity = form._updateTreeValidity.bind(form);\n\n  let updateValidityArgs = null;\n  form._updateTreeValidity = (...args) => updateValidityArgs = args;\n  action();\n\n  updateValidityArgs && updateValidity(updateValidityArgs);\n  form._updateTreeValidity = updateValidity;\n}\n","import { Injectable, InjectionToken, ComponentRef } from '@angular/core';\nimport { ValidationErrors, AbstractControl } from '@angular/forms';\nimport { FieldType } from './../templates/field.type';\nimport { reverseDeepMerge, defineHiddenProp } from './../utils';\nimport { FormlyFieldConfig, FormlyFieldConfigCache } from '../components/formly.field.config';\nimport { Observable } from 'rxjs';\n\nexport const FORMLY_CONFIG = new InjectionToken<FormlyConfig>('FORMLY_CONFIG');\n\n/** @experimental */\nexport interface FormlyExtension {\n  prePopulate?(field: FormlyFieldConfig): void;\n  onPopulate?(field: FormlyFieldConfig): void;\n  postPopulate?(field: FormlyFieldConfig): void;\n}\n\n/**\n * Maintains list of formly field directive types. This can be used to register new field templates.\n */\n@Injectable({ providedIn: 'root' })\nexport class FormlyConfig {\n  types: {[name: string]: TypeOption} = {};\n  validators: { [name: string]: ValidatorOption } = {};\n  wrappers: { [name: string]: WrapperOption } = {};\n  messages: { [name: string]: ValidationMessageOption['message'] } = {};\n  templateManipulators: {\n    preWrapper: ManipulatorWrapper[];\n    postWrapper: ManipulatorWrapper[];\n  } = {\n    preWrapper: [],\n    postWrapper: [],\n  };\n  extras: ConfigOption['extras'] = {\n    checkExpressionOn: 'changeDetectionCheck',\n    showError: function(field: FieldType) {\n      return field.formControl && field.formControl.invalid && (field.formControl.touched || (field.options.parentForm && field.options.parentForm.submitted) || !!(field.field.validation && field.field.validation.show));\n    },\n  };\n  extensions: { [name: string]: FormlyExtension } = {};\n\n  addConfig(config: ConfigOption) {\n    if (config.types) {\n      config.types.forEach(type => this.setType(type));\n    }\n    if (config.validators) {\n      config.validators.forEach(validator => this.setValidator(validator));\n    }\n    if (config.wrappers) {\n      config.wrappers.forEach(wrapper => this.setWrapper(wrapper));\n    }\n    if (config.manipulators) {\n      console.warn(`NgxFormly: passing 'manipulators' config is deprecated, use custom extension instead.`);\n      config.manipulators.forEach(manipulator => this.setManipulator(manipulator));\n    }\n    if (config.validationMessages) {\n      config.validationMessages.forEach(validation => this.addValidatorMessage(validation.name, validation.message));\n    }\n    if (config.extensions) {\n      config.extensions.forEach(c => this.extensions[c.name] = c.extension);\n    }\n    if (config.extras) {\n      this.extras = { ...this.extras, ...config.extras };\n    }\n  }\n\n  setType(options: TypeOption | TypeOption[]) {\n    if (Array.isArray(options)) {\n      options.forEach((option) => this.setType(option));\n    } else {\n      if (!this.types[options.name]) {\n        this.types[options.name] = <TypeOption>{ name: options.name };\n      }\n\n      ['component', 'extends', 'defaultOptions'].forEach(prop => {\n        if (options.hasOwnProperty(prop)) {\n          this.types[options.name][prop] = options[prop];\n        }\n      });\n\n      if (options.wrappers) {\n        options.wrappers.forEach((wrapper) => this.setTypeWrapper(options.name, wrapper));\n      }\n    }\n  }\n\n  getType(name: string): TypeOption {\n    if (!this.types[name]) {\n      throw new Error(`[Formly Error] The type \"${name}\" could not be found. Please make sure that is registered through the FormlyModule declaration.`);\n    }\n\n    this.mergeExtendedType(name);\n\n    return this.types[name];\n  }\n\n  getMergedField(field: FormlyFieldConfig = {}): any {\n    const type = this.getType(field.type);\n    if (type.defaultOptions) {\n      reverseDeepMerge(field, type.defaultOptions);\n    }\n\n    const extendDefaults = type.extends && this.getType(type.extends).defaultOptions;\n    if (extendDefaults) {\n      reverseDeepMerge(field, extendDefaults);\n    }\n\n    if (field && field.optionsTypes) {\n      field.optionsTypes.forEach(option => {\n        const defaultOptions = this.getType(option).defaultOptions;\n        if (defaultOptions) {\n          reverseDeepMerge(field, defaultOptions);\n        }\n      });\n    }\n\n    const componentRef = this.resolveFieldTypeRef(field);\n    if (componentRef && componentRef.instance && componentRef.instance.defaultOptions) {\n      reverseDeepMerge(field, componentRef.instance.defaultOptions);\n    }\n\n    if (!field.wrappers && type.wrappers) {\n      field.wrappers = [...type.wrappers];\n    }\n  }\n\n  /** @internal */\n  resolveFieldTypeRef(field: FormlyFieldConfigCache = {}): ComponentRef<FieldType> {\n    if (!field.type) {\n      return null;\n    }\n\n    const type = this.getType(field.type);\n    if (!type.component || type['_componentRef']) {\n      return type['_componentRef'];\n    }\n\n    const { _resolver, _injector } = field.parent.options;\n    defineHiddenProp(\n      type,\n      '_componentRef',\n      _resolver.resolveComponentFactory<FieldType>(type.component).create(_injector),\n    );\n\n    return type['_componentRef'];\n  }\n\n  setWrapper(options: WrapperOption) {\n    this.wrappers[options.name] = options;\n    if (options.types) {\n      options.types.forEach((type) => {\n        this.setTypeWrapper(type, options.name);\n      });\n    }\n  }\n\n  getWrapper(name: string): WrapperOption {\n    if (!this.wrappers[name]) {\n      throw new Error(`[Formly Error] The wrapper \"${name}\" could not be found. Please make sure that is registered through the FormlyModule declaration.`);\n    }\n\n    return this.wrappers[name];\n  }\n\n  setTypeWrapper(type: string, name: string) {\n    if (!this.types[type]) {\n      this.types[type] = <TypeOption>{};\n    }\n    if (!this.types[type].wrappers) {\n      this.types[type].wrappers = [];\n    }\n    if (this.types[type].wrappers.indexOf(name) === -1) {\n      this.types[type].wrappers.push(name);\n    }\n  }\n\n  setValidator(options: ValidatorOption) {\n    this.validators[options.name] = options;\n  }\n\n  getValidator(name: string): ValidatorOption {\n    if (!this.validators[name]) {\n      throw new Error(`[Formly Error] The validator \"${name}\" could not be found. Please make sure that is registered through the FormlyModule declaration.`);\n    }\n\n    return this.validators[name];\n  }\n\n  addValidatorMessage(name: string, message: ValidationMessageOption['message']) {\n    this.messages[name] = message;\n  }\n\n  getValidatorMessage(name: string) {\n    return this.messages[name];\n  }\n\n  setManipulator(manipulator: ManipulatorOption) {\n    new manipulator.class()[manipulator.method](this);\n  }\n\n  private mergeExtendedType(name: string) {\n    if (!this.types[name].extends) {\n      return;\n    }\n\n    const extendedType = this.getType(this.types[name].extends);\n    if (!this.types[name].component) {\n      this.types[name].component = extendedType.component;\n    }\n\n    if (!this.types[name].wrappers) {\n      this.types[name].wrappers = extendedType.wrappers;\n    }\n  }\n}\nexport interface TypeOption {\n  name: string;\n  component?: any;\n  wrappers?: string[];\n  extends?: string;\n  defaultOptions?: FormlyFieldConfig;\n}\n\nexport interface WrapperOption {\n  name: string;\n  component: any;\n  types?: string[];\n}\n\nexport interface FieldValidatorFn {\n  (c: AbstractControl, field: FormlyFieldConfig, options?: { [id: string]: any; }): ValidationErrors | null;\n}\n\nexport interface ValidatorOption {\n  name: string;\n  validation: FieldValidatorFn;\n  options?: { [id: string]: any };\n}\n\nexport interface ExtensionOption {\n  name: string;\n  extension: FormlyExtension;\n}\n\nexport interface ValidationMessageOption {\n  name: string;\n  message: string | ((error: any, field: FormlyFieldConfig) => string | Observable<string>);\n}\n\nexport interface ManipulatorOption {\n  class?: { new (): any };\n  method?: string;\n}\n\nexport interface ManipulatorWrapper {\n  (f: FormlyFieldConfig): string;\n}\n\nexport interface TemplateManipulators {\n  preWrapper?: ManipulatorWrapper[];\n  postWrapper?: ManipulatorWrapper[];\n}\n\nexport interface ConfigOption {\n  types?: TypeOption[];\n  wrappers?: WrapperOption[];\n  validators?: ValidatorOption[];\n  extensions?: ExtensionOption[];\n  validationMessages?: ValidationMessageOption[];\n\n  /** @deprecated use `extensions` instead */\n  manipulators?: ManipulatorOption[];\n  extras?: {\n    /** @deprecated use `extensions` instead */\n    fieldTransform?: any,\n    immutable?: boolean,\n    showError?: (field: FieldType) => boolean;\n\n    /**\n     * Defines the option which formly rely on to check field expression properties.\n     * - `modelChange`: perform a check when the value of the form control changes.\n     * - `changeDetectionCheck`: triggers an immediate check when `ngDoCheck` is called.\n    */\n    checkExpressionOn?: 'modelChange' | 'changeDetectionCheck',\n  };\n}\n","import { Injectable, ComponentFactoryResolver, Injector, ChangeDetectorRef } from '@angular/core';\nimport { FormGroup, FormArray } from '@angular/forms';\nimport { FormlyConfig } from './formly.config';\nimport { FormlyFieldConfig, FormlyFormOptions, FormlyFieldConfigCache, FormlyValueChangeEvent, FormlyFormOptionsCache } from '../components/formly.field.config';\nimport { Subject } from 'rxjs';\nimport { defineHiddenProp, reduceFormUpdateValidityCalls } from '../utils';\n\n@Injectable({ providedIn: 'root' })\nexport class FormlyFormBuilder {\n  constructor(\n    private formlyConfig: FormlyConfig,\n    private componentFactoryResolver: ComponentFactoryResolver,\n    private injector: Injector,\n  ) {}\n\n  buildForm(formControl: FormGroup | FormArray, fieldGroup: FormlyFieldConfig[] = [], model: any, options: FormlyFormOptions) {\n    if (!this.formlyConfig.extensions.core) {\n      throw new Error('NgxFormly: missing `forRoot()` call. use `forRoot()` when registering the `FormlyModule`.');\n    }\n\n    const field = { fieldGroup, model, formControl, options: this._setOptions(options) };\n    reduceFormUpdateValidityCalls(formControl, () => this._buildForm(field));\n    field.options._checkField(field, true);\n  }\n\n  private _buildForm(field: FormlyFieldConfigCache) {\n    this.getExtensions().forEach(extension => extension.prePopulate && extension.prePopulate(field));\n    this.getExtensions().forEach(extension => extension.onPopulate && extension.onPopulate(field));\n\n    if (field.fieldGroup) {\n      field.fieldGroup.forEach((f) => this._buildForm(f));\n    }\n\n    this.getExtensions().forEach(extension => extension.postPopulate && extension.postPopulate(field));\n  }\n\n  private getExtensions() {\n    return Object.keys(this.formlyConfig.extensions).map(name => this.formlyConfig.extensions[name]);\n  }\n\n  private _setOptions(options: FormlyFormOptionsCache) {\n    options = options || {};\n    options.formState = options.formState || {};\n\n    if (!options.showError) {\n      options.showError = this.formlyConfig.extras.showError;\n    }\n\n    if (!options.fieldChanges) {\n      defineHiddenProp(options, 'fieldChanges', new Subject<FormlyValueChangeEvent>());\n    }\n\n    if (!options._resolver) {\n      defineHiddenProp(options, '_resolver', this.componentFactoryResolver);\n    }\n\n    if (!options._injector) {\n      defineHiddenProp(options, '_injector', this.injector);\n    }\n\n    if (!options._hiddenFieldsForCheck) {\n      options._hiddenFieldsForCheck = [];\n    }\n\n    if (!options._markForCheck) {\n      options._markForCheck = (field) => {\n        if (field._componentRefs) {\n          field._componentRefs.forEach(ref => {\n            // NOTE: we cannot use ref.changeDetectorRef, see https://github.com/ngx-formly/ngx-formly/issues/2191\n            const changeDetectorRef = ref.injector.get(ChangeDetectorRef);\n            changeDetectorRef.markForCheck();\n          });\n        }\n\n        if (field.fieldGroup) {\n          field.fieldGroup.forEach(f => options._markForCheck(f));\n        }\n      };\n    }\n\n    return options;\n  }\n}\n","import { Component, DoCheck, OnChanges, Input, SimpleChanges, Optional, EventEmitter, Output, OnDestroy, Attribute, ViewChild, ElementRef, NgZone } from '@angular/core';\nimport { FormGroup, FormArray, FormGroupDirective, FormControl } from '@angular/forms';\nimport { FormlyFieldConfig, FormlyFormOptions, FormlyFormOptionsCache } from './formly.field.config';\nimport { FormlyFormBuilder } from '../services/formly.form.builder';\nimport { FormlyConfig } from '../services/formly.config';\nimport { assignFieldValue, isNullOrUndefined, wrapProperty, clone, defineHiddenProp, getKeyPath } from '../utils';\nimport { Subscription, Subject } from 'rxjs';\nimport { debounceTime, switchMap, distinctUntilChanged, take } from 'rxjs/operators';\n\n@Component({\n  selector: 'formly-form',\n  template: `\n    <formly-field *ngFor=\"let field of fields\"\n      hide-deprecation\n      [form]=\"field.form\"\n      [options]=\"field.options\"\n      [model]=\"field.model\"\n      [field]=\"field\">\n    </formly-field>\n    <ng-container #content>\n      <ng-content></ng-content>\n    </ng-container>\n  `,\n  providers: [FormlyFormBuilder],\n})\nexport class FormlyForm implements DoCheck, OnChanges, OnDestroy {\n  @Input() form: FormGroup | FormArray;\n\n  @Input()\n  set model(model: any) { this._model = this.immutable ? clone(model) : model; }\n  get model() { return this._model || {}; }\n\n  @Input()\n  set fields(fields: FormlyFieldConfig[]) { this._fields = this.immutable ? clone(fields) : fields; }\n  get fields() { return this._fields || []; }\n\n  @Input()\n  set options(options: FormlyFormOptions) { this._options = this.immutable ? clone(options) : options; }\n  get options() { return this._options; }\n\n  @Output() modelChange = new EventEmitter<any>();\n  @ViewChild('content') set content(content: ElementRef<HTMLElement>) {\n    if (content && content.nativeElement.nextSibling) {\n      console.warn(`NgxFormly: content projection for 'formly-form' component is deprecated since v5.5, you should avoid passing content inside the 'formly-form' tag.`);\n    }\n  }\n\n  private immutable = false;\n  private _model: any;\n  private _modelChangeValue: any = {};\n  private _fields: FormlyFieldConfig[];\n  private _options: FormlyFormOptions;\n  private modelChangeSubs: Subscription[] = [];\n  private modelChange$ = new Subject<void>();\n  private modelChangeSub = this.modelChange$.pipe(\n    switchMap(() => this.ngZone.onStable.asObservable().pipe(take(1))),\n  ).subscribe(() => this.ngZone.runGuarded(() => {\n    // runGuarded is used to keep the expression changes in-sync\n    // https://github.com/ngx-formly/ngx-formly/issues/2095\n    this.checkExpressionChange();\n    this.modelChange.emit(this._modelChangeValue = clone(this.model));\n  }));\n\n  constructor(\n    private formlyBuilder: FormlyFormBuilder,\n    private formlyConfig: FormlyConfig,\n    private ngZone: NgZone,\n    // tslint:disable-next-line\n    @Attribute('immutable') immutable,\n    @Optional() private parentFormGroup: FormGroupDirective,\n  ) {\n    if (immutable !== null) {\n      console.warn(`NgxFormly: passing 'immutable' attribute to 'formly-form' component is deprecated since v5.5, enable immutable mode through NgModule declaration instead.`);\n    }\n\n    this.immutable = (immutable !== null) || !!formlyConfig.extras.immutable;\n  }\n\n  ngDoCheck() {\n    if (this.formlyConfig.extras.checkExpressionOn === 'changeDetectionCheck') {\n      this.checkExpressionChange();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // https://github.com/ngx-formly/ngx-formly/issues/2294\n    if (changes.model && this.field) {\n      this.field.model = this.model;\n    }\n\n    if (changes.fields || changes.form || (changes.model && this._modelChangeValue !== changes.model.currentValue)) {\n      this.form = this.form || (new FormGroup({}));\n      this.setOptions();\n      this.options.updateInitialValue();\n      this.clearModelSubscriptions();\n      this.formlyBuilder.buildForm(this.form, this.fields, this.model, this.options);\n      this.trackModelChanges(this.fields);\n    }\n  }\n\n  ngOnDestroy() {\n    this.modelChangeSub.unsubscribe();\n    this.clearModelSubscriptions();\n  }\n\n  changeModel({ key, value, field }: { key: string, value: any, field: FormlyFieldConfig }) {\n    assignFieldValue(field, value);\n    this.modelChange$.next();\n  }\n\n  setOptions() {\n    if (!this.options) {\n      this.options = {};\n    }\n\n    if (!this.options.resetModel) {\n      this.options.resetModel = (model ?: any) => {\n        model = clone(isNullOrUndefined(model) ? (<FormlyFormOptionsCache> this.options)._initialModel : model);\n        if (this.model) {\n          Object.keys(this.model).forEach(k => delete this.model[k]);\n          Object.assign(this.model, model || {});\n        }\n\n        (<FormlyFormOptionsCache> this.options)._buildForm();\n\n        // we should call `NgForm::resetForm` to ensure changing `submitted` state after resetting form\n        // but only when the current component is a root one.\n        if (this.options.parentForm && this.options.parentForm.control === this.form) {\n          this.options.parentForm.resetForm(model);\n        } else {\n          this.form.reset(model);\n        }\n      };\n    }\n\n    if (!this.options.parentForm && this.parentFormGroup) {\n      defineHiddenProp(this.options, 'parentForm', this.parentFormGroup);\n      wrapProperty(this.options.parentForm, 'submitted', ({ firstChange }) => {\n        if (!firstChange) {\n          this.checkExpressionChange();\n          (<FormlyFormOptionsCache> this.options)._markForCheck({\n            fieldGroup: this.fields,\n            model: this.model,\n            formControl: this.form,\n            options: this.options,\n          });\n        }\n      });\n    }\n\n    if (!this.options.updateInitialValue) {\n      this.options.updateInitialValue = () => (<FormlyFormOptionsCache> this.options)._initialModel = clone(this.model);\n    }\n\n    if (!(<FormlyFormOptionsCache> this.options)._buildForm) {\n      (<FormlyFormOptionsCache> this.options)._buildForm = (emitModelChange = false) => {\n        this.clearModelSubscriptions();\n        this.formlyBuilder.buildForm(this.form, this.fields, this.model, this.options);\n        this.trackModelChanges(this.fields);\n\n        if (emitModelChange) {\n          this.modelChange.emit(this._modelChangeValue = clone(this.model));\n        }\n      };\n    }\n  }\n\n  private checkExpressionChange() {\n    if (this.options && (<FormlyFormOptionsCache> this.options)._checkField) {\n      (<FormlyFormOptionsCache> this.options)._checkField({\n        fieldGroup: this.fields,\n        model: this.model,\n        formControl: this.form,\n        options: this.options,\n      });\n    }\n  }\n\n  private trackModelChanges(fields: FormlyFieldConfig[], rootKey: string[] = []) {\n    fields.forEach(field => {\n      if (field.key && !field.fieldGroup) {\n        const control = field.formControl;\n        let valueChanges = control.valueChanges.pipe(distinctUntilChanged());\n\n        const { updateOn, debounce } = field.modelOptions;\n        if ((!updateOn || updateOn === 'change') && debounce && debounce.default > 0) {\n          valueChanges = control.valueChanges.pipe(debounceTime(debounce.default));\n        }\n\n        this.modelChangeSubs.push(valueChanges.subscribe((value) => {\n          // workaround for https://github.com/angular/angular/issues/13792\n          if (control instanceof FormControl && control['_fields'] && control['_fields'].length > 1) {\n            control.patchValue(value, { emitEvent: false, onlySelf: true });\n          }\n\n          if (field.parsers && field.parsers.length > 0) {\n            field.parsers.forEach(parserFn => value = parserFn(value));\n          }\n\n          this.changeModel({ key: [...rootKey, ...getKeyPath(field)].join('.'), value, field });\n        }));\n\n        // workaround for v5 (https://github.com/ngx-formly/ngx-formly/issues/2061)\n        const observers = control.valueChanges['observers'];\n        if (observers && observers.length > 1) {\n          observers.unshift(observers.pop());\n        }\n      }\n\n      if (field.fieldGroup && field.fieldGroup.length > 0) {\n        this.trackModelChanges(field.fieldGroup, field.key ? [...rootKey, ...getKeyPath(field)] : rootKey);\n      }\n    });\n  }\n\n  private clearModelSubscriptions() {\n    this.modelChangeSubs.forEach(sub => sub.unsubscribe());\n    this.modelChangeSubs = [];\n  }\n\n  private get field(): any {\n    return this.fields && this.fields[0] && this.fields[0].parent;\n  }\n}\n","import {\n  Component, EventEmitter, Input, Output,\n  ViewContainerRef, ViewChild, ComponentRef, SimpleChanges, Attribute, ComponentFactoryResolver,\n  OnInit, OnChanges, OnDestroy, DoCheck, AfterContentInit, AfterContentChecked, AfterViewInit, AfterViewChecked, Renderer2, ElementRef,\n} from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { FormlyConfig } from '../services/formly.config';\nimport { FormlyFieldConfig, FormlyFormOptions, FormlyFieldConfigCache } from './formly.field.config';\nimport { defineHiddenProp, wrapProperty } from '../utils';\nimport { FieldWrapper } from '../templates/field.wrapper';\nimport { FieldType } from '../templates/field.type';\nimport { isObservable } from 'rxjs';\n\n@Component({\n  selector: 'formly-field',\n  template: `<ng-template #container></ng-template>`,\n})\nexport class FormlyField implements OnInit, OnChanges, DoCheck, AfterContentInit, AfterContentChecked, AfterViewInit, AfterViewChecked, OnDestroy {\n  @Input() field: FormlyFieldConfig;\n\n  warnDeprecation = false;\n\n  @Input() set model(m: any) {\n    this.warnDeprecation && console.warn(`NgxFormly: passing 'model' input to '${this.constructor.name}' component is not required anymore, you may remove it!`);\n  }\n\n  @Input() set form(form: FormGroup) {\n    this.warnDeprecation && console.warn(`NgxFormly: passing 'form' input to '${this.constructor.name}' component is not required anymore, you may remove it!`);\n  }\n\n  @Input() set options(options: FormlyFormOptions) {\n    this.warnDeprecation && console.warn(`NgxFormly: passing 'options' input to '${this.constructor.name}' component is not required anymore, you may remove it!`);\n  }\n\n  @Output() modelChange: EventEmitter<any> = new EventEmitter();\n  // TODO: remove `any`, once dropping angular `V7` support.\n  @ViewChild('container', <any> {read: ViewContainerRef, static: true }) containerRef: ViewContainerRef;\n  private hostObservers: Function[] = [];\n  private componentRefs: any[] = [];\n  private hooksObservers: Function[] = [];\n\n  constructor(\n    private formlyConfig: FormlyConfig,\n    private renderer: Renderer2,\n    private resolver: ComponentFactoryResolver,\n    private elementRef: ElementRef,\n    // tslint:disable-next-line\n    @Attribute('hide-deprecation') hideDeprecation,\n  ) {\n    this.warnDeprecation = hideDeprecation === null;\n  }\n\n  ngAfterContentInit() {\n    this.triggerHook('afterContentInit');\n  }\n\n  ngAfterContentChecked() {\n    this.triggerHook('afterContentChecked');\n  }\n\n  ngAfterViewInit() {\n    this.triggerHook('afterViewInit');\n  }\n\n  ngAfterViewChecked() {\n    this.triggerHook('afterViewChecked');\n  }\n\n  ngDoCheck() {\n    this.triggerHook('doCheck');\n  }\n\n  ngOnInit() {\n    this.triggerHook('onInit');\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this.triggerHook('onChanges', changes);\n  }\n\n  ngOnDestroy() {\n    this.resetRefs(this.field);\n    this.hostObservers.forEach(unsubscribe => unsubscribe());\n    this.hooksObservers.forEach(unsubscribe => unsubscribe());\n    this.triggerHook('onDestroy');\n  }\n\n  private renderField(containerRef: ViewContainerRef, f: FormlyFieldConfigCache, wrappers: string[]) {\n    if (this.containerRef === containerRef) {\n      this.resetRefs(this.field);\n      this.containerRef.clear();\n    }\n\n    if (wrappers && wrappers.length > 0) {\n      const [wrapper, ...wps] = wrappers;\n      const { component } = this.formlyConfig.getWrapper(wrapper);\n\n      const ref = containerRef.createComponent<FieldWrapper>(this.resolver.resolveComponentFactory(component));\n      this.attachComponentRef(ref, f);\n      wrapProperty<ViewContainerRef>(ref.instance, 'fieldComponent', ({ firstChange, previousValue, currentValue }) => {\n        if (currentValue) {\n          const viewRef = previousValue ? previousValue.detach() : null;\n          if (viewRef && !viewRef.destroyed) {\n            currentValue.insert(viewRef);\n          } else {\n            this.renderField(currentValue, f, wps);\n          }\n\n          !firstChange && ref.changeDetectorRef.detectChanges();\n        }\n      });\n    } else if (f && f.type) {\n      const { component } = this.formlyConfig.getType(f.type);\n      const ref = containerRef.createComponent<FieldWrapper>(this.resolver.resolveComponentFactory(component));\n      this.attachComponentRef(ref, f);\n    }\n  }\n\n  private triggerHook(name: string, changes?: SimpleChanges) {\n    if (this.field && this.field.hooks && this.field.hooks[name]) {\n      if (!changes || changes.field) {\n        const r = this.field.hooks[name](this.field);\n        if (isObservable(r) && ['onInit', 'afterContentInit', 'afterViewInit'].indexOf(name) !== -1) {\n          const sub = r.subscribe();\n          this.hooksObservers.push(() => sub.unsubscribe());\n        }\n      }\n    }\n\n    if (this.field && this.field.lifecycle && this.field.lifecycle[name]) {\n      this.field.lifecycle[name](\n        this.field.form,\n        this.field,\n        this.field.model,\n        this.field.options,\n      );\n    }\n\n    if (name === 'onChanges' && changes.field) {\n      this.renderHostBinding();\n      this.resetRefs(changes.field.previousValue);\n      this.renderField(this.containerRef, this.field, this.field ? this.field.wrappers : []);\n    }\n  }\n\n  private attachComponentRef<T extends FieldType>(ref: ComponentRef<T>, field: FormlyFieldConfigCache) {\n    this.componentRefs.push(ref);\n    field._componentRefs.push(ref);\n    Object.assign(ref.instance, { field });\n  }\n\n  private renderHostBinding() {\n    if (!this.field) {\n      return;\n    }\n\n    this.hostObservers.forEach(unsubscribe => unsubscribe());\n    this.hostObservers = [\n      wrapProperty(this.field, 'hide', ({ firstChange, currentValue }) => {\n        if (!firstChange || (firstChange && currentValue)) {\n          this.renderer.setStyle(this.elementRef.nativeElement, 'display', currentValue ? 'none' : '');\n        }\n      }),\n      wrapProperty(this.field, 'className', ({ firstChange, currentValue }) => {\n        if (!firstChange || (firstChange && currentValue)) {\n          this.renderer.setAttribute(this.elementRef.nativeElement, 'class', currentValue);\n        }\n      }),\n    ];\n  }\n\n  private resetRefs(field: FormlyFieldConfigCache) {\n    if (field) {\n      if (field._componentRefs) {\n        field._componentRefs = field._componentRefs.filter(ref => this.componentRefs.indexOf(ref) === -1);\n      } else {\n        defineHiddenProp(this.field, '_componentRefs', []);\n      }\n    }\n\n    this.componentRefs = [];\n  }\n}\n","import { Directive, ElementRef, Input, OnChanges, SimpleChanges, Renderer2, DoCheck, Inject, OnDestroy } from '@angular/core';\nimport { FormlyFieldConfig, FormlyTemplateOptions } from './formly.field.config';\nimport { wrapProperty, defineHiddenProp, FORMLY_VALIDATORS } from '../utils';\nimport { DOCUMENT } from '@angular/common';\n\n@Directive({\n  selector: '[formlyAttributes]',\n  host: {\n    '(focus)': 'onFocus($event)',\n    '(blur)': 'onBlur($event)',\n  },\n})\nexport class FormlyAttributes implements OnChanges, DoCheck, OnDestroy {\n  @Input('formlyAttributes') field: FormlyFieldConfig;\n  @Input() id: string;\n\n  private document: Document;\n  private uiAttributesCache: any = {};\n  private uiAttributes = [\n    ...FORMLY_VALIDATORS,\n    'tabindex',\n    'placeholder',\n    'readonly',\n    'disabled',\n    'step',\n  ];\n\n  /**\n   * HostBinding doesn't register listeners conditionally which may produce some perf issues.\n   *\n   * Formly issue: https://github.com/ngx-formly/ngx-formly/issues/1991\n   */\n  private uiEvents = {\n    listeners: [],\n    events: [\n      'click',\n      'keyup',\n      'keydown',\n      'keypress',\n      'change',\n    ],\n  };\n\n  get to(): FormlyTemplateOptions { return this.field.templateOptions || {}; }\n\n  private get fieldAttrElements(): ElementRef[] { return (this.field && this.field['_elementRefs']) || []; }\n\n  constructor(\n    private renderer: Renderer2,\n    private elementRef: ElementRef,\n    @Inject(DOCUMENT) _document: any,\n  ) {\n    this.document = _document;\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.field) {\n      this.field.name && this.setAttribute('name', this.field.name);\n      this.uiEvents.listeners.forEach(listener => listener());\n      this.uiEvents.events.forEach(eventName => {\n        let callback = this.to && this.to[eventName];\n        if (eventName === 'change') {\n          callback = this.onChange.bind(this);\n        }\n\n        if (callback) {\n          this.uiEvents.listeners.push(\n            this.renderer.listen(\n              this.elementRef.nativeElement,\n              eventName,\n              (e) => callback(this.field, e),\n            ),\n          );\n        }\n      });\n\n      if (this.to && this.to.attributes) {\n        wrapProperty(this.to, 'attributes', ({ currentValue, previousValue }) => {\n          if (previousValue) {\n            Object.keys(previousValue).forEach(attr => this.removeAttribute(attr));\n          }\n\n          if (currentValue) {\n            Object.keys(currentValue).forEach(attr => this.setAttribute(attr, currentValue[attr]));\n          }\n        });\n      }\n\n      this.detachElementRef(changes.field.previousValue);\n      this.attachElementRef(changes.field.currentValue);\n      if (this.fieldAttrElements.length === 1) {\n        !this.id && this.field.id && this.setAttribute('id', this.field.id);\n        wrapProperty(this.field, 'focus', ({ currentValue }) => {\n          this.toggleFocus(currentValue);\n        });\n      }\n    }\n\n    if (changes.id) {\n      this.setAttribute('id', this.id);\n    }\n  }\n\n  /**\n   * We need to re-evaluate all the attributes on every change detection cycle, because\n   * by using a HostBinding we run into certain edge cases. This means that whatever logic\n   * is in here has to be super lean or we risk seriously damaging or destroying the performance.\n   *\n   * Formly issue: https://github.com/ngx-formly/ngx-formly/issues/1317\n   * Material issue: https://github.com/angular/components/issues/14024\n   */\n  ngDoCheck() {\n    this.uiAttributes.forEach(attr => {\n      const value = this.to[attr];\n      if (this.uiAttributesCache[attr] !== value) {\n        this.uiAttributesCache[attr] = value;\n        if (value || value === 0) {\n          this.setAttribute(attr, value === true ? attr : `${value}`);\n        } else {\n          this.removeAttribute(attr);\n        }\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    this.uiEvents.listeners.forEach(listener => listener());\n    this.detachElementRef(this.field);\n  }\n\n  toggleFocus(value: boolean) {\n    const element = this.fieldAttrElements ? this.fieldAttrElements[0] : null;\n    if (!element || !element.nativeElement.focus) {\n      return;\n    }\n\n    const isFocused = !!this.document.activeElement\n      && this.fieldAttrElements\n        .some(({ nativeElement }) => this.document.activeElement === nativeElement || nativeElement.contains(this.document.activeElement));\n\n    if (value && !isFocused) {\n      element.nativeElement.focus();\n    } else if (!value && isFocused) {\n      element.nativeElement.blur();\n    }\n  }\n\n  onFocus($event: any) {\n    this.field['___$focus'] = true;\n    if (this.to.focus) {\n      this.to.focus(this.field, $event);\n    }\n  }\n\n  onBlur($event: any) {\n    this.field['___$focus'] = false;\n    if (this.to.blur) {\n      this.to.blur(this.field, $event);\n    }\n  }\n\n  onChange($event: any) {\n    if (this.to.change) {\n      this.to.change(this.field, $event);\n    }\n\n    if (this.field.formControl) {\n      this.field.formControl.markAsDirty();\n    }\n  }\n\n  private attachElementRef(f: FormlyFieldConfig) {\n    if (!f) {\n      return;\n    }\n\n    if (f['_elementRefs'] && f['_elementRefs'].indexOf(this.elementRef) === -1) {\n      f['_elementRefs'].push(this.elementRef);\n    } else {\n      defineHiddenProp(f, '_elementRefs', [this.elementRef]);\n    }\n  }\n\n  private detachElementRef(f: FormlyFieldConfig) {\n    const index = f && f['_elementRefs'] ? this.fieldAttrElements.indexOf(this.elementRef) : -1;\n    if (index !== -1) {\n      this.field['_elementRefs'].splice(index, 1);\n    }\n  }\n\n  private setAttribute(attr: string, value: string) {\n    this.renderer.setAttribute(this.elementRef.nativeElement, attr, value);\n  }\n\n  private removeAttribute(attr: string) {\n    this.renderer.removeAttribute(this.elementRef.nativeElement, attr);\n  }\n}\n","import { Input } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { FormlyFieldConfig } from '../components/formly.field.config';\n\nexport abstract class FieldType<F extends FormlyFieldConfig = FormlyFieldConfig> {\n  @Input() field: F;\n  defaultOptions?: F;\n\n  @Input()\n  get model() { return this.field.model; }\n  set model(m: any) { console.warn(`NgxFormly: passing 'model' input to '${this.constructor.name}' component is not required anymore, you may remove it!`); }\n\n  @Input()\n  get form() { return <FormGroup> this.field.parent.formControl; }\n  set form(form) { console.warn(`NgxFormly: passing 'form' input to '${this.constructor.name}' component is not required anymore, you may remove it!`); }\n\n  @Input()\n  get options() { return this.field.options; }\n  set options(options: F['options']) { console.warn(`NgxFormly: passing 'options' input to '${this.constructor.name}' component is not required anymore, you may remove it!`); }\n\n  get key() { return this.field.key; }\n\n  get formControl() { return this.field.formControl; }\n\n  get to() { return this.field.templateOptions || {}; }\n\n  get showError(): boolean { return this.options.showError(this); }\n\n  get id(): string { return this.field.id; }\n\n  get formState() { return this.options.formState || {}; }\n}\n\n/**\n * @deprecated use `FieldType` instead\n */\nexport abstract class Field extends FieldType {\n  constructor() {\n    super();\n    console.warn(`NgxFormly: 'Field' has been renamed to 'FieldType', extend 'FieldType' instead.`);\n  }\n}\n","import { FormArray, FormGroup, FormControl, AbstractControl } from '@angular/forms';\nimport { FormlyFieldConfig } from '../../core';\nimport { getKeyPath, getFieldValue, isNullOrUndefined, defineHiddenProp, wrapProperty, isUndefined, assignFieldValue } from '../../utils';\nimport { FormlyFieldConfigCache } from '../../components/formly.field.config';\nimport { EventEmitter } from '@angular/core';\n\nexport function unregisterControl(field: FormlyFieldConfig, emitEvent = false) {\n  const form = field.formControl.parent as FormArray | FormGroup;\n  if (!form) {\n    return;\n  }\n\n  const control = field.formControl;\n  const opts = { emitEvent };\n  if (form instanceof FormArray) {\n    const key = form.controls.findIndex(c => c === control);\n    if (key !== -1) {\n      updateControl(form, opts, () => form.removeAt(key));\n    }\n  } else if (form instanceof FormGroup) {\n    const paths = getKeyPath(field);\n    const key = paths[paths.length - 1];\n    if (form.get([key]) === control) {\n      updateControl(form, opts, () => form.removeControl(key));\n    }\n  }\n\n  control.setParent(null);\n  if (field['autoClear']) {\n    if (field.parent.model) {\n      delete field.parent.model[field.key];\n    }\n    control.reset(\n      { value: undefined, disabled: control.disabled },\n      { emitEvent: field.fieldGroup ? false : emitEvent, onlySelf: true },\n    );\n  }\n}\n\nexport function findControl(field: FormlyFieldConfig): AbstractControl {\n  if (field.formControl) {\n    return field.formControl;\n  }\n\n  const form = field.parent.formControl as FormGroup;\n\n  return form ? form.get(getKeyPath(field)) : null;\n}\n\nexport function registerControl(field: FormlyFieldConfigCache, control?: any, emitEvent = false) {\n  control = control || field.formControl;\n  if (!control['_fields']) {\n    defineHiddenProp(control, '_fields', []);\n  }\n  if (control['_fields'].indexOf(field) === -1) {\n    control['_fields'].push(field);\n  }\n\n  if (!field.formControl && control) {\n    defineHiddenProp(field, 'formControl', control);\n\n    field.templateOptions.disabled = !!field.templateOptions.disabled;\n    wrapProperty(field.templateOptions, 'disabled', ({ firstChange, currentValue }) => {\n      if (!firstChange) {\n        currentValue ? field.formControl.disable() : field.formControl.enable();\n      }\n    });\n    if (control.registerOnDisabledChange) {\n      control.registerOnDisabledChange(\n        (value: boolean) => field.templateOptions['___$disabled'] = value,\n      );\n    }\n  }\n\n  let parent = field.parent.formControl as FormGroup;\n  if (!parent) {\n    return;\n  }\n\n  const paths = getKeyPath(field);\n  if (!parent['_formlyControls']) {\n    defineHiddenProp(parent, '_formlyControls', {});\n  }\n  parent['_formlyControls'][paths.join('.')] = control;\n\n  for (let i = 0; i < (paths.length - 1); i++) {\n    const path = paths[i];\n    if (!parent.get([path])) {\n      registerControl({\n        key: path,\n        formControl: new FormGroup({}),\n        parent: { formControl: parent },\n      });\n    }\n\n    parent = <FormGroup> parent.get([path]);\n  }\n\n  if (field['autoClear'] && field.parent && !isUndefined(field.defaultValue) && isUndefined(getFieldValue(field))) {\n    assignFieldValue(field, field.defaultValue);\n  }\n\n  const value = getFieldValue(field);\n  if (\n    !(isNullOrUndefined(control.value) && isNullOrUndefined(value))\n    && control.value !== value\n    && control instanceof FormControl\n  ) {\n    control.patchValue(value);\n  }\n  const key = paths[paths.length - 1];\n  if (!field._hide && parent.get([key]) !== control) {\n    updateControl(\n      parent,\n      { emitEvent },\n      () => parent.setControl(key, control),\n    );\n  }\n}\n\nexport function updateValidity(c: AbstractControl) {\n  const status = c.status;\n  c.updateValueAndValidity({ emitEvent: false });\n  if (status !== c.status) {\n    (c.statusChanges as EventEmitter<string>).emit(c.status);\n  }\n}\n\nfunction updateControl(form: FormGroup|FormArray, opts: { emitEvent: boolean }, action: Function) {\n  /**\n   *  workaround for https://github.com/angular/angular/issues/27679\n   */\n  if (form instanceof FormGroup && !form['__patchForEachChild']) {\n    defineHiddenProp(form, '__patchForEachChild', true);\n    (form as any)._forEachChild = (cb: Function) => {\n      Object\n        .keys(form.controls)\n        .forEach(k => form.controls[k] && cb(form.controls[k], k));\n    };\n  }\n\n  /**\n   * workaround for https://github.com/angular/angular/issues/20439\n   */\n  const updateValueAndValidity = form.updateValueAndValidity.bind(form);\n  if (opts.emitEvent === false) {\n    form.updateValueAndValidity = (opts) => {\n      updateValueAndValidity({ ...(opts || {}), emitEvent: false });\n    };\n  }\n\n  action();\n\n  if (opts.emitEvent === false) {\n    form.updateValueAndValidity = updateValueAndValidity;\n  }\n}\n","import { Inject, Optional } from '@angular/core';\nimport { FormArray } from '@angular/forms';\nimport { FieldType } from './field.type';\nimport { clone, isNullOrUndefined, assignFieldValue } from '../utils';\nimport { FormlyFormBuilder } from '../services/formly.form.builder';\nimport { FormlyFieldConfig } from '../components/formly.field.config';\nimport { FORMLY_CONFIG, FormlyExtension } from '../services/formly.config';\nimport { registerControl, unregisterControl } from '../extensions/field-form/utils';\n\nexport abstract class FieldArrayType<F extends FormlyFieldConfig = FormlyFieldConfig> extends FieldType<F> implements FormlyExtension {\n  formControl: FormArray;\n  defaultOptions: any = {\n    defaultValue: [],\n  };\n\n  constructor(@Inject(FORMLY_CONFIG) @Optional() builder?: FormlyFormBuilder) {\n    super();\n\n    if (builder instanceof FormlyFormBuilder) {\n      console.warn(`NgxFormly: passing 'FormlyFormBuilder' to '${this.constructor.name}' type is not required anymore, you may remove it!`);\n    }\n  }\n\n  onPopulate(field: FormlyFieldConfig) {\n    if (!field.formControl && field.key) {\n      registerControl(field, new FormArray([], { updateOn: field.modelOptions.updateOn }));\n    }\n\n    field.fieldGroup = field.fieldGroup || [];\n\n    const length = field.model ? field.model.length : 0;\n    if (field.fieldGroup.length > length) {\n      for (let i = field.fieldGroup.length - 1; i >= length; --i) {\n        unregisterControl(field.fieldGroup[i]);\n        field.fieldGroup.splice(i, 1);\n      }\n    }\n\n    for (let i = field.fieldGroup.length; i < length; i++) {\n      const f = { ...clone(field.fieldArray), key: `${i}` };\n      field.fieldGroup.push(f);\n    }\n  }\n\n  add(i?: number, initialModel?: any, { markAsDirty } = { markAsDirty: true }) {\n    i = isNullOrUndefined(i) ? this.field.fieldGroup.length : i;\n    if (!this.model) {\n      assignFieldValue(this.field, []);\n    }\n\n    this.model.splice(i, 0, initialModel ? clone(initialModel) : undefined);\n\n    (<any> this.options)._buildForm(true);\n    markAsDirty && this.formControl.markAsDirty();\n  }\n\n  remove(i: number, { markAsDirty } = { markAsDirty: true }) {\n    this.model.splice(i, 1);\n    unregisterControl(this.field.fieldGroup[i], true);\n    this.field.fieldGroup.splice(i, 1);\n    this.field.fieldGroup.forEach((f, key) => f.key = `${key}`);\n\n    (<any> this.options)._buildForm(true);\n    markAsDirty && this.formControl.markAsDirty();\n  }\n}\n","import { ViewContainerRef, ViewChild } from '@angular/core';\nimport { FieldType } from './field.type';\nimport { FormlyFieldConfig } from '../components/formly.field.config';\n\nexport abstract class FieldWrapper<F extends FormlyFieldConfig = FormlyFieldConfig> extends FieldType<F> {\n  // TODO: remove `any`, once dropping angular `V7` support.\n  @ViewChild('fieldComponent', <any>{ read: ViewContainerRef, static: false }) fieldComponent: ViewContainerRef;\n}\n","import { Component } from '@angular/core';\nimport { FieldType } from './field.type';\n\n@Component({\n  selector: 'formly-group',\n  template: `\n    <formly-field *ngFor=\"let f of field.fieldGroup\" [field]=\"f\"></formly-field>\n    <ng-content></ng-content>\n  `,\n  host: {\n    '[class]': 'field.fieldGroupClassName || \"\"',\n  },\n})\nexport class FormlyGroup extends FieldType {\n  defaultOptions = {\n    defaultValue: {},\n  };\n}\n","import { Component, Input, ChangeDetectionStrategy, OnChanges } from '@angular/core';\nimport { FormlyConfig, ValidationMessageOption } from '../services/formly.config';\nimport { FormlyFieldConfig } from '../components/formly.field.config';\nimport { isObject } from '../utils';\nimport { Observable, isObservable, of } from 'rxjs';\nimport { startWith, switchMap } from 'rxjs/operators';\n\n@Component({\n  selector: 'formly-validation-message',\n  template: `{{ errorMessage$ | async }}`,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FormlyValidationMessage implements OnChanges {\n  @Input() field: FormlyFieldConfig;\n  errorMessage$: Observable<string>;\n\n  constructor(private formlyConfig: FormlyConfig) {}\n\n  ngOnChanges() {\n    this.errorMessage$ = this.field.formControl.statusChanges.pipe(\n      startWith(null),\n      switchMap(() => isObservable(this.errorMessage)\n        ? this.errorMessage\n        : of(this.errorMessage),\n      ),\n    );\n  }\n\n  get errorMessage() {\n    const fieldForm = this.field.formControl;\n    for (let error in fieldForm.errors) {\n      if (fieldForm.errors.hasOwnProperty(error)) {\n        let message: ValidationMessageOption['message'] = this.formlyConfig.getValidatorMessage(error);\n\n        if (isObject(fieldForm.errors[error])) {\n          if (fieldForm.errors[error].errorPath) {\n            return;\n          }\n\n          if (fieldForm.errors[error].message) {\n            message = fieldForm.errors[error].message;\n          }\n        }\n\n        if (this.field.validation && this.field.validation.messages && this.field.validation.messages[error]) {\n          message = this.field.validation.messages[error];\n        }\n\n        if (this.field.validators && this.field.validators[error] && this.field.validators[error].message) {\n          message = this.field.validators[error].message;\n        }\n\n        if (this.field.asyncValidators && this.field.asyncValidators[error] && this.field.asyncValidators[error].message) {\n          message = this.field.asyncValidators[error].message;\n        }\n\n        if (typeof message === 'function') {\n          return message(fieldForm.errors[error], this.field);\n        }\n\n        return message;\n      }\n    }\n  }\n}\n","import { Component } from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { FieldType } from './field.type';\n\n@Component({\n  selector: 'formly-template',\n  template: `<div [innerHtml]=\"template\"></div>`,\n})\nexport class FormlyTemplateType extends FieldType {\n  get template() {\n    if (this.field && (this.field.template !== this.innerHtml.template)) {\n      this.innerHtml = {\n        template: this.field.template,\n        content: this.to.safeHtml\n          ? this.sanitizer.bypassSecurityTrustHtml(this.field.template)\n          : this.field.template,\n      };\n    }\n\n    return this.innerHtml.content;\n  }\n\n  private innerHtml = { content: null, template: null };\n  constructor(private sanitizer: DomSanitizer) {\n    super();\n  }\n}\n","export function evalStringExpression(expression: string, argNames: string[]) {\n  try {\n    if (expression.indexOf('this.field') !== -1) {\n      console.warn(`NgxFormly: using 'this.field' in expressionProperties is deprecated since v5.1, use 'field' instead.`);\n    }\n\n    return Function(...argNames, `return ${expression};`) as any;\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nexport function evalExpressionValueSetter(expression: string, argNames: string[]) {\n  try {\n    return Function(...argNames, `${expression} = expressionValue;`) as (value: any) => void;\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nexport function evalExpression(expression: string | Function | boolean, thisArg: any, argVal: any[]): any {\n  if (expression instanceof Function) {\n    return expression.apply(thisArg, argVal);\n  } else {\n    return expression ? true : false;\n  }\n}\n","import { FormlyFieldConfig, FormlyValueChangeEvent, FormlyFieldConfigCache } from '../../components/formly.field.config';\nimport { isObject, isNullOrUndefined, isFunction, defineHiddenProp, wrapProperty, reduceFormUpdateValidityCalls } from '../../utils';\nimport { evalExpression, evalStringExpression } from './utils';\nimport { Observable, Subscription } from 'rxjs';\nimport { FormlyExtension } from '../../services/formly.config';\nimport { unregisterControl, registerControl, updateValidity } from '../field-form/utils';\n\n/** @experimental */\nexport class FieldExpressionExtension implements FormlyExtension {\n  prePopulate(field: FormlyFieldConfigCache) {\n    if (field.parent || field.options._checkField) {\n      return;\n    }\n\n    field.options._checkField = (f, ignoreCache) => {\n      reduceFormUpdateValidityCalls(\n        f.formControl,\n        () => this.checkField(f, ignoreCache),\n      );\n    };\n  }\n\n  onPopulate(field: FormlyFieldConfigCache) {\n    if (!field.parent || field._expressionProperties) {\n      return;\n    }\n\n    // cache built expression\n    defineHiddenProp(field, '_expressionProperties', {});\n\n    if (field.expressionProperties) {\n      for (const key in field.expressionProperties) {\n        const expressionProperty = field.expressionProperties[key];\n\n        if (typeof expressionProperty === 'string' || isFunction(expressionProperty)) {\n          field._expressionProperties[key] = {\n            expression: this._evalExpression(\n              expressionProperty,\n              key === 'templateOptions.disabled' && field.parent.expressionProperties && field.parent.expressionProperties.hasOwnProperty('templateOptions.disabled')\n                ? () => field.parent.templateOptions.disabled\n                : undefined,\n            ),\n          };\n          if (key === 'templateOptions.disabled') {\n            Object.defineProperty(field._expressionProperties[key], 'expressionValue', {\n              get: () => field.templateOptions.disabled,\n              set: () => { },\n              enumerable: true,\n              configurable: true,\n            });\n          }\n        } else if (expressionProperty instanceof Observable) {\n          const subscribe = () => (expressionProperty as Observable<any>)\n            .subscribe(v => {\n              this.setExprValue(field, key, v);\n              if (field.options && field.options._markForCheck) {\n                field.options._markForCheck(field);\n              }\n            });\n\n          let subscription: Subscription = subscribe();\n          const onInit = field.hooks.onInit;\n          field.hooks.onInit = () => {\n            if (subscription === null) {\n              subscription = subscribe();\n            }\n            return onInit && onInit(field);\n          };\n\n          const onDestroy = field.hooks.onDestroy;\n          field.hooks.onDestroy = () => {\n            onDestroy && onDestroy(field);\n            subscription.unsubscribe();\n            subscription = null;\n          };\n        }\n      }\n    }\n\n    if (field.hideExpression) {\n      // delete hide value in order to force re-evaluate it in FormlyFormExpression.\n      delete field.hide;\n\n      let parent = field.parent;\n      while (parent && !parent.hideExpression) {\n        parent = parent.parent;\n      }\n\n      field.hideExpression = this._evalExpression(\n        field.hideExpression,\n        parent && parent.hideExpression ? () => parent.hide : undefined,\n      );\n    } else {\n      wrapProperty(field, 'hide', ({ currentValue, firstChange }) => {\n        field._hide = currentValue;\n        if (!firstChange || (firstChange && currentValue === true)) {\n          field.options._hiddenFieldsForCheck.push(field);\n        }\n      });\n    }\n  }\n\n  private _evalExpression(expression, parentExpression?) {\n    expression = expression || (() => false);\n    if (typeof expression === 'string') {\n      expression = evalStringExpression(expression, ['model', 'formState', 'field']);\n    }\n\n    return parentExpression\n      ? (model: any, formState: any, field: FormlyFieldConfig) => parentExpression() || expression(model, formState, field)\n      : expression;\n  }\n\n  private checkField(field: FormlyFieldConfigCache, ignoreCache = false) {\n    this._checkField(field, ignoreCache);\n\n    field.options._hiddenFieldsForCheck\n      .sort(f => f.hide ? -1 : 1)\n      .forEach(f => this.toggleFormControl(f, f.hide));\n\n    field.options._hiddenFieldsForCheck = [];\n  }\n\n  private _checkField(field: FormlyFieldConfigCache, ignoreCache = false) {\n    let markForCheck = false;\n    field.fieldGroup.forEach(f => {\n      this.checkFieldExpressionChange(f, ignoreCache) && (markForCheck = true);\n      if (this.checkFieldVisibilityChange(f, ignoreCache)) {\n        field.options._hiddenFieldsForCheck.push(f);\n        markForCheck = true;\n      }\n\n      if (f.fieldGroup && f.fieldGroup.length > 0) {\n        this._checkField(f, ignoreCache);\n      }\n    });\n\n    if (markForCheck && field.options && field.options._markForCheck) {\n      field.options._markForCheck(field);\n    }\n  }\n\n  private checkFieldExpressionChange(field: FormlyFieldConfigCache, ignoreCache): boolean {\n    if (!field || !field._expressionProperties) {\n      return false;\n    }\n\n    let markForCheck = false;\n    const expressionProperties = field._expressionProperties;\n\n    for (const key in expressionProperties) {\n      let expressionValue = evalExpression(expressionProperties[key].expression, { field }, [field.model, field.options.formState, field]);\n      if (key === 'templateOptions.disabled') {\n        expressionValue = !!expressionValue;\n      }\n\n      if (\n        ignoreCache || (\n          expressionProperties[key].expressionValue !== expressionValue\n          && (!isObject(expressionValue) || JSON.stringify(expressionValue) !== JSON.stringify(expressionProperties[key].expressionValue))\n        )\n      ) {\n        markForCheck = true;\n        expressionProperties[key].expressionValue = expressionValue;\n        this.setExprValue(field, key, expressionValue);\n      }\n    }\n\n    return markForCheck;\n  }\n\n  private checkFieldVisibilityChange(field: FormlyFieldConfigCache, ignoreCache): boolean {\n    if (!field || isNullOrUndefined(field.hideExpression)) {\n      return false;\n    }\n\n    const hideExpressionResult: boolean = !!evalExpression(\n      field.hideExpression,\n      { field },\n      [field.model, field.options.formState, field],\n    );\n    let markForCheck = false;\n    if (hideExpressionResult !== field.hide || ignoreCache) {\n      markForCheck = true;\n      // toggle hide\n      field.hide = hideExpressionResult;\n      field.templateOptions.hidden = hideExpressionResult;\n    }\n\n    return markForCheck;\n  }\n\n  private setDisabledState(field: FormlyFieldConfig, value: boolean) {\n    if (field.fieldGroup) {\n      field.fieldGroup\n        .filter(f => !f.expressionProperties || !f.expressionProperties.hasOwnProperty('templateOptions.disabled'))\n        .forEach(f => this.setDisabledState(f, value));\n    }\n\n    if (field.key && field.templateOptions.disabled !== value) {\n      field.templateOptions.disabled = value;\n    }\n  }\n\n  private toggleFormControl(field: FormlyFieldConfigCache, hide: boolean) {\n    if (field.formControl && field.key) {\n      defineHiddenProp(field, '_hide', !!(hide || field.hide));\n      const c = field.formControl;\n      if (c['_fields'].length > 1) {\n        updateValidity(c);\n      }\n\n      hide === true && c['_fields'].every(f => !!f._hide)\n        ? unregisterControl(field)\n        : registerControl(field);\n    }\n\n    if (field.fieldGroup) {\n      field.fieldGroup\n        .filter(f => !f.hideExpression)\n        .forEach(f => this.toggleFormControl(f, hide));\n    }\n\n    if (field.options.fieldChanges) {\n      field.options.fieldChanges.next(<FormlyValueChangeEvent> { field: field, type: 'hidden', value: hide });\n    }\n  }\n\n  private setExprValue(field: FormlyFieldConfigCache, prop: string, value: any) {\n    try {\n      let target = field;\n      const paths = prop.split('.');\n      const lastIndex = paths.length - 1;\n      for (let i = 0; i < lastIndex; i++) {\n        target = target[paths[i]];\n      }\n\n      target[paths[lastIndex]] = value;\n    } catch (error) {\n      error.message = `[Formly Error] [Expression \"${prop}\"] ${error.message}`;\n      throw error;\n    }\n\n    if (prop === 'templateOptions.disabled' && field.key) {\n      this.setDisabledState(field, value);\n    }\n\n    if (prop.indexOf('model.') === 0) {\n      const path = prop.replace(/^model\\./, ''),\n        control = field.key && prop === path ? field.formControl : field.parent.formControl.get(path);\n\n      if (\n        control\n        && !(isNullOrUndefined(control.value) && isNullOrUndefined(value))\n        && control.value !== value\n      ) {\n        control.patchValue(value, { emitEvent: false });\n      }\n    }\n  }\n}\n","import { FormlyExtension, FormlyConfig, ValidatorOption } from '../../services/formly.config';\nimport { FormlyFieldConfigCache } from '../../components/formly.field.config';\nimport { AbstractControl, Validators, ValidatorFn } from '@angular/forms';\nimport { FORMLY_VALIDATORS, defineHiddenProp, isPromise, wrapProperty, clone } from '../../utils';\nimport { updateValidity } from '../field-form/utils';\n\n/** @experimental */\nexport class FieldValidationExtension implements FormlyExtension {\n  constructor(private formlyConfig: FormlyConfig) {}\n\n  onPopulate(field: FormlyFieldConfigCache) {\n    this.initFieldValidation(field, 'validators');\n    this.initFieldValidation(field, 'asyncValidators');\n  }\n\n  private initFieldValidation(field: FormlyFieldConfigCache, type: 'validators' | 'asyncValidators') {\n    const validators: ValidatorFn[] = [];\n    if (type === 'validators' && !(field.hasOwnProperty('fieldGroup') && !field.key)) {\n      validators.push(this.getPredefinedFieldValidation(field));\n    }\n\n    if (field[type]) {\n      for (const validatorName in field[type]) {\n        if (validatorName === 'validation' && !Array.isArray(field[type].validation)) {\n          field[type].validation = [field[type].validation];\n          console.warn(`NgxFormly(${field.key}): passing a non array value to the 'validation' is deprecated, pass an array instead`);\n        }\n\n        validatorName === 'validation'\n          ? validators.push(...field[type].validation.map(v => this.wrapNgValidatorFn(field, v)))\n          : validators.push(this.wrapNgValidatorFn(field, field[type][validatorName], validatorName))\n        ;\n      }\n    }\n\n    defineHiddenProp(field, '_' + type, validators);\n  }\n\n  private getPredefinedFieldValidation(field: FormlyFieldConfigCache): ValidatorFn {\n    let VALIDATORS = [];\n    FORMLY_VALIDATORS.forEach(opt => wrapProperty(field.templateOptions, opt, ({ currentValue, firstChange }) => {\n      VALIDATORS = VALIDATORS.filter(o => o !== opt);\n      if (currentValue != null && currentValue !== false) {\n        VALIDATORS.push(opt);\n      }\n      if (!firstChange && field.formControl) {\n        updateValidity(field.formControl);\n      }\n    }));\n\n    return (control: AbstractControl) => {\n      if (VALIDATORS.length === 0) {\n        return null;\n      }\n\n      return Validators.compose(VALIDATORS.map(opt => () => {\n        const value = field.templateOptions[opt];\n        switch (opt) {\n          case 'required':\n            return Validators.required(control);\n          case 'pattern':\n            return Validators.pattern(value)(control);\n          case 'minLength':\n            return Validators.minLength(value)(control);\n          case 'maxLength':\n            return Validators.maxLength(value)(control);\n          case 'min':\n            return Validators.min(value)(control);\n          case 'max':\n            return Validators.max(value)(control);\n        }\n      }))(control);\n    };\n  }\n\n  private wrapNgValidatorFn(field: FormlyFieldConfigCache, validator: any, validatorName?: string) {\n    let validatorOption: ValidatorOption = null;\n    if (typeof validator === 'string') {\n      validatorOption = clone(this.formlyConfig.getValidator(validator));\n    }\n\n    if (typeof validator === 'object' && validator.name) {\n      validatorOption = clone(this.formlyConfig.getValidator(validator.name));\n      if (validator.options) {\n        validatorOption.options = validator.options;\n      }\n    }\n\n    if (typeof validator === 'object' && validator.expression) {\n      const { expression, ...options } = validator;\n      validatorOption = {\n        name: validatorName,\n        validation: expression,\n        options: Object.keys(options).length > 0 ? options : null,\n      };\n    }\n\n    if (typeof validator === 'function') {\n      validatorOption = {\n        name: validatorName,\n        validation: validator,\n      };\n    }\n\n    return (control: AbstractControl) => {\n      let errors: any = validatorOption.validation(control, field, validatorOption.options);\n      if (validatorName) {\n        if (isPromise(errors)) {\n          return errors.then((result: boolean) => {\n            // workaround for https://github.com/angular/angular/issues/13200\n            if (field.options && field.options._markForCheck) {\n              field.options._markForCheck(field);\n            }\n\n            return this.handleResult(field, !!result, validatorOption);\n          });\n        }\n        errors = !!errors;\n      }\n\n      return this.handleResult(field, errors, validatorOption);\n    };\n  }\n\n  private handleResult(field: FormlyFieldConfigCache, errors: any, { name, options }: ValidatorOption) {\n    if (typeof errors === 'boolean') {\n      errors = errors ? null : { [name]: options ? options : true };\n    }\n\n    const ctrl = field.formControl;\n    ctrl['_childrenErrors'] && ctrl['_childrenErrors'][name] && ctrl['_childrenErrors'][name]();\n\n    if (errors && errors[name]) {\n      const errorPath = errors[name].errorPath\n        ? errors[name].errorPath\n        : (options || {}).errorPath;\n\n      const childCtrl = errorPath ? field.formControl.get(errorPath) : null;\n      if (childCtrl) {\n        const { errorPath, ...opts } = errors[name];\n        childCtrl.setErrors({ ...(childCtrl.errors || {}), [name]: opts });\n\n        !ctrl['_childrenErrors'] && defineHiddenProp(ctrl, '_childrenErrors', {});\n        ctrl['_childrenErrors'][name] = () => {\n          const { [name]: toDelete, ...childErrors } = childCtrl.errors || {};\n          childCtrl.setErrors(Object.keys(childErrors).length === 0 ? null : childErrors);\n        };\n      }\n    }\n\n    return errors;\n  }\n}\n","import { FormlyExtension, FormlyConfig } from '../../services/formly.config';\nimport { FormlyFieldConfigCache } from '../../components/formly.field.config';\nimport { FormGroup, FormControl, AbstractControlOptions, Validators, ValidatorFn, AsyncValidatorFn } from '@angular/forms';\nimport { getFieldValue, defineHiddenProp } from '../../utils';\nimport { registerControl, findControl, updateValidity as updateControlValidity } from './utils';\nimport { of } from 'rxjs';\n\n/** @experimental */\nexport class FieldFormExtension implements FormlyExtension {\n  constructor(private config: FormlyConfig) { }\n\n  onPopulate(field: FormlyFieldConfigCache) {\n    if (field.key) {\n      this.addFormControl(field);\n    }\n\n    if (field.parent && field.fieldGroup && !field.key) {\n      defineHiddenProp(field, 'formControl', field.parent.formControl);\n    }\n  }\n\n  postPopulate(field: FormlyFieldConfigCache) {\n    if (field.parent) {\n      return;\n    }\n\n    const updateValidity = this.setValidators(field);\n    updateValidity && (field.formControl as any)._updateTreeValidity();\n  }\n\n  private addFormControl(field: FormlyFieldConfigCache) {\n    let control = findControl(field);\n    if (!control) {\n      const controlOptions: AbstractControlOptions = { updateOn: field.modelOptions.updateOn };\n      const value = getFieldValue(field);\n\n      const ref = this.config ? this.config.resolveFieldTypeRef(field) : null;\n      if (ref && ref.componentType && ref.componentType['createControl']) {\n        const component = ref.componentType;\n        console.warn(`NgxFormly: '${component.name}::createControl' is deprecated since v5.0, use 'prePopulate' hook instead.`);\n        control = component['createControl'](value, field);\n      } else if (field.fieldGroup) {\n        // TODO: move to postPopulate\n        control = new FormGroup({}, controlOptions);\n      } else {\n        control = new FormControl(value, controlOptions);\n      }\n    }\n\n    registerControl(field, control);\n  }\n\n  private setValidators(field: FormlyFieldConfigCache) {\n    let updateValidity = false;\n    if (field.key || !field.parent) {\n      const { formControl: c } = field;\n      const disabled = field.templateOptions ? field.templateOptions.disabled : false;\n      if (disabled && c.enabled) {\n        c.disable({ emitEvent: false, onlySelf: true });\n        updateValidity = true;\n      }\n\n      if (null === c.validator || null === c.asyncValidator) {\n        c.setValidators(() => {\n          const v = Validators.compose(this.mergeValidators<ValidatorFn>(field, '_validators'));\n\n          return v ? v(c) : null;\n        });\n        c.setAsyncValidators(() => {\n          const v = Validators.composeAsync(this.mergeValidators<AsyncValidatorFn>(field, '_asyncValidators'));\n\n          return v ? v(c) : of(null);\n        });\n\n        if (!c.parent) {\n          updateControlValidity(c);\n        } else {\n          updateValidity = true;\n        }\n      }\n    }\n\n    (field.fieldGroup || []).forEach(f => this.setValidators(f) && (updateValidity = true));\n\n    return updateValidity;\n  }\n\n  private mergeValidators<T>(field: FormlyFieldConfigCache, type: '_validators' | '_asyncValidators'): T[] {\n    const validators: any = [];\n    const c = field.formControl;\n    if (c && c['_fields'] && c['_fields'].length > 1) {\n      c['_fields']\n        .filter((f: FormlyFieldConfigCache) => !f._hide)\n        .forEach((f: FormlyFieldConfigCache) => validators.push(...f[type]));\n    } else {\n      validators.push(...field[type]);\n    }\n\n    if (field.fieldGroup) {\n      field.fieldGroup\n        .filter(f => !f.key && f.fieldGroup)\n        .forEach(f => validators.push(...this.mergeValidators(f, type)));\n    }\n\n    return validators;\n  }\n}\n","import { FormlyExtension, FormlyConfig, TemplateManipulators } from '../../services/formly.config';\nimport { FormlyFieldConfigCache, FormlyFieldConfig } from '../../components/formly.field.config';\nimport { FormGroup } from '@angular/forms';\nimport { getFieldId, isUndefined, getFieldValue, reverseDeepMerge, assignFieldValue } from '../../utils';\n\n/** @experimental */\nexport class CoreExtension implements FormlyExtension {\n  private formId = 0;\n  constructor(private formlyConfig: FormlyConfig) { }\n\n  prePopulate(field: FormlyFieldConfigCache) {\n    this.getFieldComponentInstance(field).prePopulate();\n    if (field.parent) {\n      return;\n    }\n\n    const fieldTransforms = (field.options && field.options.fieldTransform) || this.formlyConfig.extras.fieldTransform;\n    (Array.isArray(fieldTransforms) ? fieldTransforms : [fieldTransforms]).forEach(fieldTransform => {\n      if (fieldTransform) {\n        console.warn(`NgxFormly: fieldTransform is deprecated since v5.0, use custom extension instead.`);\n        const fieldGroup = fieldTransform(field.fieldGroup, field.model, <FormGroup>field.formControl, field.options);\n        if (!fieldGroup) {\n          throw new Error('fieldTransform must return an array of fields');\n        }\n      }\n    });\n  }\n\n  onPopulate(field: FormlyFieldConfigCache) {\n    this.initFieldOptions(field);\n    this.getFieldComponentInstance(field).onPopulate();\n    if (field.fieldGroup) {\n      field.fieldGroup.forEach((f, index) => {\n        Object.defineProperty(f, 'parent', { get: () => field, configurable: true });\n        Object.defineProperty(f, 'index', { get: () => index, configurable: true });\n        this.formId++;\n      });\n    }\n  }\n\n  postPopulate(field: FormlyFieldConfigCache) {\n    this.getFieldComponentInstance(field).postPopulate();\n  }\n\n  private initFieldOptions(field: FormlyFieldConfigCache) {\n    const root = <FormlyFieldConfigCache> field.parent;\n    if (!root) {\n      return;\n    }\n\n    Object.defineProperty(field, 'form', { get: () => root.formControl, configurable: true });\n    Object.defineProperty(field, 'options', { get: () => root.options, configurable: true });\n    Object.defineProperty(field, 'model', {\n      get: () => field.key && field.fieldGroup ? getFieldValue(field) : root.model,\n      configurable: true,\n    });\n\n    reverseDeepMerge(field, {\n      id: getFieldId(`formly_${this.formId}`, field, field['index']),\n      hooks: {},\n      modelOptions: {},\n      templateOptions: !field.type || !field.key ? {} : {\n        label: '',\n        placeholder: '',\n        focus: false,\n        disabled: false,\n      },\n    });\n\n    if (field.lifecycle) {\n      console.warn(`NgxFormly: 'lifecycle' is deprecated since v5.0, use 'hooks' instead.`);\n    }\n\n    if (\n      field.type !== 'formly-template'\n      && (\n        field.template\n        || (field.expressionProperties && field.expressionProperties.template)\n      )\n    ) {\n      if (field.type) {\n        console.warn(`NgxFormly: passing 'type' property is not allowed when 'template' is set.`);\n      }\n      field.type = 'formly-template';\n    }\n\n    if (!field.type && field.fieldGroup) {\n      field.type = 'formly-group';\n    }\n\n    if (field.type) {\n      this.formlyConfig.getMergedField(field);\n    }\n\n    if (field.parent && !field['autoClear'] && !isUndefined(field.defaultValue) && isUndefined(getFieldValue(field))) {\n      assignFieldValue(field, field.defaultValue);\n    }\n\n    this.initFieldWrappers(field);\n  }\n\n  private initFieldWrappers(field: FormlyFieldConfig) {\n    field.wrappers = field.wrappers || [];\n    const fieldTemplateManipulators: TemplateManipulators = {\n      preWrapper: [],\n      postWrapper: [],\n      ...(field.templateOptions.templateManipulators || {}),\n    };\n\n    field.wrappers = [\n      ...this.formlyConfig.templateManipulators.preWrapper.map(m => m(field)),\n      ...fieldTemplateManipulators.preWrapper.map(m => m(field)),\n      ...field.wrappers,\n      ...this.formlyConfig.templateManipulators.postWrapper.map(m => m(field)),\n      ...fieldTemplateManipulators.postWrapper.map(m => m(field)),\n    ].filter((el, i, a) => el && i === a.indexOf(el));\n  }\n\n  private getFieldComponentInstance(field: FormlyFieldConfigCache) {\n    const componentRef = this.formlyConfig.resolveFieldTypeRef(field);\n    const instance: FormlyExtension = componentRef ? componentRef.instance as any : {};\n\n    return {\n      prePopulate: () => instance.prePopulate && instance.prePopulate(field),\n      onPopulate: () => instance.onPopulate && instance.onPopulate(field),\n      postPopulate: () => instance.postPopulate && instance.postPopulate(field),\n    };\n  }\n}\n","import { NgModule, ModuleWithProviders, ANALYZE_FOR_ENTRY_COMPONENTS, Inject, Optional } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormlyForm } from './components/formly.form';\nimport { FormlyField } from './components/formly.field';\nimport { FormlyAttributes } from './components/formly.attributes';\nimport { FormlyConfig, ConfigOption, FORMLY_CONFIG } from './services/formly.config';\nimport { FormlyFormBuilder } from './services/formly.form.builder';\nimport { FormlyGroup } from './templates/formly.group';\nimport { FormlyValidationMessage } from './templates/formly.validation-message';\nimport { FormlyTemplateType } from './templates/field-template.type';\n\nimport { FieldExpressionExtension } from './extensions/field-expression/field-expression';\nimport { FieldValidationExtension } from './extensions/field-validation/field-validation';\nimport { FieldFormExtension } from './extensions/field-form/field-form';\nimport { CoreExtension } from './extensions/core/core';\n\nexport function defaultFormlyConfig(formlyConfig: FormlyConfig): ConfigOption {\n  return {\n    types: [\n      { name: 'formly-group', component: FormlyGroup },\n      { name: 'formly-template', component: FormlyTemplateType },\n    ],\n    extensions: [\n      { name: 'core', extension: new CoreExtension(formlyConfig) },\n      { name: 'field-validation', extension: new FieldValidationExtension(formlyConfig) },\n      { name: 'field-form', extension: new FieldFormExtension(formlyConfig) },\n      { name: 'field-expression', extension: new FieldExpressionExtension() },\n    ],\n  };\n}\n\n@NgModule({\n  declarations: [\n    FormlyForm,\n    FormlyField,\n    FormlyAttributes,\n    FormlyGroup,\n    FormlyValidationMessage,\n    FormlyTemplateType,\n  ],\n  entryComponents: [FormlyGroup, FormlyTemplateType],\n  exports: [FormlyForm, FormlyField, FormlyAttributes, FormlyGroup, FormlyValidationMessage],\n  imports: [CommonModule],\n})\nexport class FormlyModule {\n  static forRoot(config: ConfigOption = {}): ModuleWithProviders<FormlyModule> {\n    return {\n      ngModule: FormlyModule,\n      providers: [\n        { provide: FORMLY_CONFIG, multi: true, useFactory: defaultFormlyConfig, deps: [FormlyConfig] },\n        { provide: FORMLY_CONFIG, useValue: config, multi: true },\n        { provide: ANALYZE_FOR_ENTRY_COMPONENTS, useValue: config, multi: true },\n        FormlyConfig,\n        FormlyFormBuilder,\n      ],\n    };\n  }\n\n  static forChild(config: ConfigOption = {}): ModuleWithProviders<FormlyModule> {\n    return {\n      ngModule: FormlyModule,\n      providers: [\n        { provide: FORMLY_CONFIG, useValue: config, multi: true },\n        { provide: ANALYZE_FOR_ENTRY_COMPONENTS, useValue: config, multi: true },\n        FormlyFormBuilder,\n      ],\n    };\n  }\n\n  constructor(\n    configService: FormlyConfig,\n    @Optional() @Inject(FORMLY_CONFIG) configs: ConfigOption[] = [],\n  ) {\n    if (!configs) {\n      return;\n    }\n\n    configs.forEach(config => configService.addConfig(config));\n  }\n}\n"]}