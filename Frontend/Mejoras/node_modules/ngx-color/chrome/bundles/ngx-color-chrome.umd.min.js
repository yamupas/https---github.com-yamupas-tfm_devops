!function(e,n){"object"==typeof exports&&"undefined"!=typeof module?n(exports,require("@angular/common"),require("@angular/core"),require("ngx-color"),require("@ctrl/tinycolor")):"function"==typeof define&&define.amd?define("ngx-color/chrome",["exports","@angular/common","@angular/core","ngx-color","@ctrl/tinycolor"],n):n(((e=e||self)["ngx-color"]=e["ngx-color"]||{},e["ngx-color"].chrome={}),e.ng.common,e.ng.core,e["ngx-color"],e["@ctrl/tinycolor"])}(this,(function(e,n,t,o,i){"use strict";
/*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */var l=function(e,n){return(l=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,n){e.__proto__=n}||function(e,n){for(var t in n)n.hasOwnProperty(t)&&(e[t]=n[t])})(e,n)};function a(e,n,t,o){var i,l=arguments.length,a=l<3?n:null===o?o=Object.getOwnPropertyDescriptor(n,t):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,n,t,o);else for(var r=e.length-1;r>=0;r--)(i=e[r])&&(a=(l<3?i(a):l>3?i(n,t,a):i(n,t))||a);return l>3&&a&&Object.defineProperty(n,t,a),a}var r=function(){function e(){this.onChange=new t.EventEmitter,this.view="",this.input={fontSize:"11px",color:"#333",width:"100%",borderRadius:"2px",border:"none",boxShadow:"inset 0 0 0 1px #dadada",height:"21px","text-align":"center"},this.label={"text-transform":"uppercase",fontSize:"11px","line-height":"11px",color:"#969696","text-align":"center",display:"block",marginTop:"12px"}}return e.prototype.ngOnInit=function(){1===this.hsl.a&&"hex"!==this.view?this.view="hex":"rgb"!==this.view&&"hsl"!==this.view&&(this.view="rgb")},e.prototype.toggleViews=function(){"hex"===this.view?this.view="rgb":"rgb"===this.view?this.view="hsl":"hsl"===this.view&&(1===this.hsl.a?this.view="hex":this.view="rgb")},e.prototype.round=function(e){return Math.round(e)},e.prototype.handleChange=function(e){var n=e.data,t=e.$event;if(n.hex){if(o.isValidHex(n.hex)){var l=new i.TinyColor(n.hex);this.onChange.emit({data:{hex:this.disableAlpha?l.toHex():l.toHex8(),source:"hex"},$event:t})}}else if(n.r||n.g||n.b)this.onChange.emit({data:{r:n.r||this.rgb.r,g:n.g||this.rgb.g,b:n.b||this.rgb.b,source:"rgb"},$event:t});else if(n.a)n.a<0?n.a=0:n.a>1&&(n.a=1),this.disableAlpha&&(n.a=1),this.onChange.emit({data:{h:this.hsl.h,s:this.hsl.s,l:this.hsl.l,a:Math.round(100*n.a)/100,source:"rgb"},$event:t});else if(n.h||n.s||n.l){var a=n.s&&n.s.replace("%",""),r=n.l&&n.l.replace("%","");this.onChange.emit({data:{h:n.h||this.hsl.h,s:Number(a||this.hsl.s),l:Number(r||this.hsl.l),source:"hsl"},$event:t})}},a([t.Input()],e.prototype,"disableAlpha",void 0),a([t.Input()],e.prototype,"hsl",void 0),a([t.Input()],e.prototype,"rgb",void 0),a([t.Input()],e.prototype,"hex",void 0),a([t.Output()],e.prototype,"onChange",void 0),e=a([t.Component({selector:"color-chrome-fields",template:'\n    <div class="chrome-wrap">\n      <div class="chrome-fields">\n        <ng-template [ngIf]="view === \'hex\'">\n          <div class="chrome-field">\n            <color-editable-input\n              [style]="{ input: input, label: label }"\n              label="hex" [value]="hex"\n              (onChange)="handleChange($event)"\n            ></color-editable-input>\n          </div>\n        </ng-template>\n        <ng-template [ngIf]="view === \'rgb\'">\n          <div class="chrome-field">\n            <color-editable-input\n              [style]="{ input: input, label: label }"\n              label="r" [value]="rgb.r"\n              (onChange)="handleChange($event)"\n            ></color-editable-input>\n          </div>\n          <div class="chrome-field">\n            <color-editable-input\n              [style]="{ input: input, label: label }"\n              label="g" [value]="rgb.g"\n              (onChange)="handleChange($event)"\n            ></color-editable-input>\n          </div>\n          <div class="chrome-field">\n            <color-editable-input\n              [style]="{ input: input, label: label }"\n              label="b" [value]="rgb.b"\n              (onChange)="handleChange($event)"\n            ></color-editable-input>\n          </div>\n          <div class="chrome-field">\n            <color-editable-input *ngIf="!disableAlpha"\n              [style]="{ input: input, label: label }"\n              label="a" [value]="rgb.a"\n              [arrowOffset]="0.01"\n              (onChange)="handleChange($event)"\n            ></color-editable-input>\n          </div>\n        </ng-template>\n        <ng-template [ngIf]="view === \'hsl\'">\n          <div class="chrome-field">\n            <color-editable-input\n              [style]="{ input: input, label: label }"\n              label="h"\n              [value]="round(hsl.h)"\n              (onChange)="handleChange($event)"\n            ></color-editable-input>\n          </div>\n          <div class="chrome-field">\n            <color-editable-input\n              [style]="{ input: input, label: label }"\n              label="s" [value]="round(hsl.s * 100) + \'%\'"\n              (onChange)="handleChange($event)"\n            ></color-editable-input>\n          </div>\n          <div class="chrome-field">\n            <color-editable-input\n              [style]="{ input: input, label: label }"\n              label="l" [value]="round(hsl.l * 100) + \'%\'"\n              (onChange)="handleChange($event)"\n            ></color-editable-input>\n          </div>\n          <div class="chrome-field">\n            <color-editable-input *ngIf="!disableAlpha"\n              [style]="{ input: input, label: label }"\n              label="a" [value]="hsl.a"\n              [arrowOffset]="0.01"\n              (onChange)="handleChange($event)"\n            ></color-editable-input>\n          </div>\n        </ng-template>\n      </div>\n\n      <div class="chrome-toggle">\n        <div class="chrome-icon" (click)="toggleViews()" #icon>\n          <svg class="chrome-toggle-svg" viewBox="0 0 24 24">\n            <path #iconUp fill="#333"\n              d="M12,5.83L15.17,9L16.58,7.59L12,3L7.41,7.59L8.83,9L12,5.83Z"\n            />\n            <path #iconDown fill="#333"\n              d="M12,18.17L8.83,15L7.42,16.41L12,21L16.59,16.41L15.17,15Z"\n            />\n          </svg>\n        </div>\n      </div>\n    </div>\n  ',changeDetection:t.ChangeDetectionStrategy.OnPush,preserveWhitespaces:!1,styles:["\n      .chrome-wrap {\n        padding-top: 16px;\n        display: flex;\n      }\n      .chrome-fields {\n        flex: 1;\n        display: flex;\n        margin-left: -6px;\n      }\n      .chrome-field {\n        padding-left: 6px;\n        width: 100%;\n      }\n      .chrome-toggle {\n        width: 32px;\n        text-align: right;\n        position: relative;\n      }\n      .chrome-icon {\n        margin-right: -4px;\n        margin-top: 12px;\n        cursor: pointer;\n        position: relative;\n      }\n      .chrome-toggle-svg {\n        width: 24px;\n        height: 24px;\n        border: 1px transparent solid;\n        border-radius: 5px;\n      }\n      .chrome-toggle-svg:hover {\n        background: #eee;\n      }\n    "]})],e)}(),h=function(e){function n(){var n=e.call(this)||this;return n.disableAlpha=!1,n.circle={width:"12px",height:"12px",borderRadius:"6px",boxShadow:"rgb(255, 255, 255) 0px 0px 0px 1px inset",transform:"translate(-6px, -8px)"},n.pointer={width:"12px",height:"12px",borderRadius:"6px",transform:"translate(-6px, -2px)",backgroundColor:"rgb(248, 248, 248)",boxShadow:"0 1px 4px 0 rgba(0, 0, 0, 0.37)"},n}return function(e,n){function t(){this.constructor=e}l(e,n),e.prototype=null===n?Object.create(n):(t.prototype=n.prototype,new t)}(n,e),n.prototype.afterValidChange=function(){var e=this.disableAlpha?1:this.rgb.a;this.activeBackground="rgba("+this.rgb.r+", "+this.rgb.g+", "+this.rgb.b+", "+e+")"},n.prototype.handleValueChange=function(e){var n=e.data,t=e.$event;this.handleChange(n,t)},a([t.Input()],n.prototype,"disableAlpha",void 0),n=a([t.Component({selector:"color-chrome",template:'\n  <div class="chrome-picker {{ className }}">\n    <div class="saturation">\n      <color-saturation\n        [hsl]="hsl"\n        [hsv]="hsv"\n        [circle]="circle"\n        (onChange)="handleValueChange($event)"\n      ></color-saturation>\n    </div>\n    <div class="chrome-body">\n      <div class="chrome-controls">\n        <div class="chrome-color">\n          <div class="chrome-swatch">\n            <div class="chrome-active"\n              [style.background]="activeBackground"\n            ></div>\n            <color-checkboard></color-checkboard>\n          </div>\n        </div>\n        <div class="chrome-toggles">\n          <div class="chrome-hue">\n            <color-hue\n              [radius]="2"\n              [hsl]="hsl"\n              [pointer]="pointer"\n              (onChange)="handleValueChange($event)"\n            ></color-hue>\n          </div>\n          <div class="chrome-alpha" *ngIf="!disableAlpha">\n            <color-alpha\n              [radius]="2" [rgb]="rgb" [hsl]="hsl"\n              [pointer]="pointer" (onChange)="handleValueChange($event)"\n            ></color-alpha>\n          </div>\n        </div>\n      </div>\n      <color-chrome-fields\n        [rgb]="rgb" [hsl]="hsl" [hex]="hex"\n        [disableAlpha]="disableAlpha"\n        (onChange)="handleValueChange($event)"\n      ></color-chrome-fields>\n    </div>\n  </div>\n  ',changeDetection:t.ChangeDetectionStrategy.OnPush,preserveWhitespaces:!1,styles:["\n      .chrome-picker {\n        background: #fff;\n        border-radius: 2px;\n        box-shadow: 0 0 2px rgba(0, 0, 0, 0.3), 0 4px 8px rgba(0, 0, 0, 0.3);\n        box-sizing: initial;\n        width: 225px;\n        font-family: 'Menlo';\n      }\n      .chrome-controls {\n        display: flex;\n      }\n      .chrome-color {\n        width: 42px;\n      }\n      .chrome-body {\n        padding: 14px 14px 12px;\n      }\n      .chrome-active {\n        position: absolute;\n        top: 0;\n        bottom: 0;\n        left: 0;\n        right: 0;\n        border-radius: 20px;\n        box-shadow: inset 0 0 0 1px rgba(0, 0, 0, 0.1);\n        z-index: 2;\n      }\n      .chrome-swatch {\n        width: 28px;\n        height: 28px;\n        border-radius: 15px;\n        position: relative;\n        overflow: hidden;\n      }\n      .saturation {\n        width: 100%;\n        padding-bottom: 55%;\n        position: relative;\n        border-radius: 2px 2px 0 0;\n        overflow: hidden;\n      }\n      .chrome-toggles {\n        flex: 1;\n      }\n      .chrome-hue {\n        height: 10px;\n        position: relative;\n        margin-bottom: 8px;\n      }\n      .chrome-alpha {\n        height: 10px;\n        position: relative;\n      }\n    "]})],n)}(o.ColorWrap),s=function(){function e(){}return e=a([t.NgModule({declarations:[h,r],exports:[h,r],imports:[n.CommonModule,o.AlphaModule,o.CheckboardModule,o.EditableInputModule,o.HueModule,o.SaturationModule]})],e)}();e.ChromeComponent=h,e.ColorChromeModule=s,e.ɵa=r,Object.defineProperty(e,"__esModule",{value:!0})}));
//# sourceMappingURL=ngx-color-chrome.umd.min.js.map