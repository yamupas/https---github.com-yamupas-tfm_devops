import { __decorate, __extends } from "tslib";
import { CommonModule } from '@angular/common';
import { ChangeDetectionStrategy, Component, Input, NgModule } from '@angular/core';
import { ColorWrap, EditableInputModule, SwatchModule, isValidHex } from 'ngx-color';
var TwitterComponent = /** @class */ (function (_super) {
    __extends(TwitterComponent, _super);
    function TwitterComponent() {
        var _this = _super.call(this) || this;
        /** Pixel value for picker width */
        _this.width = 276;
        /** Color squares to display */
        _this.colors = [
            '#FF6900',
            '#FCB900',
            '#7BDCB5',
            '#00D084',
            '#8ED1FC',
            '#0693E3',
            '#ABB8C3',
            '#EB144C',
            '#F78DA7',
            '#9900EF',
        ];
        _this.triangle = 'top-left';
        _this.swatchStyle = {
            width: '30px',
            height: '30px',
            borderRadius: '4px',
            fontSize: '0',
        };
        _this.input = {
            borderRadius: '4px',
            borderBottomLeftRadius: '0',
            borderTopLeftRadius: '0',
            border: '1px solid #e6ecf0',
            boxSizing: 'border-box',
            display: 'inline',
            fontSize: '14px',
            height: '30px',
            padding: '0',
            paddingLeft: '6px',
            width: '100%',
            color: '#657786',
        };
        return _this;
    }
    TwitterComponent.prototype.focus = function (color) {
        return { boxShadow: "0 0 4px " + color };
    };
    TwitterComponent.prototype.handleBlockChange = function (_a) {
        var hex = _a.hex, $event = _a.$event;
        if (isValidHex(hex)) {
            // this.hex = hex;
            this.handleChange({ hex: hex, source: 'hex' }, $event);
        }
    };
    TwitterComponent.prototype.handleValueChange = function (_a) {
        var data = _a.data, $event = _a.$event;
        this.handleBlockChange({ hex: data, $event: $event });
    };
    __decorate([
        Input()
    ], TwitterComponent.prototype, "width", void 0);
    __decorate([
        Input()
    ], TwitterComponent.prototype, "colors", void 0);
    __decorate([
        Input()
    ], TwitterComponent.prototype, "triangle", void 0);
    TwitterComponent = __decorate([
        Component({
            selector: 'color-twitter',
            template: "\n  <div class=\"twitter-picker {{ triangle }}-triangle {{ className }}\" [style.width.px]=\"width\">\n    <div class=\"triangleShadow\"></div>\n    <div class=\"triangle\"></div>\n    <div class=\"twitter-body\">\n      <div class=\"twitter-swatch\" *ngFor=\"let color of colors\">\n        <color-swatch\n          [color]=\"color\"\n          [style]=\"swatchStyle\"\n          [focusStyle]=\"focus(color)\"\n          (onClick)=\"handleBlockChange($event)\"\n          (onHover)=\"onSwatchHover.emit($event)\"\n        ></color-swatch>\n      </div>\n      <div class=\"twitter-hash\">\n        <div>#</div>\n      </div>\n      <div class=\"twitter-input\">\n        <color-editable-input\n          [style]=\"{ input: input }\"\n          [value]=\"hex.replace('#', '')\"\n          (onChange)=\"handleValueChange($event)\"\n        ></color-editable-input>\n      </div>\n    </div>\n  </div>\n  ",
            changeDetection: ChangeDetectionStrategy.OnPush,
            preserveWhitespaces: false,
            styles: ["\n    .twitter-picker {\n      background: rgb(255, 255, 255);\n      border: 0px solid rgba(0, 0, 0, 0.25);\n      box-shadow: rgba(0, 0, 0, 0.25) 0px 1px 4px;\n      border-radius: 4px;\n      position: relative;\n      box-sizing: border-box;\n    }\n    .triangleShadow {\n      width: 0px;\n      height: 0px;\n      border-style: solid;\n      border-width: 0px 9px 10px;\n      border-color: transparent transparent rgba(0, 0, 0, 0.1);\n      position: absolute;\n    }\n    .triangle {\n      width: 0px;\n      height: 0px;\n      border-style: solid;\n      border-width: 0px 9px 10px;\n      border-color: transparent transparent rgb(255, 255, 255);\n      position: absolute;\n    }\n    .hide-triangle > .triangle {\n      display: none;\n    }\n    .hide-triangle > .triangleShadow {\n      display: none;\n    }\n    .top-left-triangle > .triangle {\n      top: -10px;\n      left: 12px;\n    }\n    .top-left-triangle > .triangleShadow {\n      top: -11px;\n      left: 12px;\n    }\n    .top-right-triangle > .triangle {\n      top: -10px;\n      right: 12px;\n    }\n    .top-right-triangle > .triangleShadow {\n      top: -11px;\n      right: 12px;\n    }\n    .twitter-body {\n      padding: 15px 9px 9px 15px;\n    }\n    .twitter-swatch {\n      width: 30px;\n      height: 30px;\n      display: inline-block;\n      margin: 0 6px 0 0;\n    }\n    .twitter-hash {\n      background: rgb(240, 240, 240);\n      height: 30px;\n      width: 30px;\n      border-radius: 4px 0px 0px 4px;\n      color: rgb(152, 161, 164);\n      margin-left: -3px;\n      display: inline-block;\n\n    }\n    .twitter-hash > div {\n      position: absolute;\n      align-items: center;\n      justify-content: center;\n      height: 30px;\n      width: 30px;\n      display: flex;\n    }\n    .twitter-input {\n      position: relative;\n      display: inline-block;\n      margin-top: -6px;\n      font-size: 10px;\n      height: 27px;\n      padding: 0;\n      position: relative;\n      top: 6px;\n      vertical-align: top;\n      width: 108px;\n      margin-left: -4px;\n    }\n  "]
        })
    ], TwitterComponent);
    return TwitterComponent;
}(ColorWrap));
export { TwitterComponent };
var ColorTwitterModule = /** @class */ (function () {
    function ColorTwitterModule() {
    }
    ColorTwitterModule = __decorate([
        NgModule({
            declarations: [TwitterComponent],
            exports: [TwitterComponent],
            imports: [CommonModule, SwatchModule, EditableInputModule],
        })
    ], ColorTwitterModule);
    return ColorTwitterModule;
}());
export { ColorTwitterModule };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHdpdHRlci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtY29sb3IvdHdpdHRlci8iLCJzb3VyY2VzIjpbInR3aXR0ZXIuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDL0MsT0FBTyxFQUFFLHVCQUF1QixFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRXBGLE9BQU8sRUFBRSxTQUFTLEVBQUUsbUJBQW1CLEVBQUUsWUFBWSxFQUFFLFVBQVUsRUFBRSxNQUFNLFdBQVcsQ0FBQztBQTRIckY7SUFBc0Msb0NBQVM7SUF1QzdDO1FBQUEsWUFDRSxpQkFBTyxTQUNSO1FBeENELG1DQUFtQztRQUMxQixXQUFLLEdBQW9CLEdBQUcsQ0FBQztRQUN0QywrQkFBK0I7UUFDdEIsWUFBTSxHQUFHO1lBQ2hCLFNBQVM7WUFDVCxTQUFTO1lBQ1QsU0FBUztZQUNULFNBQVM7WUFDVCxTQUFTO1lBQ1QsU0FBUztZQUNULFNBQVM7WUFDVCxTQUFTO1lBQ1QsU0FBUztZQUNULFNBQVM7U0FDVixDQUFDO1FBQ08sY0FBUSxHQUF1RCxVQUFVLENBQUM7UUFFbkYsaUJBQVcsR0FBNEI7WUFDckMsS0FBSyxFQUFFLE1BQU07WUFDYixNQUFNLEVBQUUsTUFBTTtZQUNkLFlBQVksRUFBRSxLQUFLO1lBQ25CLFFBQVEsRUFBRSxHQUFHO1NBQ2QsQ0FBQztRQUNGLFdBQUssR0FBNEI7WUFDL0IsWUFBWSxFQUFFLEtBQUs7WUFDbkIsc0JBQXNCLEVBQUUsR0FBRztZQUMzQixtQkFBbUIsRUFBRSxHQUFHO1lBQ3hCLE1BQU0sRUFBRSxtQkFBbUI7WUFDM0IsU0FBUyxFQUFFLFlBQVk7WUFDdkIsT0FBTyxFQUFFLFFBQVE7WUFDakIsUUFBUSxFQUFFLE1BQU07WUFDaEIsTUFBTSxFQUFFLE1BQU07WUFDZCxPQUFPLEVBQUUsR0FBRztZQUNaLFdBQVcsRUFBRSxLQUFLO1lBQ2xCLEtBQUssRUFBRSxNQUFNO1lBQ2IsS0FBSyxFQUFFLFNBQVM7U0FDakIsQ0FBQzs7SUFJRixDQUFDO0lBRUQsZ0NBQUssR0FBTCxVQUFNLEtBQWE7UUFDakIsT0FBTyxFQUFFLFNBQVMsRUFBRSxhQUFXLEtBQU8sRUFBRSxDQUFDO0lBQzNDLENBQUM7SUFFRCw0Q0FBaUIsR0FBakIsVUFBa0IsRUFBZTtZQUFiLFlBQUcsRUFBRSxrQkFBTTtRQUM3QixJQUFJLFVBQVUsQ0FBQyxHQUFHLENBQUMsRUFBRTtZQUNuQixrQkFBa0I7WUFDbEIsSUFBSSxDQUFDLFlBQVksQ0FBQyxFQUFFLEdBQUcsS0FBQSxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsRUFBRSxNQUFNLENBQUMsQ0FBQztTQUNuRDtJQUNILENBQUM7SUFFRCw0Q0FBaUIsR0FBakIsVUFBa0IsRUFBZ0I7WUFBZCxjQUFJLEVBQUUsa0JBQU07UUFDOUIsSUFBSSxDQUFDLGlCQUFpQixDQUFDLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxNQUFNLFFBQUEsRUFBRSxDQUFDLENBQUM7SUFDaEQsQ0FBQztJQXREUTtRQUFSLEtBQUssRUFBRTttREFBOEI7SUFFN0I7UUFBUixLQUFLLEVBQUU7b0RBV047SUFDTztRQUFSLEtBQUssRUFBRTtzREFBMkU7SUFoQnhFLGdCQUFnQjtRQTFINUIsU0FBUyxDQUFDO1lBQ1QsUUFBUSxFQUFFLGVBQWU7WUFDekIsUUFBUSxFQUFFLHk0QkEwQlQ7WUEyRkQsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07WUFDL0MsbUJBQW1CLEVBQUUsS0FBSztxQkExRnhCLHVpRUF1RkQ7U0FJRixDQUFDO09BQ1csZ0JBQWdCLENBeUQ1QjtJQUFELHVCQUFDO0NBQUEsQUF6REQsQ0FBc0MsU0FBUyxHQXlEOUM7U0F6RFksZ0JBQWdCO0FBZ0U3QjtJQUFBO0lBQWlDLENBQUM7SUFBckIsa0JBQWtCO1FBTDlCLFFBQVEsQ0FBQztZQUNSLFlBQVksRUFBRSxDQUFDLGdCQUFnQixDQUFDO1lBQ2hDLE9BQU8sRUFBRSxDQUFDLGdCQUFnQixDQUFDO1lBQzNCLE9BQU8sRUFBRSxDQUFDLFlBQVksRUFBRSxZQUFZLEVBQUUsbUJBQW1CLENBQUM7U0FDM0QsQ0FBQztPQUNXLGtCQUFrQixDQUFHO0lBQUQseUJBQUM7Q0FBQSxBQUFsQyxJQUFrQztTQUFyQixrQkFBa0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21tb25Nb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHsgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIENvbXBvbmVudCwgSW5wdXQsIE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IENvbG9yV3JhcCwgRWRpdGFibGVJbnB1dE1vZHVsZSwgU3dhdGNoTW9kdWxlLCBpc1ZhbGlkSGV4IH0gZnJvbSAnbmd4LWNvbG9yJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnY29sb3ItdHdpdHRlcicsXG4gIHRlbXBsYXRlOiBgXG4gIDxkaXYgY2xhc3M9XCJ0d2l0dGVyLXBpY2tlciB7eyB0cmlhbmdsZSB9fS10cmlhbmdsZSB7eyBjbGFzc05hbWUgfX1cIiBbc3R5bGUud2lkdGgucHhdPVwid2lkdGhcIj5cbiAgICA8ZGl2IGNsYXNzPVwidHJpYW5nbGVTaGFkb3dcIj48L2Rpdj5cbiAgICA8ZGl2IGNsYXNzPVwidHJpYW5nbGVcIj48L2Rpdj5cbiAgICA8ZGl2IGNsYXNzPVwidHdpdHRlci1ib2R5XCI+XG4gICAgICA8ZGl2IGNsYXNzPVwidHdpdHRlci1zd2F0Y2hcIiAqbmdGb3I9XCJsZXQgY29sb3Igb2YgY29sb3JzXCI+XG4gICAgICAgIDxjb2xvci1zd2F0Y2hcbiAgICAgICAgICBbY29sb3JdPVwiY29sb3JcIlxuICAgICAgICAgIFtzdHlsZV09XCJzd2F0Y2hTdHlsZVwiXG4gICAgICAgICAgW2ZvY3VzU3R5bGVdPVwiZm9jdXMoY29sb3IpXCJcbiAgICAgICAgICAob25DbGljayk9XCJoYW5kbGVCbG9ja0NoYW5nZSgkZXZlbnQpXCJcbiAgICAgICAgICAob25Ib3Zlcik9XCJvblN3YXRjaEhvdmVyLmVtaXQoJGV2ZW50KVwiXG4gICAgICAgID48L2NvbG9yLXN3YXRjaD5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjbGFzcz1cInR3aXR0ZXItaGFzaFwiPlxuICAgICAgICA8ZGl2PiM8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjbGFzcz1cInR3aXR0ZXItaW5wdXRcIj5cbiAgICAgICAgPGNvbG9yLWVkaXRhYmxlLWlucHV0XG4gICAgICAgICAgW3N0eWxlXT1cInsgaW5wdXQ6IGlucHV0IH1cIlxuICAgICAgICAgIFt2YWx1ZV09XCJoZXgucmVwbGFjZSgnIycsICcnKVwiXG4gICAgICAgICAgKG9uQ2hhbmdlKT1cImhhbmRsZVZhbHVlQ2hhbmdlKCRldmVudClcIlxuICAgICAgICA+PC9jb2xvci1lZGl0YWJsZS1pbnB1dD5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICA8L2Rpdj5cbiAgYCxcbiAgc3R5bGVzOiBbXG4gICAgYFxuICAgIC50d2l0dGVyLXBpY2tlciB7XG4gICAgICBiYWNrZ3JvdW5kOiByZ2IoMjU1LCAyNTUsIDI1NSk7XG4gICAgICBib3JkZXI6IDBweCBzb2xpZCByZ2JhKDAsIDAsIDAsIDAuMjUpO1xuICAgICAgYm94LXNoYWRvdzogcmdiYSgwLCAwLCAwLCAwLjI1KSAwcHggMXB4IDRweDtcbiAgICAgIGJvcmRlci1yYWRpdXM6IDRweDtcbiAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gICAgfVxuICAgIC50cmlhbmdsZVNoYWRvdyB7XG4gICAgICB3aWR0aDogMHB4O1xuICAgICAgaGVpZ2h0OiAwcHg7XG4gICAgICBib3JkZXItc3R5bGU6IHNvbGlkO1xuICAgICAgYm9yZGVyLXdpZHRoOiAwcHggOXB4IDEwcHg7XG4gICAgICBib3JkZXItY29sb3I6IHRyYW5zcGFyZW50IHRyYW5zcGFyZW50IHJnYmEoMCwgMCwgMCwgMC4xKTtcbiAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICB9XG4gICAgLnRyaWFuZ2xlIHtcbiAgICAgIHdpZHRoOiAwcHg7XG4gICAgICBoZWlnaHQ6IDBweDtcbiAgICAgIGJvcmRlci1zdHlsZTogc29saWQ7XG4gICAgICBib3JkZXItd2lkdGg6IDBweCA5cHggMTBweDtcbiAgICAgIGJvcmRlci1jb2xvcjogdHJhbnNwYXJlbnQgdHJhbnNwYXJlbnQgcmdiKDI1NSwgMjU1LCAyNTUpO1xuICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIH1cbiAgICAuaGlkZS10cmlhbmdsZSA+IC50cmlhbmdsZSB7XG4gICAgICBkaXNwbGF5OiBub25lO1xuICAgIH1cbiAgICAuaGlkZS10cmlhbmdsZSA+IC50cmlhbmdsZVNoYWRvdyB7XG4gICAgICBkaXNwbGF5OiBub25lO1xuICAgIH1cbiAgICAudG9wLWxlZnQtdHJpYW5nbGUgPiAudHJpYW5nbGUge1xuICAgICAgdG9wOiAtMTBweDtcbiAgICAgIGxlZnQ6IDEycHg7XG4gICAgfVxuICAgIC50b3AtbGVmdC10cmlhbmdsZSA+IC50cmlhbmdsZVNoYWRvdyB7XG4gICAgICB0b3A6IC0xMXB4O1xuICAgICAgbGVmdDogMTJweDtcbiAgICB9XG4gICAgLnRvcC1yaWdodC10cmlhbmdsZSA+IC50cmlhbmdsZSB7XG4gICAgICB0b3A6IC0xMHB4O1xuICAgICAgcmlnaHQ6IDEycHg7XG4gICAgfVxuICAgIC50b3AtcmlnaHQtdHJpYW5nbGUgPiAudHJpYW5nbGVTaGFkb3cge1xuICAgICAgdG9wOiAtMTFweDtcbiAgICAgIHJpZ2h0OiAxMnB4O1xuICAgIH1cbiAgICAudHdpdHRlci1ib2R5IHtcbiAgICAgIHBhZGRpbmc6IDE1cHggOXB4IDlweCAxNXB4O1xuICAgIH1cbiAgICAudHdpdHRlci1zd2F0Y2gge1xuICAgICAgd2lkdGg6IDMwcHg7XG4gICAgICBoZWlnaHQ6IDMwcHg7XG4gICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gICAgICBtYXJnaW46IDAgNnB4IDAgMDtcbiAgICB9XG4gICAgLnR3aXR0ZXItaGFzaCB7XG4gICAgICBiYWNrZ3JvdW5kOiByZ2IoMjQwLCAyNDAsIDI0MCk7XG4gICAgICBoZWlnaHQ6IDMwcHg7XG4gICAgICB3aWR0aDogMzBweDtcbiAgICAgIGJvcmRlci1yYWRpdXM6IDRweCAwcHggMHB4IDRweDtcbiAgICAgIGNvbG9yOiByZ2IoMTUyLCAxNjEsIDE2NCk7XG4gICAgICBtYXJnaW4tbGVmdDogLTNweDtcbiAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcblxuICAgIH1cbiAgICAudHdpdHRlci1oYXNoID4gZGl2IHtcbiAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgICAgIGhlaWdodDogMzBweDtcbiAgICAgIHdpZHRoOiAzMHB4O1xuICAgICAgZGlzcGxheTogZmxleDtcbiAgICB9XG4gICAgLnR3aXR0ZXItaW5wdXQge1xuICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICAgICAgbWFyZ2luLXRvcDogLTZweDtcbiAgICAgIGZvbnQtc2l6ZTogMTBweDtcbiAgICAgIGhlaWdodDogMjdweDtcbiAgICAgIHBhZGRpbmc6IDA7XG4gICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgICB0b3A6IDZweDtcbiAgICAgIHZlcnRpY2FsLWFsaWduOiB0b3A7XG4gICAgICB3aWR0aDogMTA4cHg7XG4gICAgICBtYXJnaW4tbGVmdDogLTRweDtcbiAgICB9XG4gIGAsXG4gIF0sXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICBwcmVzZXJ2ZVdoaXRlc3BhY2VzOiBmYWxzZSxcbn0pXG5leHBvcnQgY2xhc3MgVHdpdHRlckNvbXBvbmVudCBleHRlbmRzIENvbG9yV3JhcCB7XG4gIC8qKiBQaXhlbCB2YWx1ZSBmb3IgcGlja2VyIHdpZHRoICovXG4gIEBJbnB1dCgpIHdpZHRoOiBzdHJpbmcgfCBudW1iZXIgPSAyNzY7XG4gIC8qKiBDb2xvciBzcXVhcmVzIHRvIGRpc3BsYXkgKi9cbiAgQElucHV0KCkgY29sb3JzID0gW1xuICAgICcjRkY2OTAwJyxcbiAgICAnI0ZDQjkwMCcsXG4gICAgJyM3QkRDQjUnLFxuICAgICcjMDBEMDg0JyxcbiAgICAnIzhFRDFGQycsXG4gICAgJyMwNjkzRTMnLFxuICAgICcjQUJCOEMzJyxcbiAgICAnI0VCMTQ0QycsXG4gICAgJyNGNzhEQTcnLFxuICAgICcjOTkwMEVGJyxcbiAgXTtcbiAgQElucHV0KCkgdHJpYW5nbGU6ICdoaWRlJyB8ICd0b3AtbGVmdCcgfCAndG9wLXJpZ2h0JyB8ICdib3R0b20tcmlnaHQnID0gJ3RvcC1sZWZ0JztcblxuICBzd2F0Y2hTdHlsZToge1trZXk6IHN0cmluZ106IHN0cmluZ30gPSB7XG4gICAgd2lkdGg6ICczMHB4JyxcbiAgICBoZWlnaHQ6ICczMHB4JyxcbiAgICBib3JkZXJSYWRpdXM6ICc0cHgnLFxuICAgIGZvbnRTaXplOiAnMCcsXG4gIH07XG4gIGlucHV0OiB7W2tleTogc3RyaW5nXTogc3RyaW5nfSA9IHtcbiAgICBib3JkZXJSYWRpdXM6ICc0cHgnLFxuICAgIGJvcmRlckJvdHRvbUxlZnRSYWRpdXM6ICcwJyxcbiAgICBib3JkZXJUb3BMZWZ0UmFkaXVzOiAnMCcsXG4gICAgYm9yZGVyOiAnMXB4IHNvbGlkICNlNmVjZjAnLFxuICAgIGJveFNpemluZzogJ2JvcmRlci1ib3gnLFxuICAgIGRpc3BsYXk6ICdpbmxpbmUnLFxuICAgIGZvbnRTaXplOiAnMTRweCcsXG4gICAgaGVpZ2h0OiAnMzBweCcsXG4gICAgcGFkZGluZzogJzAnLFxuICAgIHBhZGRpbmdMZWZ0OiAnNnB4JyxcbiAgICB3aWR0aDogJzEwMCUnLFxuICAgIGNvbG9yOiAnIzY1Nzc4NicsXG4gIH07XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKTtcbiAgfVxuXG4gIGZvY3VzKGNvbG9yOiBzdHJpbmcpIHtcbiAgICByZXR1cm4geyBib3hTaGFkb3c6IGAwIDAgNHB4ICR7Y29sb3J9YCB9O1xuICB9XG5cbiAgaGFuZGxlQmxvY2tDaGFuZ2UoeyBoZXgsICRldmVudCB9KSB7XG4gICAgaWYgKGlzVmFsaWRIZXgoaGV4KSkge1xuICAgICAgLy8gdGhpcy5oZXggPSBoZXg7XG4gICAgICB0aGlzLmhhbmRsZUNoYW5nZSh7IGhleCwgc291cmNlOiAnaGV4JyB9LCAkZXZlbnQpO1xuICAgIH1cbiAgfVxuXG4gIGhhbmRsZVZhbHVlQ2hhbmdlKHsgZGF0YSwgJGV2ZW50IH0pIHtcbiAgICB0aGlzLmhhbmRsZUJsb2NrQ2hhbmdlKHsgaGV4OiBkYXRhLCAkZXZlbnQgfSk7XG4gIH1cbn1cblxuQE5nTW9kdWxlKHtcbiAgZGVjbGFyYXRpb25zOiBbVHdpdHRlckNvbXBvbmVudF0sXG4gIGV4cG9ydHM6IFtUd2l0dGVyQ29tcG9uZW50XSxcbiAgaW1wb3J0czogW0NvbW1vbk1vZHVsZSwgU3dhdGNoTW9kdWxlLCBFZGl0YWJsZUlucHV0TW9kdWxlXSxcbn0pXG5leHBvcnQgY2xhc3MgQ29sb3JUd2l0dGVyTW9kdWxlIHt9XG4iXX0=