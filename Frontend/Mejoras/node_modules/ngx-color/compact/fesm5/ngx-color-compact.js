import { __decorate, __extends } from 'tslib';
import { CommonModule } from '@angular/common';
import { EventEmitter, Input, Output, Component, ChangeDetectionStrategy, NgModule } from '@angular/core';
import { getContrastingColor, isValidHex, ColorWrap, EditableInputModule, SwatchModule, RaisedModule } from 'ngx-color';

var CompactColorComponent = /** @class */ (function () {
    function CompactColorComponent() {
        this.onClick = new EventEmitter();
        this.onSwatchHover = new EventEmitter();
        this.swatchStyle = {
            width: '15px',
            height: '15px',
            float: 'left',
            marginRight: '5px',
            marginBottom: '5px',
            position: 'relative',
            cursor: 'pointer',
        };
        this.swatchFocus = {};
        this.getContrastingColor = getContrastingColor;
    }
    CompactColorComponent.prototype.ngOnChanges = function () {
        this.swatchStyle.background = this.color;
        this.swatchFocus.boxShadow = "0 0 4px " + this.color;
        if (this.color.toLowerCase() === '#ffffff') {
            this.swatchStyle.boxShadow = 'inset 0 0 0 1px #ddd';
        }
    };
    CompactColorComponent.prototype.handleClick = function (_a) {
        var hex = _a.hex, $event = _a.$event;
        this.onClick.emit({ hex: hex, $event: $event });
    };
    __decorate([
        Input()
    ], CompactColorComponent.prototype, "color", void 0);
    __decorate([
        Input()
    ], CompactColorComponent.prototype, "active", void 0);
    __decorate([
        Output()
    ], CompactColorComponent.prototype, "onClick", void 0);
    __decorate([
        Output()
    ], CompactColorComponent.prototype, "onSwatchHover", void 0);
    CompactColorComponent = __decorate([
        Component({
            selector: 'color-compact-color',
            template: "\n  <div class=\"compact-color\">\n    <color-swatch class=\"swatch\"\n      [color]=\"color\" [style]=\"swatchStyle\"\n      [focusStyle]=\"swatchFocus\"\n      (onClick)=\"handleClick($event)\" (onHover)=\"onSwatchHover.emit($event)\"\n      >\n      <div class=\"compact-dot\"\n        [class.active]=\"active\" [style.background]=\"getContrastingColor(color)\"\n      ></div>\n    </color-swatch>\n  </div>\n  ",
            changeDetection: ChangeDetectionStrategy.OnPush,
            preserveWhitespaces: false,
            styles: ["\n  .compact-dot {\n    position: absolute;\n    top: 5px;\n    right: 5px;\n    bottom: 5px;\n    left: 5px;\n    border-radius: 50%;\n    opacity: 0;\n  }\n  .compact-dot.active {\n    opacity: 1;\n  }\n  "]
        })
    ], CompactColorComponent);
    return CompactColorComponent;
}());

var CompactFieldsComponent = /** @class */ (function () {
    function CompactFieldsComponent() {
        this.onChange = new EventEmitter();
        this.HEXWrap = {
            marginTop: '-3px',
            marginBottom: '-3px',
            // flex: '6 1 0%',
            position: 'relative',
        };
        this.HEXinput = {
            width: '80%',
            padding: '0px',
            paddingLeft: '20%',
            border: 'none',
            outline: 'none',
            background: 'none',
            fontSize: '12px',
            color: '#333',
            height: '16px',
        };
        this.HEXlabel = {
            display: 'none',
        };
        this.RGBwrap = {
            marginTop: '-3px',
            marginBottom: '-3px',
            // flex: '3 1 0%',
            position: 'relative',
        };
        this.RGBinput = {
            width: '80%',
            padding: '0px',
            paddingLeft: '30%',
            border: 'none',
            outline: 'none',
            background: 'none',
            fontSize: '12px',
            color: '#333',
            height: '16px',
        };
        this.RGBlabel = {
            position: 'absolute',
            top: '6px',
            left: '0px',
            'line-height': '16px',
            'text-transform': 'uppercase',
            fontSize: '12px',
            color: '#999',
        };
    }
    CompactFieldsComponent.prototype.handleChange = function (_a) {
        var data = _a.data, $event = _a.$event;
        if (data.hex) {
            if (isValidHex(data.hex)) {
                this.onChange.emit({
                    data: {
                        hex: data.hex,
                        source: 'hex',
                    },
                    $event: $event,
                });
            }
        }
        else {
            this.onChange.emit({
                data: {
                    r: data.r || this.rgb.r,
                    g: data.g || this.rgb.g,
                    b: data.b || this.rgb.b,
                    source: 'rgb',
                },
                $event: $event,
            });
        }
    };
    __decorate([
        Input()
    ], CompactFieldsComponent.prototype, "hex", void 0);
    __decorate([
        Input()
    ], CompactFieldsComponent.prototype, "rgb", void 0);
    __decorate([
        Output()
    ], CompactFieldsComponent.prototype, "onChange", void 0);
    CompactFieldsComponent = __decorate([
        Component({
            selector: 'color-compact-fields',
            template: "\n  <div class=\"compact-fields\">\n    <div class=\"compact-active\" [style.background]=\"hex\"></div>\n    <div style=\"flex: 6 1 0%;\">\n      <color-editable-input\n        [style]=\"{ wrap: HEXWrap, input: HEXinput, label: HEXlabel }\"\n        label=\"hex\"\n        [value]=\"hex\"\n        (onChange)=\"handleChange($event)\"\n      ></color-editable-input>\n    </div>\n    <div style=\"flex: 3 1 0%\">\n      <color-editable-input\n        [style]=\"{ wrap: RGBwrap, input: RGBinput, label: RGBlabel }\"\n        label=\"r\"\n        [value]=\"rgb.r\"\n        (onChange)=\"handleChange($event)\"\n      ></color-editable-input>\n    </div>\n    <div style=\"flex: 3 1 0%\">\n      <color-editable-input\n        [style]=\"{ wrap: RGBwrap, input: RGBinput, label: RGBlabel }\"\n        label=\"g\"\n        [value]=\"rgb.g\"\n        (onChange)=\"handleChange($event)\"\n      ></color-editable-input>\n    </div>\n    <div style=\"flex: 3 1 0%\">\n      <color-editable-input\n        [style]=\"{ wrap: RGBwrap, input: RGBinput, label: RGBlabel }\"\n        label=\"b\"\n        [value]=\"rgb.b\"\n        (onChange)=\"handleChange($event)\"\n      ></color-editable-input>\n    </div>\n  </div>\n  ",
            changeDetection: ChangeDetectionStrategy.OnPush,
            preserveWhitespaces: false,
            styles: ["\n  .compact-fields {\n    display: flex;\n    padding-bottom: 6px;\n    padding-right: 5px;\n    position: relative;\n  }\n  .compact-active {\n    position: absolute;\n    top: 6px;\n    left: 5px;\n    height: 9px;\n    width: 9px;\n  }\n  "]
        })
    ], CompactFieldsComponent);
    return CompactFieldsComponent;
}());

var CompactComponent = /** @class */ (function (_super) {
    __extends(CompactComponent, _super);
    function CompactComponent() {
        var _this = _super.call(this) || this;
        /** Color squares to display */
        _this.colors = [
            '#4D4D4D',
            '#999999',
            '#FFFFFF',
            '#F44E3B',
            '#FE9200',
            '#FCDC00',
            '#DBDF00',
            '#A4DD00',
            '#68CCCA',
            '#73D8FF',
            '#AEA1FF',
            '#FDA1FF',
            '#333333',
            '#808080',
            '#cccccc',
            '#D33115',
            '#E27300',
            '#FCC400',
            '#B0BC00',
            '#68BC00',
            '#16A5A5',
            '#009CE0',
            '#7B64FF',
            '#FA28FF',
            '#000000',
            '#666666',
            '#B3B3B3',
            '#9F0500',
            '#C45100',
            '#FB9E00',
            '#808900',
            '#194D33',
            '#0C797D',
            '#0062B1',
            '#653294',
            '#AB149E',
        ];
        _this.zDepth = 1;
        _this.radius = 1;
        _this.background = '#fff';
        return _this;
    }
    CompactComponent.prototype.handleBlockChange = function (_a) {
        var hex = _a.hex, $event = _a.$event;
        if (isValidHex(hex)) {
            this.handleChange({ hex: hex, source: 'hex' }, $event);
        }
    };
    CompactComponent.prototype.handleValueChange = function (_a) {
        var data = _a.data, $event = _a.$event;
        this.handleChange(data, $event);
    };
    __decorate([
        Input()
    ], CompactComponent.prototype, "colors", void 0);
    __decorate([
        Input()
    ], CompactComponent.prototype, "zDepth", void 0);
    __decorate([
        Input()
    ], CompactComponent.prototype, "radius", void 0);
    __decorate([
        Input()
    ], CompactComponent.prototype, "background", void 0);
    CompactComponent = __decorate([
        Component({
            selector: 'color-compact',
            template: "\n  <color-raised class=\"color-compact\" [zDepth]=\"zDepth\" [background]=\"background\" [radius]=\"radius\">\n    <div class=\"compact-picker {{ className }}\">\n      <div>\n        <color-compact-color\n          *ngFor=\"let color of colors\" [color]=\"color\"\n          [active]=\"color.toLowerCase() === hex.toLowerCase()\"\n          (onClick)=\"handleBlockChange($event)\"\n        ></color-compact-color>\n        <div class=\"compact-clear\"></div>\n      </div>\n      <color-compact-fields\n        [hex]=\"hex\"\n        [rgb]=\"rgb\"\n        (onChange)=\"handleValueChange($event)\"\n      ></color-compact-fields>\n    </div>\n  </color-raised>\n  ",
            changeDetection: ChangeDetectionStrategy.OnPush,
            preserveWhitespaces: false,
            styles: ["\n    .color-compact {\n      background: #f6f6f6;\n      radius: 4px;\n    }\n    .compact-picker {\n      padding-top: 5px;\n      padding-left: 5px;\n      box-sizing: border-box;\n      width: 245px;\n    }\n    .compact-clear {\n      clear: both;\n    }\n  "]
        })
    ], CompactComponent);
    return CompactComponent;
}(ColorWrap));
var ColorCompactModule = /** @class */ (function () {
    function ColorCompactModule() {
    }
    ColorCompactModule = __decorate([
        NgModule({
            declarations: [
                CompactComponent,
                CompactColorComponent,
                CompactFieldsComponent,
            ],
            exports: [CompactComponent, CompactColorComponent, CompactFieldsComponent],
            imports: [CommonModule, EditableInputModule, SwatchModule, RaisedModule],
        })
    ], ColorCompactModule);
    return ColorCompactModule;
}());

/**
 * Generated bundle index. Do not edit.
 */

export { ColorCompactModule, CompactComponent, CompactColorComponent as ɵa, CompactFieldsComponent as ɵb };
//# sourceMappingURL=ngx-color-compact.js.map
