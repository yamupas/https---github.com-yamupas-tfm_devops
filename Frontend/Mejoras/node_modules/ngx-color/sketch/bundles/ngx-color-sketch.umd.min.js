!function(e,n){"object"==typeof exports&&"undefined"!=typeof module?n(exports,require("@angular/common"),require("@angular/core"),require("ngx-color"),require("@ctrl/tinycolor")):"function"==typeof define&&define.amd?define("ngx-color/sketch",["exports","@angular/common","@angular/core","ngx-color","@ctrl/tinycolor"],n):n(((e=e||self)["ngx-color"]=e["ngx-color"]||{},e["ngx-color"].sketch={}),e.ng.common,e.ng.core,e["ngx-color"],e["@ctrl/tinycolor"])}(this,(function(e,n,t,o,l){"use strict";
/*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */var a=function(e,n){return(a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,n){e.__proto__=n}||function(e,n){for(var t in n)n.hasOwnProperty(t)&&(e[t]=n[t])})(e,n)};function i(e,n,t,o){var l,a=arguments.length,i=a<3?n:null===o?o=Object.getOwnPropertyDescriptor(n,t):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)i=Reflect.decorate(e,n,t,o);else for(var r=e.length-1;r>=0;r--)(l=e[r])&&(i=(a<3?l(i):a>3?l(n,t,i):l(n,t))||i);return a>3&&i&&Object.defineProperty(n,t,i),i}var r=function(){function e(){this.disableAlpha=!1,this.onChange=new t.EventEmitter,this.input={width:"100%",padding:"4px 10% 3px",border:"none",boxSizing:"border-box",boxShadow:"inset 0 0 0 1px #ccc",fontSize:"11px"},this.label={display:"block",textAlign:"center",fontSize:"11px",color:"#222",paddingTop:"3px",paddingBottom:"4px",textTransform:"capitalize"}}return e.prototype.round=function(e){return Math.round(e)},e.prototype.handleChange=function(e){var n=e.data,t=e.$event;if(n.hex){if(o.isValidHex(n.hex)){var a=new l.TinyColor(n.hex);this.onChange.emit({data:{hex:this.disableAlpha?a.toHex():a.toHex8(),source:"hex"},$event:t})}}else n.r||n.g||n.b?this.onChange.emit({data:{r:n.r||this.rgb.r,g:n.g||this.rgb.g,b:n.b||this.rgb.b,source:"rgb"},$event:t}):n.a?(n.a<0?n.a=0:n.a>100&&(n.a=100),n.a/=100,this.disableAlpha&&(n.a=1),this.onChange.emit({data:{h:this.hsl.h,s:this.hsl.s,l:this.hsl.l,a:Math.round(100*n.a)/100,source:"rgb"},$event:t})):(n.h||n.s||n.l)&&this.onChange.emit({data:{h:n.h||this.hsl.h,s:Number(n.s&&n.s||this.hsl.s),l:Number(n.l&&n.l||this.hsl.l),source:"hsl"},$event:t})},i([t.Input()],e.prototype,"hsl",void 0),i([t.Input()],e.prototype,"rgb",void 0),i([t.Input()],e.prototype,"hex",void 0),i([t.Input()],e.prototype,"disableAlpha",void 0),i([t.Output()],e.prototype,"onChange",void 0),e=i([t.Component({selector:"color-sketch-fields",template:'\n  <div class="sketch-fields">\n    <div class="sketch-double">\n      <color-editable-input\n        [style]="{ input: input, label: label }"\n        label="hex"\n        [value]="hex.replace(\'#\', \'\')"\n        (onChange)="handleChange($event)"\n      ></color-editable-input>\n    </div>\n    <div class="sketch-single">\n      <color-editable-input\n        [style]="{ input: input, label: label }"\n        label="r"\n        [value]="rgb.r"\n        (onChange)="handleChange($event)"\n        [dragLabel]="true"\n        [dragMax]="255"\n      ></color-editable-input>\n    </div>\n    <div class="sketch-single">\n      <color-editable-input\n        [style]="{ input: input, label: label }"\n        label="g"\n        [value]="rgb.g"\n        (onChange)="handleChange($event)"\n        [dragLabel]="true"\n        [dragMax]="255"\n      ></color-editable-input>\n    </div>\n    <div class="sketch-single">\n      <color-editable-input\n        [style]="{ input: input, label: label }"\n        label="b"\n        [value]="rgb.b"\n        (onChange)="handleChange($event)"\n        [dragLabel]="true"\n        [dragMax]="255"\n      ></color-editable-input>\n    </div>\n    <div class="sketch-alpha" *ngIf="disableAlpha === false">\n      <color-editable-input\n        [style]="{ input: input, label: label }"\n        label="a"\n        [value]="round(rgb.a * 100)"\n        (onChange)="handleChange($event)"\n        [dragLabel]="true"\n        [dragMax]="100"\n      ></color-editable-input>\n    </div>\n  </div>\n  ',changeDetection:t.ChangeDetectionStrategy.OnPush,preserveWhitespaces:!1,styles:["\n    .sketch-fields {\n      display: flex;\n      padding-top: 4px;\n    }\n    .sketch-double {\n      -webkit-box-flex: 2;\n      flex: 2 1 0%;\n    }\n    .sketch-single {\n      flex: 1 1 0%;\n      padding-left: 6px;\n    }\n    .sketch-alpha {\n      -webkit-box-flex: 1;\n      flex: 1 1 0%;\n      padding-left: 6px;\n    }\n  "]})],e)}(),s=function(){function e(){this.onClick=new t.EventEmitter,this.onSwatchHover=new t.EventEmitter,this.swatchStyle={borderRadius:"3px",boxShadow:"inset 0 0 0 1px rgba(0,0,0,.15)"}}return e.prototype.handleClick=function(e){var n=e.hex,t=e.$event;this.onClick.emit({hex:n,$event:t})},e.prototype.normalizeValue=function(e){return"string"==typeof e?{color:e}:e},e.prototype.focusStyle=function(e){return{boxShadow:"inset 0 0 0 1px rgba(0,0,0,.15), 0 0 4px "+this.normalizeValue(e).color}},i([t.Input()],e.prototype,"colors",void 0),i([t.Output()],e.prototype,"onClick",void 0),i([t.Output()],e.prototype,"onSwatchHover",void 0),e=i([t.Component({selector:"color-sketch-preset-colors",template:'\n  <div class="sketch-swatches">\n    <div class="sketch-wrap" *ngFor="let c of colors">\n      <color-swatch\n        [color]="normalizeValue(c).color"\n        [style]="swatchStyle"\n        [focusStyle]="focusStyle(c)"\n        (onClick)="handleClick($event)"\n        (onHover)="onSwatchHover.emit($event)"\n        class="swatch"\n      ></color-swatch>\n    </div>\n  </div>\n  ',changeDetection:t.ChangeDetectionStrategy.OnPush,preserveWhitespaces:!1,styles:["\n    .sketch-swatches {\n      position: relative;\n      display: flex;\n      flex-wrap: wrap;\n      margin: 0px -10px;\n      padding: 10px 0px 0px 10px;\n      border-top: 1px solid rgb(238, 238, 238);\n    }\n    .sketch-wrap {\n      width: 16px;\n      height: 16px;\n      margin: 0px 10px 10px 0px;\n    }\n  "]})],e)}(),h=function(e){function n(){var n=e.call(this)||this;return n.disableAlpha=!1,n.presetColors=["#D0021B","#F5A623","#F8E71C","#8B572A","#7ED321","#417505","#BD10E0","#9013FE","#4A90E2","#50E3C2","#B8E986","#000000","#4A4A4A","#9B9B9B","#FFFFFF"],n.width=200,n}return function(e,n){function t(){this.constructor=e}a(e,n),e.prototype=null===n?Object.create(n):(t.prototype=n.prototype,new t)}(n,e),n.prototype.afterValidChange=function(){var e=this.disableAlpha?1:this.rgb.a;this.activeBackground="rgba("+this.rgb.r+", "+this.rgb.g+", "+this.rgb.b+", "+e+")"},n.prototype.handleValueChange=function(e){var n=e.data,t=e.$event;this.handleChange(n,t)},n.prototype.handleBlockChange=function(e){var n=e.hex,t=e.$event;o.isValidHex(n)&&this.handleChange({hex:n,source:"hex"},t)},i([t.Input()],n.prototype,"disableAlpha",void 0),i([t.Input()],n.prototype,"presetColors",void 0),i([t.Input()],n.prototype,"width",void 0),n=i([t.Component({selector:"color-sketch",template:'\n  <div class="sketch-picker {{ className }}" [style.width]="width">\n    <div class="sketch-saturation">\n      <color-saturation [hsl]="hsl" [hsv]="hsv"\n        (onChange)="handleValueChange($event)"\n      >\n      </color-saturation>\n    </div>\n    <div class="sketch-controls">\n      <div class="sketch-sliders">\n        <div class="sketch-hue">\n          <color-hue [hsl]="hsl"\n            (onChange)="handleValueChange($event)"\n          ></color-hue>\n        </div>\n        <div class="sketch-alpha" *ngIf="disableAlpha === false">\n          <color-alpha\n            [radius]="2" [rgb]="rgb" [hsl]="hsl"\n            (onChange)="handleValueChange($event)"\n          ></color-alpha>\n        </div>\n      </div>\n      <div class="sketch-color">\n        <color-checkboard></color-checkboard>\n        <div class="sketch-active" [style.background]="activeBackground"></div>\n      </div>\n    </div>\n    <div class="sketch-fields-container">\n      <color-sketch-fields\n        [rgb]="rgb" [hsl]="hsl" [hex]="hex"\n        [disableAlpha]="disableAlpha"\n        (onChange)="handleValueChange($event)"\n      ></color-sketch-fields>\n    </div>\n    <div class="sketch-swatches-container" *ngIf="presetColors && presetColors.length">\n      <color-sketch-preset-colors\n        [colors]="presetColors"\n        (onClick)="handleBlockChange($event)"\n        (onSwatchHover)="onSwatchHover.emit($event)"\n      ></color-sketch-preset-colors>\n    </div>\n  </div>\n  ',changeDetection:t.ChangeDetectionStrategy.OnPush,preserveWhitespaces:!1,styles:["\n    .sketch-picker {\n      padding: 10px 10px 3px;\n      box-sizing: initial;\n      background: #fff;\n      border-radius: 4px;\n      box-shadow: 0 0 0 1px rgba(0,0,0,.15), 0 8px 16px rgba(0,0,0,.15);\n    }\n    .sketch-saturation {\n      width: 100%;\n      padding-bottom: 75%;\n      position: relative;\n      overflow: hidden;\n    }\n    .sketch-fields-container {\n      display: flex;\n    }\n    .sketch-swatches-container {\n      display: flex;\n    }\n    .sketch-controls {\n      display: flex;\n    }\n    .sketch-sliders {\n      padding: 4px 0px;\n      -webkit-box-flex: 1;\n      flex: 1 1 0%;\n    }\n    .sketch-hue {\n      position: relative;\n      height: 10px;\n      overflow: hidden;\n    }\n    .sketch-alpha {\n      position: relative;\n      height: 10px;\n      margin-top: 4px;\n      overflow: hidden;\n    }\n    .sketch-color {\n      width: 24px;\n      height: 24px;\n      position: relative;\n      margin-top: 4px;\n      margin-left: 4px;\n      border-radius: 3px;\n    }\n    .sketch-active {\n      position: absolute;\n      top: 0px;\n      right: 0px;\n      bottom: 0px;\n      left: 0px;\n      border-radius: 2px;\n      box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset, rgba(0, 0, 0, 0.25) 0px 0px 4px inset;\n    }\n  "]})],n)}(o.ColorWrap),c=function(){function e(){}return e=i([t.NgModule({declarations:[h,r,s],exports:[h,r,s],imports:[n.CommonModule,o.AlphaModule,o.CheckboardModule,o.EditableInputModule,o.HueModule,o.SaturationModule,o.SwatchModule]})],e)}();e.ColorSketchModule=c,e.SketchComponent=h,e.ɵa=r,e.ɵb=s,Object.defineProperty(e,"__esModule",{value:!0})}));
//# sourceMappingURL=ngx-color-sketch.umd.min.js.map