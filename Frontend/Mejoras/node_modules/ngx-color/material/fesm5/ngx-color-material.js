import { __extends, __decorate } from 'tslib';
import { CommonModule } from '@angular/common';
import { Input, Component, ChangeDetectionStrategy, NgModule } from '@angular/core';
import { isValidHex, ColorWrap, EditableInputModule, RaisedModule } from 'ngx-color';

var MaterialComponent = /** @class */ (function (_super) {
    __extends(MaterialComponent, _super);
    function MaterialComponent() {
        var _this = _super.call(this) || this;
        _this.HEXinput = {
            width: '100%',
            marginTop: '12px',
            fontSize: '15px',
            color: 'rgb(51, 51, 51)',
            padding: '0px',
            'border-width': '0px 0px 2px',
            outline: 'none',
            height: '30px',
        };
        _this.HEXlabel = {
            position: 'absolute',
            top: '0px',
            left: '0px',
            fontSize: '11px',
            color: 'rgb(153, 153, 153)',
            'text-transform': 'capitalize',
        };
        _this.RGBinput = {
            width: '100%',
            marginTop: '12px',
            fontSize: '15px',
            color: '#333',
            padding: '0px',
            border: '0px',
            'border-bottom': '1px solid #eee',
            outline: 'none',
            height: '30px',
        };
        _this.RGBlabel = {
            position: 'absolute',
            top: '0px',
            left: '0px',
            fontSize: '11px',
            color: '#999999',
            'text-transform': 'capitalize',
        };
        _this.zDepth = 1;
        _this.radius = 1;
        _this.background = '#fff';
        return _this;
    }
    MaterialComponent.prototype.handleValueChange = function (_a) {
        var data = _a.data, $event = _a.$event;
        this.handleChange(data, $event);
    };
    MaterialComponent.prototype.handleInputChange = function (_a) {
        var data = _a.data, $event = _a.$event;
        if (data.hex) {
            if (isValidHex(data.hex)) {
                this.handleValueChange({
                    data: {
                        hex: data.hex,
                        source: 'hex',
                    },
                    $event: $event,
                });
            }
        }
        else if (data.r || data.g || data.b) {
            this.handleValueChange({
                data: {
                    r: data.r || this.rgb.r,
                    g: data.g || this.rgb.g,
                    b: data.b || this.rgb.b,
                    source: 'rgb',
                },
                $event: $event,
            });
        }
    };
    MaterialComponent.prototype.afterValidChange = function () {
        this.HEXinput['border-bottom-color'] = this.hex;
    };
    __decorate([
        Input()
    ], MaterialComponent.prototype, "zDepth", void 0);
    __decorate([
        Input()
    ], MaterialComponent.prototype, "radius", void 0);
    __decorate([
        Input()
    ], MaterialComponent.prototype, "background", void 0);
    MaterialComponent = __decorate([
        Component({
            selector: 'color-material',
            template: "\n  <color-raised [zDepth]=\"zDepth\" [background]=\"background\" [radius]=\"radius\">\n    <div class=\"material-picker {{ className }}\">\n      <color-editable-input label=\"hex\" [value]=\"hex\"\n        (onChange)=\"handleValueChange($event)\"\n        [style]=\"{input: HEXinput, label: HEXlabel}\"\n      ></color-editable-input>\n      <div class=\"material-split\">\n        <div class=\"material-third\">\n          <color-editable-input label=\"r\" [value]=\"rgb.r\"\n            [style]=\"{ input: RGBinput, label: RGBlabel }\"\n            (onChange)=\"handleInputChange($event)\"\n          ></color-editable-input>\n        </div>\n        <div class=\"material-third\">\n          <color-editable-input label=\"g\" [value]=\"rgb.g\"\n            [style]=\"{ input: RGBinput, label: RGBlabel }\"\n            (onChange)=\"handleInputChange($event)\"\n          ></color-editable-input>\n        </div>\n        <div class=\"material-third\">\n          <color-editable-input label=\"b\" [value]=\"rgb.b\"\n            [style]=\"{ input: RGBinput, label: RGBlabel }\"\n            (onChange)=\"handleInputChange($event)\"\n          ></color-editable-input>\n        </div>\n      </div>\n    </div>\n  </color-raised>\n  ",
            changeDetection: ChangeDetectionStrategy.OnPush,
            preserveWhitespaces: false,
            styles: ["\n  .material-picker {\n    width: 130px;\n    height: 130px;\n    padding: 16px;\n    font-family: Roboto;\n  }\n  .material-split {\n    display: flex;\n    margin-right: -10px;\n    padding-top: 11px;\n  }\n  .material-third {\n    flex: 1 1 0%;\n    padding-right: 10px;\n  }\n  "]
        })
    ], MaterialComponent);
    return MaterialComponent;
}(ColorWrap));
var ColorMaterialModule = /** @class */ (function () {
    function ColorMaterialModule() {
    }
    ColorMaterialModule = __decorate([
        NgModule({
            exports: [MaterialComponent],
            declarations: [MaterialComponent],
            imports: [CommonModule, EditableInputModule, RaisedModule],
        })
    ], ColorMaterialModule);
    return ColorMaterialModule;
}());

/**
 * Generated bundle index. Do not edit.
 */

export { ColorMaterialModule, MaterialComponent };
//# sourceMappingURL=ngx-color-material.js.map
