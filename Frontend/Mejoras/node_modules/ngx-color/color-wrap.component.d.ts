import { EventEmitter, OnChanges, OnDestroy, OnInit } from '@angular/core';
import { Subscription } from 'rxjs';
import { Color, HSLA, HSVA, RGBA } from './helpers/color.interfaces';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';
export interface ColorEvent {
    $event: Event;
    color: Color;
}
export declare class ColorWrap implements OnInit, OnChanges, OnDestroy {
    className?: string;
    color: HSLA | HSVA | RGBA | string;
    onChange: EventEmitter<ColorEvent>;
    onChangeComplete: EventEmitter<ColorEvent>;
    onSwatchHover: EventEmitter<ColorEvent>;
    oldHue: number;
    hsl: HSLA;
    hsv: HSVA;
    rgb: RGBA;
    hex: string;
    source: string;
    currentColor: string;
    changes: Subscription;
    ngOnInit(): void;
    ngOnChanges(): void;
    ngOnDestroy(): void;
    setState(data: any): void;
    handleChange(data: any, $event: any): void;
    /** hook for components after a complete change */
    afterValidChange(): void;
    handleSwatchHover(data: any, $event: any): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ColorWrap, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<ColorWrap, "color-wrap", never, { "color": "color"; "className": "className"; }, { "onChange": "onChange"; "onChangeComplete": "onChangeComplete"; "onSwatchHover": "onSwatchHover"; }, never, never>;
}
export declare class ColorWrapModule {
    static ɵmod: ɵngcc0.ɵɵNgModuleDefWithMeta<ColorWrapModule, [typeof ColorWrap], [typeof ɵngcc1.CommonModule], [typeof ColorWrap]>;
    static ɵinj: ɵngcc0.ɵɵInjectorDef<ColorWrapModule>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sb3Itd3JhcC5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsiY29sb3Itd3JhcC5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7OztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRXZlbnRFbWl0dGVyLCBPbkNoYW5nZXMsIE9uRGVzdHJveSwgT25Jbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IENvbG9yLCBIU0xBLCBIU1ZBLCBSR0JBIH0gZnJvbSAnLi9oZWxwZXJzL2NvbG9yLmludGVyZmFjZXMnO1xuZXhwb3J0IGludGVyZmFjZSBDb2xvckV2ZW50IHtcbiAgICAkZXZlbnQ6IEV2ZW50O1xuICAgIGNvbG9yOiBDb2xvcjtcbn1cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIENvbG9yV3JhcCBpbXBsZW1lbnRzIE9uSW5pdCwgT25DaGFuZ2VzLCBPbkRlc3Ryb3kge1xuICAgIGNsYXNzTmFtZT86IHN0cmluZztcbiAgICBjb2xvcjogSFNMQSB8IEhTVkEgfCBSR0JBIHwgc3RyaW5nO1xuICAgIG9uQ2hhbmdlOiBFdmVudEVtaXR0ZXI8Q29sb3JFdmVudD47XG4gICAgb25DaGFuZ2VDb21wbGV0ZTogRXZlbnRFbWl0dGVyPENvbG9yRXZlbnQ+O1xuICAgIG9uU3dhdGNoSG92ZXI6IEV2ZW50RW1pdHRlcjxDb2xvckV2ZW50PjtcbiAgICBvbGRIdWU6IG51bWJlcjtcbiAgICBoc2w6IEhTTEE7XG4gICAgaHN2OiBIU1ZBO1xuICAgIHJnYjogUkdCQTtcbiAgICBoZXg6IHN0cmluZztcbiAgICBzb3VyY2U6IHN0cmluZztcbiAgICBjdXJyZW50Q29sb3I6IHN0cmluZztcbiAgICBjaGFuZ2VzOiBTdWJzY3JpcHRpb247XG4gICAgbmdPbkluaXQoKTogdm9pZDtcbiAgICBuZ09uQ2hhbmdlcygpOiB2b2lkO1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG4gICAgc2V0U3RhdGUoZGF0YTogYW55KTogdm9pZDtcbiAgICBoYW5kbGVDaGFuZ2UoZGF0YTogYW55LCAkZXZlbnQ6IGFueSk6IHZvaWQ7XG4gICAgLyoqIGhvb2sgZm9yIGNvbXBvbmVudHMgYWZ0ZXIgYSBjb21wbGV0ZSBjaGFuZ2UgKi9cbiAgICBhZnRlclZhbGlkQ2hhbmdlKCk6IHZvaWQ7XG4gICAgaGFuZGxlU3dhdGNoSG92ZXIoZGF0YTogYW55LCAkZXZlbnQ6IGFueSk6IHZvaWQ7XG59XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBDb2xvcldyYXBNb2R1bGUge1xufVxuIl19