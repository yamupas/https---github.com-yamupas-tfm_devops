import { __decorate } from "tslib";
import { Component, EventEmitter, Input, Output } from '@angular/core';
var BlockSwatchesComponent = /** @class */ (function () {
    function BlockSwatchesComponent() {
        this.onClick = new EventEmitter();
        this.onSwatchHover = new EventEmitter();
    }
    BlockSwatchesComponent.prototype.ngOnInit = function () {
        this.swatchStyle = {
            width: '22px',
            height: '22px',
            float: 'left',
            marginRight: '10px',
            marginBottom: '10px',
            borderRadius: '4px',
        };
    };
    BlockSwatchesComponent.prototype.handleClick = function (_a) {
        var hex = _a.hex, $event = _a.$event;
        this.onClick.emit({ hex: hex, $event: $event });
    };
    BlockSwatchesComponent.prototype.focusStyle = function (c) {
        return {
            boxShadow: c + " 0 0 4px",
        };
    };
    __decorate([
        Input()
    ], BlockSwatchesComponent.prototype, "colors", void 0);
    __decorate([
        Output()
    ], BlockSwatchesComponent.prototype, "onClick", void 0);
    __decorate([
        Output()
    ], BlockSwatchesComponent.prototype, "onSwatchHover", void 0);
    BlockSwatchesComponent = __decorate([
        Component({
            selector: 'color-block-swatches',
            template: "\n    <div class=\"block-swatches\">\n      <color-swatch\n        *ngFor=\"let c of colors\"\n        [color]=\"c\"\n        [style]=\"swatchStyle\"\n        [focusStyle]=\"focusStyle(c)\"\n        (onClick)=\"handleClick($event)\"\n        (onHover)=\"onSwatchHover.emit($event)\"\n      ></color-swatch>\n      <div class=\"clear\"></div>\n    </div>\n  ",
            styles: ["\n    .block-swatches {\n      margin-right: -10px;\n    }\n    .clear {\n      clear: both;\n    }\n  "]
        })
    ], BlockSwatchesComponent);
    return BlockSwatchesComponent;
}());
export { BlockSwatchesComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmxvY2stc3dhdGNoZXMuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LWNvbG9yL2Jsb2NrLyIsInNvdXJjZXMiOlsiYmxvY2stc3dhdGNoZXMuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQVUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBNEIvRTtJQU1FO1FBSlUsWUFBTyxHQUFHLElBQUksWUFBWSxFQUFPLENBQUM7UUFDbEMsa0JBQWEsR0FBRyxJQUFJLFlBQVksRUFBTyxDQUFDO0lBR2xDLENBQUM7SUFFakIseUNBQVEsR0FBUjtRQUNFLElBQUksQ0FBQyxXQUFXLEdBQUc7WUFDakIsS0FBSyxFQUFFLE1BQU07WUFDYixNQUFNLEVBQUUsTUFBTTtZQUNkLEtBQUssRUFBRSxNQUFNO1lBQ2IsV0FBVyxFQUFFLE1BQU07WUFDbkIsWUFBWSxFQUFFLE1BQU07WUFDcEIsWUFBWSxFQUFFLEtBQUs7U0FDcEIsQ0FBQztJQUNKLENBQUM7SUFDRCw0Q0FBVyxHQUFYLFVBQVksRUFBYTtZQUFaLFlBQUcsRUFBRSxrQkFBTTtRQUN0QixJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFDLEdBQUcsS0FBQSxFQUFFLE1BQU0sUUFBQSxFQUFDLENBQUMsQ0FBQztJQUNuQyxDQUFDO0lBQ0QsMkNBQVUsR0FBVixVQUFXLENBQUM7UUFDVixPQUFPO1lBQ0wsU0FBUyxFQUFNLENBQUMsYUFBVztTQUM1QixDQUFDO0lBQ0osQ0FBQztJQXhCUTtRQUFSLEtBQUssRUFBRTswREFBNEI7SUFDMUI7UUFBVCxNQUFNLEVBQUU7MkRBQW1DO0lBQ2xDO1FBQVQsTUFBTSxFQUFFO2lFQUF5QztJQUh2QyxzQkFBc0I7UUF4QmxDLFNBQVMsQ0FBQztZQUNULFFBQVEsRUFBRSxzQkFBc0I7WUFDaEMsUUFBUSxFQUFFLHVXQVlUO3FCQUNRLHlHQU9SO1NBQ0YsQ0FBQztPQUNXLHNCQUFzQixDQTJCbEM7SUFBRCw2QkFBQztDQUFBLEFBM0JELElBMkJDO1NBM0JZLHNCQUFzQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgRXZlbnRFbWl0dGVyLCBJbnB1dCwgT25Jbml0LCBPdXRwdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgU2hhcGUgfSBmcm9tICduZ3gtY29sb3InO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdjb2xvci1ibG9jay1zd2F0Y2hlcycsXG4gIHRlbXBsYXRlOiBgXG4gICAgPGRpdiBjbGFzcz1cImJsb2NrLXN3YXRjaGVzXCI+XG4gICAgICA8Y29sb3Itc3dhdGNoXG4gICAgICAgICpuZ0Zvcj1cImxldCBjIG9mIGNvbG9yc1wiXG4gICAgICAgIFtjb2xvcl09XCJjXCJcbiAgICAgICAgW3N0eWxlXT1cInN3YXRjaFN0eWxlXCJcbiAgICAgICAgW2ZvY3VzU3R5bGVdPVwiZm9jdXNTdHlsZShjKVwiXG4gICAgICAgIChvbkNsaWNrKT1cImhhbmRsZUNsaWNrKCRldmVudClcIlxuICAgICAgICAob25Ib3Zlcik9XCJvblN3YXRjaEhvdmVyLmVtaXQoJGV2ZW50KVwiXG4gICAgICA+PC9jb2xvci1zd2F0Y2g+XG4gICAgICA8ZGl2IGNsYXNzPVwiY2xlYXJcIj48L2Rpdj5cbiAgICA8L2Rpdj5cbiAgYCxcbiAgc3R5bGVzOiBbYFxuICAgIC5ibG9jay1zd2F0Y2hlcyB7XG4gICAgICBtYXJnaW4tcmlnaHQ6IC0xMHB4O1xuICAgIH1cbiAgICAuY2xlYXIge1xuICAgICAgY2xlYXI6IGJvdGg7XG4gICAgfVxuICBgXSxcbn0pXG5leHBvcnQgY2xhc3MgQmxvY2tTd2F0Y2hlc0NvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gIEBJbnB1dCgpIGNvbG9yczogc3RyaW5nW10gfCBTaGFwZVtdO1xuICBAT3V0cHV0KCkgb25DbGljayA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xuICBAT3V0cHV0KCkgb25Td2F0Y2hIb3ZlciA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xuICBzd2F0Y2hTdHlsZToge1trZXk6IHN0cmluZ106IHN0cmluZ307XG5cbiAgY29uc3RydWN0b3IoKSB7IH1cblxuICBuZ09uSW5pdCgpIHtcbiAgICB0aGlzLnN3YXRjaFN0eWxlID0ge1xuICAgICAgd2lkdGg6ICcyMnB4JyxcbiAgICAgIGhlaWdodDogJzIycHgnLFxuICAgICAgZmxvYXQ6ICdsZWZ0JyxcbiAgICAgIG1hcmdpblJpZ2h0OiAnMTBweCcsXG4gICAgICBtYXJnaW5Cb3R0b206ICcxMHB4JyxcbiAgICAgIGJvcmRlclJhZGl1czogJzRweCcsXG4gICAgfTtcbiAgfVxuICBoYW5kbGVDbGljayh7aGV4LCAkZXZlbnR9KSB7XG4gICAgdGhpcy5vbkNsaWNrLmVtaXQoe2hleCwgJGV2ZW50fSk7XG4gIH1cbiAgZm9jdXNTdHlsZShjKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGJveFNoYWRvdzogYCR7IGMgfSAwIDAgNHB4YCxcbiAgICB9O1xuICB9XG5cbn1cbiJdfQ==