import { __decorate } from "tslib";
import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output, } from '@angular/core';
import { getContrastingColor } from 'ngx-color';
let SwatchesColorComponent = class SwatchesColorComponent {
    constructor() {
        this.first = false;
        this.last = false;
        this.onClick = new EventEmitter();
        this.onSwatchHover = new EventEmitter();
        this.getContrastingColor = getContrastingColor;
        this.colorStyle = {
            width: '40px',
            height: '24px',
            cursor: 'pointer',
            marginBottom: '1px',
        };
        this.focusStyle = {};
    }
    ngOnInit() {
        this.colorStyle.background = this.color;
        this.focusStyle.boxShadow = `0 0 4px ${this.color}`;
        if (this.first) {
            this.colorStyle.borderRadius = '2px 2px 0 0';
        }
        if (this.last) {
            this.colorStyle.borderRadius = '0 0 2px 2px';
        }
        if (this.color === '#FFFFFF') {
            this.colorStyle.boxShadow = 'inset 0 0 0 1px #ddd';
        }
    }
    handleClick($event) {
        this.onClick.emit({
            data: {
                hex: this.color,
                source: 'hex',
            },
            $event,
        });
    }
};
__decorate([
    Input()
], SwatchesColorComponent.prototype, "color", void 0);
__decorate([
    Input()
], SwatchesColorComponent.prototype, "first", void 0);
__decorate([
    Input()
], SwatchesColorComponent.prototype, "last", void 0);
__decorate([
    Input()
], SwatchesColorComponent.prototype, "active", void 0);
__decorate([
    Output()
], SwatchesColorComponent.prototype, "onClick", void 0);
__decorate([
    Output()
], SwatchesColorComponent.prototype, "onSwatchHover", void 0);
SwatchesColorComponent = __decorate([
    Component({
        selector: 'color-swatches-color',
        template: `
  <color-swatch [color]="color" [style]="colorStyle" [focusStyle]="focusStyle"
    [class.first]="first" [class.last]="last"
    (click)="handleClick($event)" (onHover)="onSwatchHover.emit($event)">
    <div class="swatch-check" *ngIf="active" [class.first]="first" [class.last]="last">
      <svg style="width: 24px; height: 24px;" viewBox="0 0 24 24" [style.fill]="getContrastingColor(color)">
        <path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z" />
      </svg>
    </div>
  </color-swatch>
  `,
        changeDetection: ChangeDetectionStrategy.OnPush,
        preserveWhitespaces: false,
        styles: [`
    .swatches-group {
      padding-bottom: 10px;
      width: 40px;
      float: left;
      margin-right: 10px;
    }
    .swatch-check {
      margin-left: 8px;
    }
  `]
    })
], SwatchesColorComponent);
export { SwatchesColorComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3dhdGNoZXMtY29sb3IuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LWNvbG9yL3N3YXRjaGVzLyIsInNvdXJjZXMiOlsic3dhdGNoZXMtY29sb3IuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQ0wsdUJBQXVCLEVBQ3ZCLFNBQVMsRUFDVCxZQUFZLEVBQ1osS0FBSyxFQUVMLE1BQU0sR0FDUCxNQUFNLGVBQWUsQ0FBQztBQUV2QixPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxXQUFXLENBQUM7QUErQmhELElBQWEsc0JBQXNCLEdBQW5DLE1BQWEsc0JBQXNCO0lBQW5DO1FBRVcsVUFBSyxHQUFHLEtBQUssQ0FBQztRQUNkLFNBQUksR0FBRyxLQUFLLENBQUM7UUFFWixZQUFPLEdBQUcsSUFBSSxZQUFZLEVBQU8sQ0FBQztRQUNsQyxrQkFBYSxHQUFHLElBQUksWUFBWSxFQUFPLENBQUM7UUFDbEQsd0JBQW1CLEdBQUcsbUJBQW1CLENBQUM7UUFDMUMsZUFBVSxHQUE4QjtZQUN0QyxLQUFLLEVBQUUsTUFBTTtZQUNiLE1BQU0sRUFBRSxNQUFNO1lBQ2QsTUFBTSxFQUFFLFNBQVM7WUFDakIsWUFBWSxFQUFFLEtBQUs7U0FDcEIsQ0FBQztRQUNGLGVBQVUsR0FBOEIsRUFBRSxDQUFDO0lBd0I3QyxDQUFDO0lBdEJDLFFBQVE7UUFDTixJQUFJLENBQUMsVUFBVSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO1FBQ3hDLElBQUksQ0FBQyxVQUFVLENBQUMsU0FBUyxHQUFHLFdBQVcsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQ3BELElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtZQUNkLElBQUksQ0FBQyxVQUFVLENBQUMsWUFBWSxHQUFHLGFBQWEsQ0FBQztTQUM5QztRQUNELElBQUksSUFBSSxDQUFDLElBQUksRUFBRTtZQUNiLElBQUksQ0FBQyxVQUFVLENBQUMsWUFBWSxHQUFHLGFBQWEsQ0FBQztTQUM5QztRQUNELElBQUksSUFBSSxDQUFDLEtBQUssS0FBSyxTQUFTLEVBQUU7WUFDNUIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxTQUFTLEdBQUcsc0JBQXNCLENBQUM7U0FDcEQ7SUFDSCxDQUFDO0lBQ0QsV0FBVyxDQUFDLE1BQU07UUFDaEIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUM7WUFDaEIsSUFBSSxFQUFFO2dCQUNKLEdBQUcsRUFBRSxJQUFJLENBQUMsS0FBSztnQkFDZixNQUFNLEVBQUUsS0FBSzthQUNkO1lBQ0QsTUFBTTtTQUNQLENBQUMsQ0FBQztJQUNMLENBQUM7Q0FDRixDQUFBO0FBckNVO0lBQVIsS0FBSyxFQUFFO3FEQUFlO0FBQ2Q7SUFBUixLQUFLLEVBQUU7cURBQWU7QUFDZDtJQUFSLEtBQUssRUFBRTtvREFBYztBQUNiO0lBQVIsS0FBSyxFQUFFO3NEQUFpQjtBQUNmO0lBQVQsTUFBTSxFQUFFO3VEQUFtQztBQUNsQztJQUFULE1BQU0sRUFBRTs2REFBeUM7QUFOdkMsc0JBQXNCO0lBN0JsQyxTQUFTLENBQUM7UUFDVCxRQUFRLEVBQUUsc0JBQXNCO1FBQ2hDLFFBQVEsRUFBRTs7Ozs7Ozs7OztHQVVUO1FBY0QsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07UUFDL0MsbUJBQW1CLEVBQUUsS0FBSztpQkFieEI7Ozs7Ozs7Ozs7R0FVRDtLQUlGLENBQUM7R0FDVyxzQkFBc0IsQ0FzQ2xDO1NBdENZLHNCQUFzQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LFxuICBDb21wb25lbnQsXG4gIEV2ZW50RW1pdHRlcixcbiAgSW5wdXQsXG4gIE9uSW5pdCxcbiAgT3V0cHV0LFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgZ2V0Q29udHJhc3RpbmdDb2xvciB9IGZyb20gJ25neC1jb2xvcic7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2NvbG9yLXN3YXRjaGVzLWNvbG9yJyxcbiAgdGVtcGxhdGU6IGBcbiAgPGNvbG9yLXN3YXRjaCBbY29sb3JdPVwiY29sb3JcIiBbc3R5bGVdPVwiY29sb3JTdHlsZVwiIFtmb2N1c1N0eWxlXT1cImZvY3VzU3R5bGVcIlxuICAgIFtjbGFzcy5maXJzdF09XCJmaXJzdFwiIFtjbGFzcy5sYXN0XT1cImxhc3RcIlxuICAgIChjbGljayk9XCJoYW5kbGVDbGljaygkZXZlbnQpXCIgKG9uSG92ZXIpPVwib25Td2F0Y2hIb3Zlci5lbWl0KCRldmVudClcIj5cbiAgICA8ZGl2IGNsYXNzPVwic3dhdGNoLWNoZWNrXCIgKm5nSWY9XCJhY3RpdmVcIiBbY2xhc3MuZmlyc3RdPVwiZmlyc3RcIiBbY2xhc3MubGFzdF09XCJsYXN0XCI+XG4gICAgICA8c3ZnIHN0eWxlPVwid2lkdGg6IDI0cHg7IGhlaWdodDogMjRweDtcIiB2aWV3Qm94PVwiMCAwIDI0IDI0XCIgW3N0eWxlLmZpbGxdPVwiZ2V0Q29udHJhc3RpbmdDb2xvcihjb2xvcilcIj5cbiAgICAgICAgPHBhdGggZD1cIk0yMSw3TDksMTlMMy41LDEzLjVMNC45MSwxMi4wOUw5LDE2LjE3TDE5LjU5LDUuNTlMMjEsN1pcIiAvPlxuICAgICAgPC9zdmc+XG4gICAgPC9kaXY+XG4gIDwvY29sb3Itc3dhdGNoPlxuICBgLFxuICBzdHlsZXM6IFtcbiAgICBgXG4gICAgLnN3YXRjaGVzLWdyb3VwIHtcbiAgICAgIHBhZGRpbmctYm90dG9tOiAxMHB4O1xuICAgICAgd2lkdGg6IDQwcHg7XG4gICAgICBmbG9hdDogbGVmdDtcbiAgICAgIG1hcmdpbi1yaWdodDogMTBweDtcbiAgICB9XG4gICAgLnN3YXRjaC1jaGVjayB7XG4gICAgICBtYXJnaW4tbGVmdDogOHB4O1xuICAgIH1cbiAgYCxcbiAgXSxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gIHByZXNlcnZlV2hpdGVzcGFjZXM6IGZhbHNlLFxufSlcbmV4cG9ydCBjbGFzcyBTd2F0Y2hlc0NvbG9yQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcbiAgQElucHV0KCkgY29sb3I6IHN0cmluZztcbiAgQElucHV0KCkgZmlyc3QgPSBmYWxzZTtcbiAgQElucHV0KCkgbGFzdCA9IGZhbHNlO1xuICBASW5wdXQoKSBhY3RpdmU6IGJvb2xlYW47XG4gIEBPdXRwdXQoKSBvbkNsaWNrID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XG4gIEBPdXRwdXQoKSBvblN3YXRjaEhvdmVyID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XG4gIGdldENvbnRyYXN0aW5nQ29sb3IgPSBnZXRDb250cmFzdGluZ0NvbG9yO1xuICBjb2xvclN0eWxlOiB7IFtrZXk6IHN0cmluZ106IHN0cmluZyB9ID0ge1xuICAgIHdpZHRoOiAnNDBweCcsXG4gICAgaGVpZ2h0OiAnMjRweCcsXG4gICAgY3Vyc29yOiAncG9pbnRlcicsXG4gICAgbWFyZ2luQm90dG9tOiAnMXB4JyxcbiAgfTtcbiAgZm9jdXNTdHlsZTogeyBba2V5OiBzdHJpbmddOiBzdHJpbmcgfSA9IHt9O1xuXG4gIG5nT25Jbml0KCkge1xuICAgIHRoaXMuY29sb3JTdHlsZS5iYWNrZ3JvdW5kID0gdGhpcy5jb2xvcjtcbiAgICB0aGlzLmZvY3VzU3R5bGUuYm94U2hhZG93ID0gYDAgMCA0cHggJHt0aGlzLmNvbG9yfWA7XG4gICAgaWYgKHRoaXMuZmlyc3QpIHtcbiAgICAgIHRoaXMuY29sb3JTdHlsZS5ib3JkZXJSYWRpdXMgPSAnMnB4IDJweCAwIDAnO1xuICAgIH1cbiAgICBpZiAodGhpcy5sYXN0KSB7XG4gICAgICB0aGlzLmNvbG9yU3R5bGUuYm9yZGVyUmFkaXVzID0gJzAgMCAycHggMnB4JztcbiAgICB9XG4gICAgaWYgKHRoaXMuY29sb3IgPT09ICcjRkZGRkZGJykge1xuICAgICAgdGhpcy5jb2xvclN0eWxlLmJveFNoYWRvdyA9ICdpbnNldCAwIDAgMCAxcHggI2RkZCc7XG4gICAgfVxuICB9XG4gIGhhbmRsZUNsaWNrKCRldmVudCkge1xuICAgIHRoaXMub25DbGljay5lbWl0KHtcbiAgICAgIGRhdGE6IHtcbiAgICAgICAgaGV4OiB0aGlzLmNvbG9yLFxuICAgICAgICBzb3VyY2U6ICdoZXgnLFxuICAgICAgfSxcbiAgICAgICRldmVudCxcbiAgICB9KTtcbiAgfVxufVxuIl19