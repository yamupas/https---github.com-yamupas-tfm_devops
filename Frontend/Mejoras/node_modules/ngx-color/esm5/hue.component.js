import { __decorate } from "tslib";
import { CommonModule } from '@angular/common';
import { ChangeDetectionStrategy, Component, EventEmitter, Input, NgModule, Output, } from '@angular/core';
import { CoordinatesModule } from './coordinates.directive';
var HueComponent = /** @class */ (function () {
    function HueComponent() {
        this.hidePointer = false;
        this.direction = 'horizontal';
        this.onChange = new EventEmitter();
        this.left = '0px';
        this.top = '';
    }
    HueComponent.prototype.ngOnChanges = function () {
        if (this.direction === 'horizontal') {
            this.left = this.hsl.h * 100 / 360 + "%";
        }
        else {
            this.top = -(this.hsl.h * 100 / 360) + 100 + "%";
        }
    };
    HueComponent.prototype.handleChange = function (_a) {
        var top = _a.top, left = _a.left, containerHeight = _a.containerHeight, containerWidth = _a.containerWidth, $event = _a.$event;
        var data;
        if (this.direction === 'vertical') {
            var h = void 0;
            if (top < 0) {
                h = 359;
            }
            else if (top > containerHeight) {
                h = 0;
            }
            else {
                var percent = -(top * 100 / containerHeight) + 100;
                h = 360 * percent / 100;
            }
            if (this.hsl.h !== h) {
                data = {
                    h: h,
                    s: this.hsl.s,
                    l: this.hsl.l,
                    a: this.hsl.a,
                    source: 'rgb',
                };
            }
        }
        else {
            var h = void 0;
            if (left < 0) {
                h = 0;
            }
            else if (left > containerWidth) {
                h = 359;
            }
            else {
                var percent = left * 100 / containerWidth;
                h = 360 * percent / 100;
            }
            if (this.hsl.h !== h) {
                data = {
                    h: h,
                    s: this.hsl.s,
                    l: this.hsl.l,
                    a: this.hsl.a,
                    source: 'rgb',
                };
            }
        }
        if (!data) {
            return null;
        }
        this.onChange.emit({ data: data, $event: $event });
    };
    __decorate([
        Input()
    ], HueComponent.prototype, "hsl", void 0);
    __decorate([
        Input()
    ], HueComponent.prototype, "pointer", void 0);
    __decorate([
        Input()
    ], HueComponent.prototype, "radius", void 0);
    __decorate([
        Input()
    ], HueComponent.prototype, "shadow", void 0);
    __decorate([
        Input()
    ], HueComponent.prototype, "hidePointer", void 0);
    __decorate([
        Input()
    ], HueComponent.prototype, "direction", void 0);
    __decorate([
        Output()
    ], HueComponent.prototype, "onChange", void 0);
    HueComponent = __decorate([
        Component({
            selector: 'color-hue',
            template: "\n  <div class=\"color-hue color-hue-{{direction}}\" [style.border-radius.px]=\"radius\" [style.box-shadow]=\"shadow\">\n    <div ngx-color-coordinates (coordinatesChange)=\"handleChange($event)\" class=\"color-hue-container\">\n      <div class=\"color-hue-pointer\" [style.left]=\"left\" [style.top]=\"top\" *ngIf=\"!hidePointer\">\n        <div class=\"color-hue-slider\" [ngStyle]=\"pointer\"></div>\n      </div>\n    </div>\n  </div>\n  ",
            preserveWhitespaces: false,
            changeDetection: ChangeDetectionStrategy.OnPush,
            styles: ["\n    .color-hue {\n      position: absolute;\n      top: 0;\n      bottom: 0;\n      left: 0;\n      right: 0;\n    }\n    .color-hue-container {\n      margin: 0 2px;\n      position: relative;\n      height: 100%;\n    }\n    .color-hue-pointer {\n      position: absolute;\n    }\n    .color-hue-slider {\n      margin-top: 1px;\n      width: 4px;\n      border-radius: 1px;\n      height: 8px;\n      box-shadow: 0 0 2px rgba(0, 0, 0, .6);\n      background: #fff;\n      transform: translateX(-2px);\n    }\n    .color-hue-horizontal {\n      background: linear-gradient(to right, #f00 0%, #ff0 17%, #0f0\n        33%, #0ff 50%, #00f 67%, #f0f 83%, #f00 100%);\n    }\n    .color-hue-vertical {\n      background: linear-gradient(to top, #f00 0%, #ff0 17%, #0f0 33%,\n        #0ff 50%, #00f 67%, #f0f 83%, #f00 100%);\n    }\n  "]
        })
    ], HueComponent);
    return HueComponent;
}());
export { HueComponent };
var HueModule = /** @class */ (function () {
    function HueModule() {
    }
    HueModule = __decorate([
        NgModule({
            declarations: [HueComponent],
            exports: [HueComponent],
            imports: [CommonModule, CoordinatesModule],
        })
    ], HueModule);
    return HueModule;
}());
export { HueModule };
//# sourceMappingURL=data:application/json;base64,