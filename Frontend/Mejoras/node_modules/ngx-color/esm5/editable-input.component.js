import { __decorate } from "tslib";
import { CommonModule } from '@angular/common';
import { ChangeDetectionStrategy, Component, EventEmitter, Input, NgModule, Output, } from '@angular/core';
import { fromEvent } from 'rxjs';
var EditableInputComponent = /** @class */ (function () {
    function EditableInputComponent() {
        this.placeholder = '';
        this.onChange = new EventEmitter();
        this.focus = false;
    }
    EditableInputComponent.prototype.ngOnInit = function () {
        this.wrapStyle = this.style && this.style.wrap ? this.style.wrap : {};
        this.inputStyle = this.style && this.style.input ? this.style.input : {};
        this.labelStyle = this.style && this.style.label ? this.style.label : {};
        if (this.dragLabel) {
            this.labelStyle.cursor = 'ew-resize';
        }
    };
    EditableInputComponent.prototype.handleFocus = function ($event) {
        this.focus = true;
    };
    EditableInputComponent.prototype.handleFocusOut = function ($event) {
        this.focus = false;
        this.currentValue = this.blurValue;
    };
    EditableInputComponent.prototype.handleKeydown = function ($event) {
        var _a, _b;
        // In case `e.target.value` is a percentage remove the `%` character
        // and update accordingly with a percentage
        // https://github.com/casesandberg/react-color/issues/383
        var stringValue = String($event.target.value);
        var isPercentage = stringValue.indexOf('%') > -1;
        var num = Number(stringValue.replace(/%/g, ''));
        if (!isNaN(num)) {
            var amount = this.arrowOffset || 1;
            // Up
            if ($event.keyCode === 38) {
                if (this.label) {
                    this.onChange.emit({
                        data: (_a = {}, _a[this.label] = num + amount, _a),
                        $event: $event,
                    });
                }
                else {
                    this.onChange.emit({ data: num + amount, $event: $event });
                }
                if (isPercentage) {
                    this.currentValue = num + amount + "%";
                }
                else {
                    this.currentValue = num + amount;
                }
            }
            // Down
            if ($event.keyCode === 40) {
                if (this.label) {
                    this.onChange.emit({
                        data: (_b = {}, _b[this.label] = num - amount, _b),
                        $event: $event,
                    });
                }
                else {
                    this.onChange.emit({ data: num - amount, $event: $event });
                }
                if (isPercentage) {
                    this.currentValue = num - amount + "%";
                }
                else {
                    this.currentValue = num - amount;
                }
            }
        }
    };
    EditableInputComponent.prototype.handleKeyup = function ($event) {
        var _a;
        if ($event.keyCode === 40 || $event.keyCode === 38) {
            return;
        }
        if (this.label) {
            this.onChange.emit({
                data: (_a = {}, _a[this.label] = $event.target.value, _a),
                $event: $event,
            });
        }
        else {
            this.onChange.emit({ data: $event.target.value, $event: $event });
        }
    };
    EditableInputComponent.prototype.ngOnChanges = function () {
        if (!this.focus) {
            this.currentValue = String(this.value).toUpperCase();
            this.blurValue = String(this.value).toUpperCase();
        }
        else {
            this.blurValue = String(this.value).toUpperCase();
        }
    };
    EditableInputComponent.prototype.ngOnDestroy = function () {
        this.unsubscribe();
    };
    EditableInputComponent.prototype.subscribe = function () {
        var _this = this;
        this.mousemove = fromEvent(document, 'mousemove').subscribe(function (ev) {
            return _this.handleDrag(ev);
        });
        this.mouseup = fromEvent(document, 'mouseup').subscribe(function () {
            return _this.unsubscribe();
        });
    };
    EditableInputComponent.prototype.unsubscribe = function () {
        if (this.mousemove) {
            this.mousemove.unsubscribe();
        }
        if (this.mouseup) {
            this.mouseup.unsubscribe();
        }
    };
    EditableInputComponent.prototype.handleMousedown = function ($event) {
        if (this.dragLabel) {
            $event.preventDefault();
            this.handleDrag($event);
            this.subscribe();
        }
    };
    EditableInputComponent.prototype.handleDrag = function ($event) {
        var _a;
        if (this.dragLabel) {
            var newValue = Math.round(this.value + $event.movementX);
            if (newValue >= 0 && newValue <= this.dragMax) {
                this.onChange.emit({ data: (_a = {}, _a[this.label] = newValue, _a), $event: $event });
            }
        }
    };
    __decorate([
        Input()
    ], EditableInputComponent.prototype, "style", void 0);
    __decorate([
        Input()
    ], EditableInputComponent.prototype, "label", void 0);
    __decorate([
        Input()
    ], EditableInputComponent.prototype, "value", void 0);
    __decorate([
        Input()
    ], EditableInputComponent.prototype, "arrowOffset", void 0);
    __decorate([
        Input()
    ], EditableInputComponent.prototype, "dragLabel", void 0);
    __decorate([
        Input()
    ], EditableInputComponent.prototype, "dragMax", void 0);
    __decorate([
        Input()
    ], EditableInputComponent.prototype, "placeholder", void 0);
    __decorate([
        Output()
    ], EditableInputComponent.prototype, "onChange", void 0);
    EditableInputComponent = __decorate([
        Component({
            selector: 'color-editable-input',
            template: "\n  <div class=\"wrap\" [ngStyle]=\"wrapStyle\">\n    <input [ngStyle]=\"inputStyle\" spellCheck=\"false\"\n      [value]=\"currentValue\" [placeholder]=\"placeholder\"\n      (keydown)=\"handleKeydown($event)\" (keyup)=\"handleKeyup($event)\"\n      (focus)=\"handleFocus($event)\" (focusout)=\"handleFocusOut($event)\" />\n    <span *ngIf=\"label\" [ngStyle]=\"labelStyle\" (mousedown)=\"handleMousedown($event)\">\n      {{ label }}\n    </span>\n  </div>\n  ",
            changeDetection: ChangeDetectionStrategy.OnPush,
            styles: ["\n    :host {\n      display: flex;\n    }\n    .wrap {\n      position: relative;\n    }\n  "]
        })
    ], EditableInputComponent);
    return EditableInputComponent;
}());
export { EditableInputComponent };
var EditableInputModule = /** @class */ (function () {
    function EditableInputModule() {
    }
    EditableInputModule = __decorate([
        NgModule({
            declarations: [EditableInputComponent],
            exports: [EditableInputComponent],
            imports: [CommonModule],
        })
    ], EditableInputModule);
    return EditableInputModule;
}());
export { EditableInputModule };
//# sourceMappingURL=data:application/json;base64,