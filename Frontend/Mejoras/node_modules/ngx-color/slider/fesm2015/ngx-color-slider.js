import { __decorate } from 'tslib';
import { CommonModule } from '@angular/common';
import { EventEmitter, Input, Output, Component, ChangeDetectionStrategy, NgModule } from '@angular/core';
import { ColorWrap, HueModule, SwatchModule } from 'ngx-color';

let SliderSwatchComponent = class SliderSwatchComponent {
    constructor() {
        this.first = false;
        this.last = false;
        this.onClick = new EventEmitter();
    }
    ngOnChanges() {
        this.background = `hsl(${this.hsl.h}, 50%, ${this.offset * 100}%)`;
    }
    handleClick($event) {
        this.onClick.emit({
            data: {
                h: this.hsl.h,
                s: 0.5,
                l: this.offset,
                source: 'hsl',
            },
            $event,
        });
    }
};
__decorate([
    Input()
], SliderSwatchComponent.prototype, "hsl", void 0);
__decorate([
    Input()
], SliderSwatchComponent.prototype, "active", void 0);
__decorate([
    Input()
], SliderSwatchComponent.prototype, "offset", void 0);
__decorate([
    Input()
], SliderSwatchComponent.prototype, "first", void 0);
__decorate([
    Input()
], SliderSwatchComponent.prototype, "last", void 0);
__decorate([
    Output()
], SliderSwatchComponent.prototype, "onClick", void 0);
SliderSwatchComponent = __decorate([
    Component({
        selector: 'color-slider-swatch',
        template: `
  <div class="slider-swatch" [style.background]="background"
    [class.first]="first" [class.last]="last" [class.active]="active"
    (click)="handleClick($event)"
  ></div>
  `,
        changeDetection: ChangeDetectionStrategy.OnPush,
        preserveWhitespaces: false,
        styles: [`
    .slider-swatch {
      height: 12px;
      background: rgb(121, 211, 166);
      cursor: pointer;
    }
    .slider-swatch.active {
      transform: scaleY(1.8);
      border-top-right-radius: 3.6px 2px;
      border-top-left-radius: 3.6px 2px;
      border-bottom-right-radius: 3.6px 2px;
      border-bottom-left-radius: 3.6px 2px;
    }
    .slider-swatch.first {
      border-radius: 2px 0px 0px 2px;
    }
    .slider-swatch.last {
      border-radius: 0px 2px 2px 0px;
    }

  `]
    })
], SliderSwatchComponent);

let SliderSwatchesComponent = class SliderSwatchesComponent {
    constructor() {
        this.onClick = new EventEmitter();
        this.onSwatchHover = new EventEmitter();
    }
    active(l, s) {
        return (Math.round(this.hsl.l * 100) / 100 === l &&
            Math.round(this.hsl.s * 100) / 100 === s);
    }
    handleClick({ data, $event }) {
        this.onClick.emit({ data, $event });
    }
};
__decorate([
    Input()
], SliderSwatchesComponent.prototype, "hsl", void 0);
__decorate([
    Output()
], SliderSwatchesComponent.prototype, "onClick", void 0);
__decorate([
    Output()
], SliderSwatchesComponent.prototype, "onSwatchHover", void 0);
SliderSwatchesComponent = __decorate([
    Component({
        selector: 'color-slider-swatches',
        template: `
  <div class="slider-swatches">
    <div class="slider-swatch-wrap">
      <color-slider-swatch
        [hsl]="hsl"
        offset=".80"
        [active]="active(0.80, 0.50)"
        (onClick)="handleClick($event)"
        first="true"
      ></color-slider-swatch>
    </div>
    <div class="slider-swatch-wrap">
      <color-slider-swatch
        [hsl]="hsl"
        offset=".65"
        [active]="active(0.65, 0.50)"
        (onClick)="handleClick($event)"
      ></color-slider-swatch>
    </div>
    <div class="slider-swatch-wrap">
      <color-slider-swatch
        [hsl]="hsl"
        offset=".50"
        [active]="active(0.50, 0.50)"
        (onClick)="handleClick($event)"
      ></color-slider-swatch>
    </div>
    <div class="slider-swatch-wrap">
      <color-slider-swatch
        [hsl]="hsl"
        offset=".35"
        [active]="active(0.35, 0.50)"
        (onClick)="handleClick($event)"
      ></color-slider-swatch>
    </div>
    <div class="slider-swatch-wrap">
      <color-slider-swatch
        [hsl]="hsl"
        offset=".20"
        [active]="active(0.20, 0.50)"
        (onClick)="handleClick($event)"
        last="true"
      ></color-slider-swatch>
    </div>
  </div>
  `,
        changeDetection: ChangeDetectionStrategy.OnPush,
        preserveWhitespaces: false,
        styles: [`
    .slider-swatches {
      margin-top: 20px;
    }
    .slider-swatch-wrap {
      box-sizing: border-box;
      width: 20%;
      padding-right: 1px;
      float: left;
    }
  `]
    })
], SliderSwatchesComponent);

let SliderComponent = class SliderComponent extends ColorWrap {
    constructor() {
        super();
        this.pointer = {
            width: '14px',
            height: '14px',
            borderRadius: '6px',
            transform: 'translate(-7px, -2px)',
            backgroundColor: 'rgb(248, 248, 248)',
            boxShadow: '0 1px 4px 0 rgba(0, 0, 0, 0.37)',
        };
        this.radius = 2;
    }
    handlePickerChange({ data, $event }) {
        this.handleChange(data, $event);
    }
};
__decorate([
    Input()
], SliderComponent.prototype, "pointer", void 0);
__decorate([
    Input()
], SliderComponent.prototype, "radius", void 0);
SliderComponent = __decorate([
    Component({
        selector: 'color-slider',
        template: `
  <div class="slider-picker {{ className }}">
    <div class="slider-hue">
      <color-hue
        [hsl]="hsl" [radius]="radius" [pointer]="pointer"
        (onChange)="handlePickerChange($event)"
      ></color-hue>
    </div>
    <div class="slider-swatches">
      <color-slider-swatches [hsl]="hsl"
        (onClick)="handlePickerChange($event)"
      ></color-slider-swatches>
    </div>
  </div>
  `,
        changeDetection: ChangeDetectionStrategy.OnPush,
        preserveWhitespaces: false,
        styles: [`
    .slider-hue {
      height: 12px;
      position: relative;
    }
  `]
    })
], SliderComponent);
let ColorSliderModule = class ColorSliderModule {
};
ColorSliderModule = __decorate([
    NgModule({
        declarations: [
            SliderComponent,
            SliderSwatchComponent,
            SliderSwatchesComponent,
        ],
        exports: [SliderComponent, SliderSwatchComponent, SliderSwatchesComponent],
        imports: [CommonModule, HueModule, SwatchModule],
    })
], ColorSliderModule);

/**
 * Generated bundle index. Do not edit.
 */

export { ColorSliderModule, SliderComponent, SliderSwatchComponent as ɵa, SliderSwatchesComponent as ɵb };
//# sourceMappingURL=ngx-color-slider.js.map
