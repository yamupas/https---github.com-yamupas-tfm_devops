import { __decorate, __extends } from 'tslib';
import { CommonModule } from '@angular/common';
import { EventEmitter, Input, Output, Component, ChangeDetectionStrategy, NgModule } from '@angular/core';
import { red, pink, purple, deepPurple, indigo, blue, lightBlue, cyan, teal, green, lightGreen, lime, yellow, amber, orange, deepOrange, brown, blueGrey } from 'material-colors';
import { TinyColor } from '@ctrl/tinycolor';
import { isValidHex, ColorWrap, SwatchModule } from 'ngx-color';

var CircleSwatchComponent = /** @class */ (function () {
    function CircleSwatchComponent() {
        this.circleSize = 28;
        this.circleSpacing = 14;
        this.focus = false;
        this.onClick = new EventEmitter();
        this.onSwatchHover = new EventEmitter();
        this.focusStyle = {};
        this.swatchStyle = {
            borderRadius: '50%',
            background: 'transparent',
            transition: '100ms box-shadow ease 0s',
        };
    }
    CircleSwatchComponent.prototype.ngOnChanges = function () {
        this.swatchStyle.boxShadow = "inset 0 0 0 " + this.circleSize / 2 + "px " + this.color;
        this.focusStyle.boxShadow = "inset 0 0 0 " + this.circleSize / 2 + "px " + this.color + ", 0 0 5px " + this.color;
        if (this.focus) {
            this.focusStyle.boxShadow = "inset 0 0 0 3px " + this.color + ", 0 0 5px " + this.color;
        }
    };
    CircleSwatchComponent.prototype.handleClick = function (_a) {
        var hex = _a.hex, $event = _a.$event;
        this.onClick.emit({ hex: hex, $event: $event });
    };
    __decorate([
        Input()
    ], CircleSwatchComponent.prototype, "color", void 0);
    __decorate([
        Input()
    ], CircleSwatchComponent.prototype, "circleSize", void 0);
    __decorate([
        Input()
    ], CircleSwatchComponent.prototype, "circleSpacing", void 0);
    __decorate([
        Input()
    ], CircleSwatchComponent.prototype, "focus", void 0);
    __decorate([
        Output()
    ], CircleSwatchComponent.prototype, "onClick", void 0);
    __decorate([
        Output()
    ], CircleSwatchComponent.prototype, "onSwatchHover", void 0);
    CircleSwatchComponent = __decorate([
        Component({
            selector: 'color-circle-swatch',
            template: "\n  <div class=\"circle-swatch\"\n    [style.width.px]=\"circleSize\" [style.height.px]=\"circleSize\"\n    [style.margin-right.px]=\"circleSpacing\" [style.margin-bottom.px]=\"circleSpacing\"\n    >\n    <color-swatch\n      [color]=\"color\" [style]=\"swatchStyle\" [focus]=\"focus\" [focusStyle]=\"focusStyle\"\n      (onClick)=\"handleClick($event)\" (onHover)=\"onSwatchHover.emit($event)\">\n    </color-swatch>\n    <div class=\"clear\"></div>\n  </div>\n  ",
            changeDetection: ChangeDetectionStrategy.OnPush,
            preserveWhitespaces: false,
            styles: ["\n  .circle-swatch {\n    transform: scale(1);\n    transition: transform 100ms ease;\n  }\n  .circle-swatch:hover {\n    transform: scale(1.2);\n  }\n  "]
        })
    ], CircleSwatchComponent);
    return CircleSwatchComponent;
}());

var CircleComponent = /** @class */ (function (_super) {
    __extends(CircleComponent, _super);
    function CircleComponent() {
        var _this = _super.call(this) || this;
        /** Pixel value for picker width */
        _this.width = 252;
        /** Color squares to display */
        _this.colors = [
            red['500'],
            pink['500'],
            purple['500'],
            deepPurple['500'],
            indigo['500'],
            blue['500'],
            lightBlue['500'],
            cyan['500'],
            teal['500'],
            green['500'],
            lightGreen['500'],
            lime['500'],
            yellow['500'],
            amber['500'],
            orange['500'],
            deepOrange['500'],
            brown['500'],
            blueGrey['500'],
        ];
        /** Value for circle size */
        _this.circleSize = 28;
        /** Value for spacing between circles */
        _this.circleSpacing = 14;
        return _this;
    }
    CircleComponent.prototype.isActive = function (color) {
        return new TinyColor(this.hex).equals(color);
    };
    CircleComponent.prototype.handleBlockChange = function (_a) {
        var hex = _a.hex, $event = _a.$event;
        if (isValidHex(hex)) {
            this.handleChange({ hex: hex, source: 'hex' }, $event);
        }
    };
    CircleComponent.prototype.handleValueChange = function (_a) {
        var data = _a.data, $event = _a.$event;
        this.handleChange(data, $event);
    };
    __decorate([
        Input()
    ], CircleComponent.prototype, "width", void 0);
    __decorate([
        Input()
    ], CircleComponent.prototype, "colors", void 0);
    __decorate([
        Input()
    ], CircleComponent.prototype, "circleSize", void 0);
    __decorate([
        Input()
    ], CircleComponent.prototype, "circleSpacing", void 0);
    CircleComponent = __decorate([
        Component({
            selector: 'color-circle',
            template: "\n    <div\n      class=\"circle-picker {{ className }}\"\n      [style.width.px]=\"width\"\n      [style.margin-right.px]=\"-circleSpacing\"\n      [style.margin-bottom.px]=\"-circleSpacing\"\n    >\n      <color-circle-swatch\n        *ngFor=\"let color of colors\"\n        [circleSize]=\"circleSize\"\n        [circleSpacing]=\"circleSpacing\"\n        [color]=\"color\"\n        [focus]=\"isActive(color)\"\n        (onClick)=\"handleBlockChange($event)\"\n        (onSwatchHover)=\"onSwatchHover.emit($event)\"\n      ></color-circle-swatch>\n    </div>\n  ",
            changeDetection: ChangeDetectionStrategy.OnPush,
            preserveWhitespaces: false,
            styles: ["\n      .circle-picker {\n        display: flex;\n        flex-wrap: wrap;\n      }\n    "]
        })
    ], CircleComponent);
    return CircleComponent;
}(ColorWrap));
var ColorCircleModule = /** @class */ (function () {
    function ColorCircleModule() {
    }
    ColorCircleModule = __decorate([
        NgModule({
            declarations: [CircleComponent, CircleSwatchComponent],
            exports: [CircleComponent, CircleSwatchComponent],
            imports: [CommonModule, SwatchModule],
        })
    ], ColorCircleModule);
    return ColorCircleModule;
}());

/**
 * Generated bundle index. Do not edit.
 */

export { CircleComponent, ColorCircleModule, CircleSwatchComponent as Éµa };
//# sourceMappingURL=ngx-color-circle.js.map
