import { __decorate } from "tslib";
import { CommonModule } from '@angular/common';
import { ChangeDetectionStrategy, Component, Input, NgModule, } from '@angular/core';
import { amber, blue, blueGrey, brown, cyan, deepOrange, deepPurple, green, indigo, lightBlue, lightGreen, lime, orange, pink, purple, red, teal, yellow, } from 'material-colors';
import { TinyColor } from '@ctrl/tinycolor';
import { ColorWrap, SwatchModule, isValidHex } from 'ngx-color';
import { CircleSwatchComponent } from './circle-swatch.component';
let CircleComponent = class CircleComponent extends ColorWrap {
    constructor() {
        super();
        /** Pixel value for picker width */
        this.width = 252;
        /** Color squares to display */
        this.colors = [
            red['500'],
            pink['500'],
            purple['500'],
            deepPurple['500'],
            indigo['500'],
            blue['500'],
            lightBlue['500'],
            cyan['500'],
            teal['500'],
            green['500'],
            lightGreen['500'],
            lime['500'],
            yellow['500'],
            amber['500'],
            orange['500'],
            deepOrange['500'],
            brown['500'],
            blueGrey['500'],
        ];
        /** Value for circle size */
        this.circleSize = 28;
        /** Value for spacing between circles */
        this.circleSpacing = 14;
    }
    isActive(color) {
        return new TinyColor(this.hex).equals(color);
    }
    handleBlockChange({ hex, $event }) {
        if (isValidHex(hex)) {
            this.handleChange({ hex, source: 'hex' }, $event);
        }
    }
    handleValueChange({ data, $event }) {
        this.handleChange(data, $event);
    }
};
__decorate([
    Input()
], CircleComponent.prototype, "width", void 0);
__decorate([
    Input()
], CircleComponent.prototype, "colors", void 0);
__decorate([
    Input()
], CircleComponent.prototype, "circleSize", void 0);
__decorate([
    Input()
], CircleComponent.prototype, "circleSpacing", void 0);
CircleComponent = __decorate([
    Component({
        selector: 'color-circle',
        template: `
    <div
      class="circle-picker {{ className }}"
      [style.width.px]="width"
      [style.margin-right.px]="-circleSpacing"
      [style.margin-bottom.px]="-circleSpacing"
    >
      <color-circle-swatch
        *ngFor="let color of colors"
        [circleSize]="circleSize"
        [circleSpacing]="circleSpacing"
        [color]="color"
        [focus]="isActive(color)"
        (onClick)="handleBlockChange($event)"
        (onSwatchHover)="onSwatchHover.emit($event)"
      ></color-circle-swatch>
    </div>
  `,
        changeDetection: ChangeDetectionStrategy.OnPush,
        preserveWhitespaces: false,
        styles: [`
      .circle-picker {
        display: flex;
        flex-wrap: wrap;
      }
    `]
    })
], CircleComponent);
export { CircleComponent };
let ColorCircleModule = class ColorCircleModule {
};
ColorCircleModule = __decorate([
    NgModule({
        declarations: [CircleComponent, CircleSwatchComponent],
        exports: [CircleComponent, CircleSwatchComponent],
        imports: [CommonModule, SwatchModule],
    })
], ColorCircleModule);
export { ColorCircleModule };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2lyY2xlLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1jb2xvci9jaXJjbGUvIiwic291cmNlcyI6WyJjaXJjbGUuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDL0MsT0FBTyxFQUNMLHVCQUF1QixFQUN2QixTQUFTLEVBQ1QsS0FBSyxFQUNMLFFBQVEsR0FDVCxNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQ0wsS0FBSyxFQUNMLElBQUksRUFDSixRQUFRLEVBQ1IsS0FBSyxFQUNMLElBQUksRUFDSixVQUFVLEVBQ1YsVUFBVSxFQUNWLEtBQUssRUFDTCxNQUFNLEVBQ04sU0FBUyxFQUNULFVBQVUsRUFDVixJQUFJLEVBQ0osTUFBTSxFQUNOLElBQUksRUFDSixNQUFNLEVBQ04sR0FBRyxFQUNILElBQUksRUFDSixNQUFNLEdBQ1AsTUFBTSxpQkFBaUIsQ0FBQztBQUN6QixPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFFNUMsT0FBTyxFQUFFLFNBQVMsRUFBRSxZQUFZLEVBQUUsVUFBVSxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQ2hFLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBaUNsRSxJQUFhLGVBQWUsR0FBNUIsTUFBYSxlQUFnQixTQUFRLFNBQVM7SUE4QjVDO1FBQ0UsS0FBSyxFQUFFLENBQUM7UUE5QlYsbUNBQW1DO1FBQzFCLFVBQUssR0FBb0IsR0FBRyxDQUFDO1FBQ3RDLCtCQUErQjtRQUUvQixXQUFNLEdBQWE7WUFDakIsR0FBRyxDQUFDLEtBQUssQ0FBQztZQUNWLElBQUksQ0FBQyxLQUFLLENBQUM7WUFDWCxNQUFNLENBQUMsS0FBSyxDQUFDO1lBQ2IsVUFBVSxDQUFDLEtBQUssQ0FBQztZQUNqQixNQUFNLENBQUMsS0FBSyxDQUFDO1lBQ2IsSUFBSSxDQUFDLEtBQUssQ0FBQztZQUNYLFNBQVMsQ0FBQyxLQUFLLENBQUM7WUFDaEIsSUFBSSxDQUFDLEtBQUssQ0FBQztZQUNYLElBQUksQ0FBQyxLQUFLLENBQUM7WUFDWCxLQUFLLENBQUMsS0FBSyxDQUFDO1lBQ1osVUFBVSxDQUFDLEtBQUssQ0FBQztZQUNqQixJQUFJLENBQUMsS0FBSyxDQUFDO1lBQ1gsTUFBTSxDQUFDLEtBQUssQ0FBQztZQUNiLEtBQUssQ0FBQyxLQUFLLENBQUM7WUFDWixNQUFNLENBQUMsS0FBSyxDQUFDO1lBQ2IsVUFBVSxDQUFDLEtBQUssQ0FBQztZQUNqQixLQUFLLENBQUMsS0FBSyxDQUFDO1lBQ1osUUFBUSxDQUFDLEtBQUssQ0FBQztTQUNoQixDQUFDO1FBQ0YsNEJBQTRCO1FBQ25CLGVBQVUsR0FBRyxFQUFFLENBQUM7UUFDekIsd0NBQXdDO1FBQy9CLGtCQUFhLEdBQUcsRUFBRSxDQUFDO0lBSTVCLENBQUM7SUFDRCxRQUFRLENBQUMsS0FBYTtRQUNwQixPQUFPLElBQUksU0FBUyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDL0MsQ0FBQztJQUNELGlCQUFpQixDQUFDLEVBQUUsR0FBRyxFQUFFLE1BQU0sRUFBa0M7UUFDL0QsSUFBSSxVQUFVLENBQUMsR0FBRyxDQUFDLEVBQUU7WUFDbkIsSUFBSSxDQUFDLFlBQVksQ0FBQyxFQUFFLEdBQUcsRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLEVBQUUsTUFBTSxDQUFDLENBQUM7U0FDbkQ7SUFDSCxDQUFDO0lBQ0QsaUJBQWlCLENBQUMsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFO1FBQ2hDLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQ2xDLENBQUM7Q0FDRixDQUFBO0FBMUNVO0lBQVIsS0FBSyxFQUFFOzhDQUE4QjtBQUd0QztJQURDLEtBQUssRUFBRTsrQ0FvQk47QUFFTztJQUFSLEtBQUssRUFBRTttREFBaUI7QUFFaEI7SUFBUixLQUFLLEVBQUU7c0RBQW9CO0FBNUJqQixlQUFlO0lBL0IzQixTQUFTLENBQUM7UUFDVCxRQUFRLEVBQUUsY0FBYztRQUN4QixRQUFRLEVBQUU7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBaUJUO1FBU0QsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07UUFDL0MsbUJBQW1CLEVBQUUsS0FBSztpQkFSeEI7Ozs7O0tBS0M7S0FJSixDQUFDO0dBQ1csZUFBZSxDQTRDM0I7U0E1Q1ksZUFBZTtBQW1ENUIsSUFBYSxpQkFBaUIsR0FBOUIsTUFBYSxpQkFBaUI7Q0FBRyxDQUFBO0FBQXBCLGlCQUFpQjtJQUw3QixRQUFRLENBQUM7UUFDUixZQUFZLEVBQUUsQ0FBQyxlQUFlLEVBQUUscUJBQXFCLENBQUM7UUFDdEQsT0FBTyxFQUFFLENBQUMsZUFBZSxFQUFFLHFCQUFxQixDQUFDO1FBQ2pELE9BQU8sRUFBRSxDQUFDLFlBQVksRUFBRSxZQUFZLENBQUM7S0FDdEMsQ0FBQztHQUNXLGlCQUFpQixDQUFHO1NBQXBCLGlCQUFpQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbW1vbk1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQge1xuICBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSxcbiAgQ29tcG9uZW50LFxuICBJbnB1dCxcbiAgTmdNb2R1bGUsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtcbiAgYW1iZXIsXG4gIGJsdWUsXG4gIGJsdWVHcmV5LFxuICBicm93bixcbiAgY3lhbixcbiAgZGVlcE9yYW5nZSxcbiAgZGVlcFB1cnBsZSxcbiAgZ3JlZW4sXG4gIGluZGlnbyxcbiAgbGlnaHRCbHVlLFxuICBsaWdodEdyZWVuLFxuICBsaW1lLFxuICBvcmFuZ2UsXG4gIHBpbmssXG4gIHB1cnBsZSxcbiAgcmVkLFxuICB0ZWFsLFxuICB5ZWxsb3csXG59IGZyb20gJ21hdGVyaWFsLWNvbG9ycyc7XG5pbXBvcnQgeyBUaW55Q29sb3IgfSBmcm9tICdAY3RybC90aW55Y29sb3InO1xuXG5pbXBvcnQgeyBDb2xvcldyYXAsIFN3YXRjaE1vZHVsZSwgaXNWYWxpZEhleCB9IGZyb20gJ25neC1jb2xvcic7XG5pbXBvcnQgeyBDaXJjbGVTd2F0Y2hDb21wb25lbnQgfSBmcm9tICcuL2NpcmNsZS1zd2F0Y2guY29tcG9uZW50JztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnY29sb3ItY2lyY2xlJyxcbiAgdGVtcGxhdGU6IGBcbiAgICA8ZGl2XG4gICAgICBjbGFzcz1cImNpcmNsZS1waWNrZXIge3sgY2xhc3NOYW1lIH19XCJcbiAgICAgIFtzdHlsZS53aWR0aC5weF09XCJ3aWR0aFwiXG4gICAgICBbc3R5bGUubWFyZ2luLXJpZ2h0LnB4XT1cIi1jaXJjbGVTcGFjaW5nXCJcbiAgICAgIFtzdHlsZS5tYXJnaW4tYm90dG9tLnB4XT1cIi1jaXJjbGVTcGFjaW5nXCJcbiAgICA+XG4gICAgICA8Y29sb3ItY2lyY2xlLXN3YXRjaFxuICAgICAgICAqbmdGb3I9XCJsZXQgY29sb3Igb2YgY29sb3JzXCJcbiAgICAgICAgW2NpcmNsZVNpemVdPVwiY2lyY2xlU2l6ZVwiXG4gICAgICAgIFtjaXJjbGVTcGFjaW5nXT1cImNpcmNsZVNwYWNpbmdcIlxuICAgICAgICBbY29sb3JdPVwiY29sb3JcIlxuICAgICAgICBbZm9jdXNdPVwiaXNBY3RpdmUoY29sb3IpXCJcbiAgICAgICAgKG9uQ2xpY2spPVwiaGFuZGxlQmxvY2tDaGFuZ2UoJGV2ZW50KVwiXG4gICAgICAgIChvblN3YXRjaEhvdmVyKT1cIm9uU3dhdGNoSG92ZXIuZW1pdCgkZXZlbnQpXCJcbiAgICAgID48L2NvbG9yLWNpcmNsZS1zd2F0Y2g+XG4gICAgPC9kaXY+XG4gIGAsXG4gIHN0eWxlczogW1xuICAgIGBcbiAgICAgIC5jaXJjbGUtcGlja2VyIHtcbiAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgZmxleC13cmFwOiB3cmFwO1xuICAgICAgfVxuICAgIGAsXG4gIF0sXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICBwcmVzZXJ2ZVdoaXRlc3BhY2VzOiBmYWxzZSxcbn0pXG5leHBvcnQgY2xhc3MgQ2lyY2xlQ29tcG9uZW50IGV4dGVuZHMgQ29sb3JXcmFwIHtcbiAgLyoqIFBpeGVsIHZhbHVlIGZvciBwaWNrZXIgd2lkdGggKi9cbiAgQElucHV0KCkgd2lkdGg6IHN0cmluZyB8IG51bWJlciA9IDI1MjtcbiAgLyoqIENvbG9yIHNxdWFyZXMgdG8gZGlzcGxheSAqL1xuICBASW5wdXQoKVxuICBjb2xvcnM6IHN0cmluZ1tdID0gW1xuICAgIHJlZFsnNTAwJ10sXG4gICAgcGlua1snNTAwJ10sXG4gICAgcHVycGxlWyc1MDAnXSxcbiAgICBkZWVwUHVycGxlWyc1MDAnXSxcbiAgICBpbmRpZ29bJzUwMCddLFxuICAgIGJsdWVbJzUwMCddLFxuICAgIGxpZ2h0Qmx1ZVsnNTAwJ10sXG4gICAgY3lhblsnNTAwJ10sXG4gICAgdGVhbFsnNTAwJ10sXG4gICAgZ3JlZW5bJzUwMCddLFxuICAgIGxpZ2h0R3JlZW5bJzUwMCddLFxuICAgIGxpbWVbJzUwMCddLFxuICAgIHllbGxvd1snNTAwJ10sXG4gICAgYW1iZXJbJzUwMCddLFxuICAgIG9yYW5nZVsnNTAwJ10sXG4gICAgZGVlcE9yYW5nZVsnNTAwJ10sXG4gICAgYnJvd25bJzUwMCddLFxuICAgIGJsdWVHcmV5Wyc1MDAnXSxcbiAgXTtcbiAgLyoqIFZhbHVlIGZvciBjaXJjbGUgc2l6ZSAqL1xuICBASW5wdXQoKSBjaXJjbGVTaXplID0gMjg7XG4gIC8qKiBWYWx1ZSBmb3Igc3BhY2luZyBiZXR3ZWVuIGNpcmNsZXMgKi9cbiAgQElucHV0KCkgY2lyY2xlU3BhY2luZyA9IDE0O1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG4gIH1cbiAgaXNBY3RpdmUoY29sb3I6IHN0cmluZykge1xuICAgIHJldHVybiBuZXcgVGlueUNvbG9yKHRoaXMuaGV4KS5lcXVhbHMoY29sb3IpO1xuICB9XG4gIGhhbmRsZUJsb2NrQ2hhbmdlKHsgaGV4LCAkZXZlbnQgfTogeyBoZXg6IHN0cmluZywgJGV2ZW50OiBFdmVudCB9KSB7XG4gICAgaWYgKGlzVmFsaWRIZXgoaGV4KSkge1xuICAgICAgdGhpcy5oYW5kbGVDaGFuZ2UoeyBoZXgsIHNvdXJjZTogJ2hleCcgfSwgJGV2ZW50KTtcbiAgICB9XG4gIH1cbiAgaGFuZGxlVmFsdWVDaGFuZ2UoeyBkYXRhLCAkZXZlbnQgfSkge1xuICAgIHRoaXMuaGFuZGxlQ2hhbmdlKGRhdGEsICRldmVudCk7XG4gIH1cbn1cblxuQE5nTW9kdWxlKHtcbiAgZGVjbGFyYXRpb25zOiBbQ2lyY2xlQ29tcG9uZW50LCBDaXJjbGVTd2F0Y2hDb21wb25lbnRdLFxuICBleHBvcnRzOiBbQ2lyY2xlQ29tcG9uZW50LCBDaXJjbGVTd2F0Y2hDb21wb25lbnRdLFxuICBpbXBvcnRzOiBbQ29tbW9uTW9kdWxlLCBTd2F0Y2hNb2R1bGVdLFxufSlcbmV4cG9ydCBjbGFzcyBDb2xvckNpcmNsZU1vZHVsZSB7fVxuIl19