import { __decorate } from 'tslib';
import { CommonModule } from '@angular/common';
import { EventEmitter, Input, Output, Component, ChangeDetectionStrategy, NgModule } from '@angular/core';
import { red, pink, purple, deepPurple, indigo, blue, lightBlue, cyan, teal, green, lightGreen, lime, yellow, amber, orange, deepOrange, brown, blueGrey } from 'material-colors';
import { TinyColor } from '@ctrl/tinycolor';
import { ColorWrap, isValidHex, SwatchModule } from 'ngx-color';

import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from 'ngx-color';
import * as ɵngcc2 from '@angular/common';

function CircleComponent_color_circle_swatch_1_Template(rf, ctx) { if (rf & 1) {
    const _r3 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "color-circle-swatch", 1);
    ɵngcc0.ɵɵlistener("onClick", function CircleComponent_color_circle_swatch_1_Template_color_circle_swatch_onClick_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r3); const ctx_r2 = ɵngcc0.ɵɵnextContext(); return ctx_r2.handleBlockChange($event); })("onSwatchHover", function CircleComponent_color_circle_swatch_1_Template_color_circle_swatch_onSwatchHover_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r3); const ctx_r4 = ɵngcc0.ɵɵnextContext(); return ctx_r4.onSwatchHover.emit($event); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const color_r1 = ctx.$implicit;
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("circleSize", ctx_r0.circleSize)("circleSpacing", ctx_r0.circleSpacing)("color", color_r1)("focus", ctx_r0.isActive(color_r1));
} }
let CircleSwatchComponent = class CircleSwatchComponent {
    constructor() {
        this.circleSize = 28;
        this.circleSpacing = 14;
        this.focus = false;
        this.onClick = new EventEmitter();
        this.onSwatchHover = new EventEmitter();
        this.focusStyle = {};
        this.swatchStyle = {
            borderRadius: '50%',
            background: 'transparent',
            transition: '100ms box-shadow ease 0s',
        };
    }
    ngOnChanges() {
        this.swatchStyle.boxShadow = `inset 0 0 0 ${this.circleSize / 2}px ${this.color}`;
        this.focusStyle.boxShadow = `inset 0 0 0 ${this.circleSize / 2}px ${this.color}, 0 0 5px ${this.color}`;
        if (this.focus) {
            this.focusStyle.boxShadow = `inset 0 0 0 3px ${this.color}, 0 0 5px ${this.color}`;
        }
    }
    handleClick({ hex, $event }) {
        this.onClick.emit({ hex, $event });
    }
};
CircleSwatchComponent.ɵfac = function CircleSwatchComponent_Factory(t) { return new (t || CircleSwatchComponent)(); };
CircleSwatchComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: CircleSwatchComponent, selectors: [["color-circle-swatch"]], inputs: { circleSize: "circleSize", circleSpacing: "circleSpacing", focus: "focus", color: "color" }, outputs: { onClick: "onClick", onSwatchHover: "onSwatchHover" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], decls: 3, vars: 13, consts: [[1, "circle-swatch"], [3, "color", "focus", "focusStyle", "onClick", "onHover"], [1, "clear"]], template: function CircleSwatchComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "color-swatch", 1);
        ɵngcc0.ɵɵlistener("onClick", function CircleSwatchComponent_Template_color_swatch_onClick_1_listener($event) { return ctx.handleClick($event); })("onHover", function CircleSwatchComponent_Template_color_swatch_onHover_1_listener($event) { return ctx.onSwatchHover.emit($event); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(2, "div", 2);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵstyleProp("width", ctx.circleSize, "px")("height", ctx.circleSize, "px")("margin-right", ctx.circleSpacing, "px")("margin-bottom", ctx.circleSpacing, "px");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵstyleMap(ctx.swatchStyle);
        ɵngcc0.ɵɵproperty("color", ctx.color)("focus", ctx.focus)("focusStyle", ctx.focusStyle);
    } }, directives: [ɵngcc1.SwatchComponent], styles: [".circle-swatch[_ngcontent-%COMP%] {\n    transform: scale(1);\n    transition: transform 100ms ease;\n  }\n  .circle-swatch[_ngcontent-%COMP%]:hover {\n    transform: scale(1.2);\n  }"], changeDetection: 0 });
__decorate([
    Input()
], CircleSwatchComponent.prototype, "color", void 0);
__decorate([
    Input()
], CircleSwatchComponent.prototype, "circleSize", void 0);
__decorate([
    Input()
], CircleSwatchComponent.prototype, "circleSpacing", void 0);
__decorate([
    Input()
], CircleSwatchComponent.prototype, "focus", void 0);
__decorate([
    Output()
], CircleSwatchComponent.prototype, "onClick", void 0);
__decorate([
    Output()
], CircleSwatchComponent.prototype, "onSwatchHover", void 0);

let CircleComponent = class CircleComponent extends ColorWrap {
    constructor() {
        super();
        /** Pixel value for picker width */
        this.width = 252;
        /** Color squares to display */
        this.colors = [
            red['500'],
            pink['500'],
            purple['500'],
            deepPurple['500'],
            indigo['500'],
            blue['500'],
            lightBlue['500'],
            cyan['500'],
            teal['500'],
            green['500'],
            lightGreen['500'],
            lime['500'],
            yellow['500'],
            amber['500'],
            orange['500'],
            deepOrange['500'],
            brown['500'],
            blueGrey['500'],
        ];
        /** Value for circle size */
        this.circleSize = 28;
        /** Value for spacing between circles */
        this.circleSpacing = 14;
    }
    isActive(color) {
        return new TinyColor(this.hex).equals(color);
    }
    handleBlockChange({ hex, $event }) {
        if (isValidHex(hex)) {
            this.handleChange({ hex, source: 'hex' }, $event);
        }
    }
    handleValueChange({ data, $event }) {
        this.handleChange(data, $event);
    }
};
CircleComponent.ɵfac = function CircleComponent_Factory(t) { return new (t || CircleComponent)(); };
CircleComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: CircleComponent, selectors: [["color-circle"]], inputs: { width: "width", colors: "colors", circleSize: "circleSize", circleSpacing: "circleSpacing" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 2, vars: 10, consts: [[3, "circleSize", "circleSpacing", "color", "focus", "onClick", "onSwatchHover", 4, "ngFor", "ngForOf"], [3, "circleSize", "circleSpacing", "color", "focus", "onClick", "onSwatchHover"]], template: function CircleComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div");
        ɵngcc0.ɵɵtemplate(1, CircleComponent_color_circle_swatch_1_Template, 1, 4, "color-circle-swatch", 0);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵclassMapInterpolate1("circle-picker ", ctx.className, "");
        ɵngcc0.ɵɵstyleProp("width", ctx.width, "px")("margin-right", 0 - ctx.circleSpacing, "px")("margin-bottom", 0 - ctx.circleSpacing, "px");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.colors);
    } }, directives: [ɵngcc2.NgForOf, CircleSwatchComponent], styles: [".circle-picker[_ngcontent-%COMP%] {\n        display: flex;\n        flex-wrap: wrap;\n      }"], changeDetection: 0 });
__decorate([
    Input()
], CircleComponent.prototype, "width", void 0);
__decorate([
    Input()
], CircleComponent.prototype, "colors", void 0);
__decorate([
    Input()
], CircleComponent.prototype, "circleSize", void 0);
__decorate([
    Input()
], CircleComponent.prototype, "circleSpacing", void 0);
let ColorCircleModule = class ColorCircleModule {
};
ColorCircleModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: ColorCircleModule });
ColorCircleModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function ColorCircleModule_Factory(t) { return new (t || ColorCircleModule)(); }, imports: [[CommonModule, SwatchModule]] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CircleSwatchComponent, [{
        type: Component,
        args: [{
                selector: 'color-circle-swatch',
                template: `
  <div class="circle-swatch"
    [style.width.px]="circleSize" [style.height.px]="circleSize"
    [style.margin-right.px]="circleSpacing" [style.margin-bottom.px]="circleSpacing"
    >
    <color-swatch
      [color]="color" [style]="swatchStyle" [focus]="focus" [focusStyle]="focusStyle"
      (onClick)="handleClick($event)" (onHover)="onSwatchHover.emit($event)">
    </color-swatch>
    <div class="clear"></div>
  </div>
  `,
                changeDetection: ChangeDetectionStrategy.OnPush,
                preserveWhitespaces: false,
                styles: [`
  .circle-swatch {
    transform: scale(1);
    transition: transform 100ms ease;
  }
  .circle-swatch:hover {
    transform: scale(1.2);
  }
  `]
            }]
    }], function () { return []; }, { circleSize: [{
            type: Input
        }], circleSpacing: [{
            type: Input
        }], focus: [{
            type: Input
        }], onClick: [{
            type: Output
        }], onSwatchHover: [{
            type: Output
        }], color: [{
            type: Input
        }] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CircleComponent, [{
        type: Component,
        args: [{
                selector: 'color-circle',
                template: `
    <div
      class="circle-picker {{ className }}"
      [style.width.px]="width"
      [style.margin-right.px]="-circleSpacing"
      [style.margin-bottom.px]="-circleSpacing"
    >
      <color-circle-swatch
        *ngFor="let color of colors"
        [circleSize]="circleSize"
        [circleSpacing]="circleSpacing"
        [color]="color"
        [focus]="isActive(color)"
        (onClick)="handleBlockChange($event)"
        (onSwatchHover)="onSwatchHover.emit($event)"
      ></color-circle-swatch>
    </div>
  `,
                changeDetection: ChangeDetectionStrategy.OnPush,
                preserveWhitespaces: false,
                styles: [`
      .circle-picker {
        display: flex;
        flex-wrap: wrap;
      }
    `]
            }]
    }], function () { return []; }, { width: [{
            type: Input
        }], colors: [{
            type: Input
        }], circleSize: [{
            type: Input
        }], circleSpacing: [{
            type: Input
        }] }); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ColorCircleModule, { declarations: function () { return [CircleComponent,
        CircleSwatchComponent]; }, imports: function () { return [CommonModule, SwatchModule]; }, exports: function () { return [CircleComponent,
        CircleSwatchComponent]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ColorCircleModule, [{
        type: NgModule,
        args: [{
                declarations: [CircleComponent, CircleSwatchComponent],
                exports: [CircleComponent, CircleSwatchComponent],
                imports: [CommonModule, SwatchModule]
            }]
    }], null, null); })();

/**
 * Generated bundle index. Do not edit.
 */

export { CircleComponent, ColorCircleModule, CircleSwatchComponent as ɵa };

//# sourceMappingURL=ngx-color-circle.js.map