import { __decorate } from 'tslib';
import { CommonModule } from '@angular/common';
import { EventEmitter, Input, Output, Component, ChangeDetectionStrategy, NgModule } from '@angular/core';
import { getContrastingColor, isValidHex, ColorWrap, EditableInputModule, SwatchModule, RaisedModule } from 'ngx-color';

import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from 'ngx-color';
import * as ɵngcc2 from '@angular/common';

const _c0 = function (a0, a1, a2) { return { wrap: a0, input: a1, label: a2 }; };
function CompactComponent_color_compact_color_3_Template(rf, ctx) { if (rf & 1) {
    const _r3 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "color-compact-color", 4);
    ɵngcc0.ɵɵlistener("onClick", function CompactComponent_color_compact_color_3_Template_color_compact_color_onClick_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r3); const ctx_r2 = ɵngcc0.ɵɵnextContext(); return ctx_r2.handleBlockChange($event); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const color_r1 = ctx.$implicit;
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("color", color_r1)("active", color_r1.toLowerCase() === ctx_r0.hex.toLowerCase());
} }
let CompactColorComponent = class CompactColorComponent {
    constructor() {
        this.onClick = new EventEmitter();
        this.onSwatchHover = new EventEmitter();
        this.swatchStyle = {
            width: '15px',
            height: '15px',
            float: 'left',
            marginRight: '5px',
            marginBottom: '5px',
            position: 'relative',
            cursor: 'pointer',
        };
        this.swatchFocus = {};
        this.getContrastingColor = getContrastingColor;
    }
    ngOnChanges() {
        this.swatchStyle.background = this.color;
        this.swatchFocus.boxShadow = `0 0 4px ${this.color}`;
        if (this.color.toLowerCase() === '#ffffff') {
            this.swatchStyle.boxShadow = 'inset 0 0 0 1px #ddd';
        }
    }
    handleClick({ hex, $event }) {
        this.onClick.emit({ hex, $event });
    }
};
CompactColorComponent.ɵfac = function CompactColorComponent_Factory(t) { return new (t || CompactColorComponent)(); };
CompactColorComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: CompactColorComponent, selectors: [["color-compact-color"]], inputs: { color: "color", active: "active" }, outputs: { onClick: "onClick", onSwatchHover: "onSwatchHover" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], decls: 3, vars: 8, consts: [[1, "compact-color"], [1, "swatch", 3, "color", "focusStyle", "onClick", "onHover"], [1, "compact-dot"]], template: function CompactColorComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "color-swatch", 1);
        ɵngcc0.ɵɵlistener("onClick", function CompactColorComponent_Template_color_swatch_onClick_1_listener($event) { return ctx.handleClick($event); })("onHover", function CompactColorComponent_Template_color_swatch_onHover_1_listener($event) { return ctx.onSwatchHover.emit($event); });
        ɵngcc0.ɵɵelement(2, "div", 2);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵstyleMap(ctx.swatchStyle);
        ɵngcc0.ɵɵproperty("color", ctx.color)("focusStyle", ctx.swatchFocus);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵstyleProp("background", ctx.getContrastingColor(ctx.color), ɵngcc0.ɵɵdefaultStyleSanitizer);
        ɵngcc0.ɵɵclassProp("active", ctx.active);
    } }, directives: [ɵngcc1.SwatchComponent], styles: [".compact-dot[_ngcontent-%COMP%] {\n    position: absolute;\n    top: 5px;\n    right: 5px;\n    bottom: 5px;\n    left: 5px;\n    border-radius: 50%;\n    opacity: 0;\n  }\n  .compact-dot.active[_ngcontent-%COMP%] {\n    opacity: 1;\n  }"], changeDetection: 0 });
__decorate([
    Input()
], CompactColorComponent.prototype, "color", void 0);
__decorate([
    Input()
], CompactColorComponent.prototype, "active", void 0);
__decorate([
    Output()
], CompactColorComponent.prototype, "onClick", void 0);
__decorate([
    Output()
], CompactColorComponent.prototype, "onSwatchHover", void 0);

let CompactFieldsComponent = class CompactFieldsComponent {
    constructor() {
        this.onChange = new EventEmitter();
        this.HEXWrap = {
            marginTop: '-3px',
            marginBottom: '-3px',
            // flex: '6 1 0%',
            position: 'relative',
        };
        this.HEXinput = {
            width: '80%',
            padding: '0px',
            paddingLeft: '20%',
            border: 'none',
            outline: 'none',
            background: 'none',
            fontSize: '12px',
            color: '#333',
            height: '16px',
        };
        this.HEXlabel = {
            display: 'none',
        };
        this.RGBwrap = {
            marginTop: '-3px',
            marginBottom: '-3px',
            // flex: '3 1 0%',
            position: 'relative',
        };
        this.RGBinput = {
            width: '80%',
            padding: '0px',
            paddingLeft: '30%',
            border: 'none',
            outline: 'none',
            background: 'none',
            fontSize: '12px',
            color: '#333',
            height: '16px',
        };
        this.RGBlabel = {
            position: 'absolute',
            top: '6px',
            left: '0px',
            'line-height': '16px',
            'text-transform': 'uppercase',
            fontSize: '12px',
            color: '#999',
        };
    }
    handleChange({ data, $event }) {
        if (data.hex) {
            if (isValidHex(data.hex)) {
                this.onChange.emit({
                    data: {
                        hex: data.hex,
                        source: 'hex',
                    },
                    $event,
                });
            }
        }
        else {
            this.onChange.emit({
                data: {
                    r: data.r || this.rgb.r,
                    g: data.g || this.rgb.g,
                    b: data.b || this.rgb.b,
                    source: 'rgb',
                },
                $event,
            });
        }
    }
};
CompactFieldsComponent.ɵfac = function CompactFieldsComponent_Factory(t) { return new (t || CompactFieldsComponent)(); };
CompactFieldsComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: CompactFieldsComponent, selectors: [["color-compact-fields"]], inputs: { hex: "hex", rgb: "rgb" }, outputs: { onChange: "onChange" }, decls: 10, vars: 30, consts: [[1, "compact-fields"], [1, "compact-active"], [2, "flex", "6 1 0%"], ["label", "hex", 3, "value", "onChange"], [2, "flex", "3 1 0%"], ["label", "r", 3, "value", "onChange"], ["label", "g", 3, "value", "onChange"], ["label", "b", 3, "value", "onChange"]], template: function CompactFieldsComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelement(1, "div", 1);
        ɵngcc0.ɵɵelementStart(2, "div", 2);
        ɵngcc0.ɵɵelementStart(3, "color-editable-input", 3);
        ɵngcc0.ɵɵlistener("onChange", function CompactFieldsComponent_Template_color_editable_input_onChange_3_listener($event) { return ctx.handleChange($event); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(4, "div", 4);
        ɵngcc0.ɵɵelementStart(5, "color-editable-input", 5);
        ɵngcc0.ɵɵlistener("onChange", function CompactFieldsComponent_Template_color_editable_input_onChange_5_listener($event) { return ctx.handleChange($event); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(6, "div", 4);
        ɵngcc0.ɵɵelementStart(7, "color-editable-input", 6);
        ɵngcc0.ɵɵlistener("onChange", function CompactFieldsComponent_Template_color_editable_input_onChange_7_listener($event) { return ctx.handleChange($event); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(8, "div", 4);
        ɵngcc0.ɵɵelementStart(9, "color-editable-input", 7);
        ɵngcc0.ɵɵlistener("onChange", function CompactFieldsComponent_Template_color_editable_input_onChange_9_listener($event) { return ctx.handleChange($event); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵstyleProp("background", ctx.hex, ɵngcc0.ɵɵdefaultStyleSanitizer);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵstyleMap(ɵngcc0.ɵɵpureFunction3(14, _c0, ctx.HEXWrap, ctx.HEXinput, ctx.HEXlabel));
        ɵngcc0.ɵɵproperty("value", ctx.hex);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵstyleMap(ɵngcc0.ɵɵpureFunction3(18, _c0, ctx.RGBwrap, ctx.RGBinput, ctx.RGBlabel));
        ɵngcc0.ɵɵproperty("value", ctx.rgb.r);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵstyleMap(ɵngcc0.ɵɵpureFunction3(22, _c0, ctx.RGBwrap, ctx.RGBinput, ctx.RGBlabel));
        ɵngcc0.ɵɵproperty("value", ctx.rgb.g);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵstyleMap(ɵngcc0.ɵɵpureFunction3(26, _c0, ctx.RGBwrap, ctx.RGBinput, ctx.RGBlabel));
        ɵngcc0.ɵɵproperty("value", ctx.rgb.b);
    } }, directives: [ɵngcc1.EditableInputComponent], styles: [".compact-fields[_ngcontent-%COMP%] {\n    display: flex;\n    padding-bottom: 6px;\n    padding-right: 5px;\n    position: relative;\n  }\n  .compact-active[_ngcontent-%COMP%] {\n    position: absolute;\n    top: 6px;\n    left: 5px;\n    height: 9px;\n    width: 9px;\n  }"], changeDetection: 0 });
__decorate([
    Input()
], CompactFieldsComponent.prototype, "hex", void 0);
__decorate([
    Input()
], CompactFieldsComponent.prototype, "rgb", void 0);
__decorate([
    Output()
], CompactFieldsComponent.prototype, "onChange", void 0);

let CompactComponent = class CompactComponent extends ColorWrap {
    constructor() {
        super();
        /** Color squares to display */
        this.colors = [
            '#4D4D4D',
            '#999999',
            '#FFFFFF',
            '#F44E3B',
            '#FE9200',
            '#FCDC00',
            '#DBDF00',
            '#A4DD00',
            '#68CCCA',
            '#73D8FF',
            '#AEA1FF',
            '#FDA1FF',
            '#333333',
            '#808080',
            '#cccccc',
            '#D33115',
            '#E27300',
            '#FCC400',
            '#B0BC00',
            '#68BC00',
            '#16A5A5',
            '#009CE0',
            '#7B64FF',
            '#FA28FF',
            '#000000',
            '#666666',
            '#B3B3B3',
            '#9F0500',
            '#C45100',
            '#FB9E00',
            '#808900',
            '#194D33',
            '#0C797D',
            '#0062B1',
            '#653294',
            '#AB149E',
        ];
        this.zDepth = 1;
        this.radius = 1;
        this.background = '#fff';
    }
    handleBlockChange({ hex, $event }) {
        if (isValidHex(hex)) {
            this.handleChange({ hex, source: 'hex' }, $event);
        }
    }
    handleValueChange({ data, $event }) {
        this.handleChange(data, $event);
    }
};
CompactComponent.ɵfac = function CompactComponent_Factory(t) { return new (t || CompactComponent)(); };
CompactComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: CompactComponent, selectors: [["color-compact"]], inputs: { colors: "colors", zDepth: "zDepth", radius: "radius", background: "background" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 6, vars: 9, consts: [[1, "color-compact", 3, "zDepth", "background", "radius"], [3, "color", "active", "onClick", 4, "ngFor", "ngForOf"], [1, "compact-clear"], [3, "hex", "rgb", "onChange"], [3, "color", "active", "onClick"]], template: function CompactComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "color-raised", 0);
        ɵngcc0.ɵɵelementStart(1, "div");
        ɵngcc0.ɵɵelementStart(2, "div");
        ɵngcc0.ɵɵtemplate(3, CompactComponent_color_compact_color_3_Template, 1, 2, "color-compact-color", 1);
        ɵngcc0.ɵɵelement(4, "div", 2);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(5, "color-compact-fields", 3);
        ɵngcc0.ɵɵlistener("onChange", function CompactComponent_Template_color_compact_fields_onChange_5_listener($event) { return ctx.handleValueChange($event); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("zDepth", ctx.zDepth)("background", ctx.background)("radius", ctx.radius);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵclassMapInterpolate1("compact-picker ", ctx.className, "");
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.colors);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("hex", ctx.hex)("rgb", ctx.rgb);
    } }, directives: [ɵngcc1.RaisedComponent, ɵngcc2.NgForOf, CompactFieldsComponent,
        CompactColorComponent], styles: [".color-compact[_ngcontent-%COMP%] {\n      background: #f6f6f6;\n      radius: 4px;\n    }\n    .compact-picker[_ngcontent-%COMP%] {\n      padding-top: 5px;\n      padding-left: 5px;\n      box-sizing: border-box;\n      width: 245px;\n    }\n    .compact-clear[_ngcontent-%COMP%] {\n      clear: both;\n    }"], changeDetection: 0 });
__decorate([
    Input()
], CompactComponent.prototype, "colors", void 0);
__decorate([
    Input()
], CompactComponent.prototype, "zDepth", void 0);
__decorate([
    Input()
], CompactComponent.prototype, "radius", void 0);
__decorate([
    Input()
], CompactComponent.prototype, "background", void 0);
let ColorCompactModule = class ColorCompactModule {
};
ColorCompactModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: ColorCompactModule });
ColorCompactModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function ColorCompactModule_Factory(t) { return new (t || ColorCompactModule)(); }, imports: [[CommonModule, EditableInputModule, SwatchModule, RaisedModule]] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CompactColorComponent, [{
        type: Component,
        args: [{
                selector: 'color-compact-color',
                template: `
  <div class="compact-color">
    <color-swatch class="swatch"
      [color]="color" [style]="swatchStyle"
      [focusStyle]="swatchFocus"
      (onClick)="handleClick($event)" (onHover)="onSwatchHover.emit($event)"
      >
      <div class="compact-dot"
        [class.active]="active" [style.background]="getContrastingColor(color)"
      ></div>
    </color-swatch>
  </div>
  `,
                changeDetection: ChangeDetectionStrategy.OnPush,
                preserveWhitespaces: false,
                styles: [`
  .compact-dot {
    position: absolute;
    top: 5px;
    right: 5px;
    bottom: 5px;
    left: 5px;
    border-radius: 50%;
    opacity: 0;
  }
  .compact-dot.active {
    opacity: 1;
  }
  `]
            }]
    }], function () { return []; }, { onClick: [{
            type: Output
        }], onSwatchHover: [{
            type: Output
        }], color: [{
            type: Input
        }], active: [{
            type: Input
        }] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CompactFieldsComponent, [{
        type: Component,
        args: [{
                selector: 'color-compact-fields',
                template: `
  <div class="compact-fields">
    <div class="compact-active" [style.background]="hex"></div>
    <div style="flex: 6 1 0%;">
      <color-editable-input
        [style]="{ wrap: HEXWrap, input: HEXinput, label: HEXlabel }"
        label="hex"
        [value]="hex"
        (onChange)="handleChange($event)"
      ></color-editable-input>
    </div>
    <div style="flex: 3 1 0%">
      <color-editable-input
        [style]="{ wrap: RGBwrap, input: RGBinput, label: RGBlabel }"
        label="r"
        [value]="rgb.r"
        (onChange)="handleChange($event)"
      ></color-editable-input>
    </div>
    <div style="flex: 3 1 0%">
      <color-editable-input
        [style]="{ wrap: RGBwrap, input: RGBinput, label: RGBlabel }"
        label="g"
        [value]="rgb.g"
        (onChange)="handleChange($event)"
      ></color-editable-input>
    </div>
    <div style="flex: 3 1 0%">
      <color-editable-input
        [style]="{ wrap: RGBwrap, input: RGBinput, label: RGBlabel }"
        label="b"
        [value]="rgb.b"
        (onChange)="handleChange($event)"
      ></color-editable-input>
    </div>
  </div>
  `,
                changeDetection: ChangeDetectionStrategy.OnPush,
                preserveWhitespaces: false,
                styles: [`
  .compact-fields {
    display: flex;
    padding-bottom: 6px;
    padding-right: 5px;
    position: relative;
  }
  .compact-active {
    position: absolute;
    top: 6px;
    left: 5px;
    height: 9px;
    width: 9px;
  }
  `]
            }]
    }], function () { return []; }, { onChange: [{
            type: Output
        }], hex: [{
            type: Input
        }], rgb: [{
            type: Input
        }] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CompactComponent, [{
        type: Component,
        args: [{
                selector: 'color-compact',
                template: `
  <color-raised class="color-compact" [zDepth]="zDepth" [background]="background" [radius]="radius">
    <div class="compact-picker {{ className }}">
      <div>
        <color-compact-color
          *ngFor="let color of colors" [color]="color"
          [active]="color.toLowerCase() === hex.toLowerCase()"
          (onClick)="handleBlockChange($event)"
        ></color-compact-color>
        <div class="compact-clear"></div>
      </div>
      <color-compact-fields
        [hex]="hex"
        [rgb]="rgb"
        (onChange)="handleValueChange($event)"
      ></color-compact-fields>
    </div>
  </color-raised>
  `,
                changeDetection: ChangeDetectionStrategy.OnPush,
                preserveWhitespaces: false,
                styles: [`
    .color-compact {
      background: #f6f6f6;
      radius: 4px;
    }
    .compact-picker {
      padding-top: 5px;
      padding-left: 5px;
      box-sizing: border-box;
      width: 245px;
    }
    .compact-clear {
      clear: both;
    }
  `]
            }]
    }], function () { return []; }, { colors: [{
            type: Input
        }], zDepth: [{
            type: Input
        }], radius: [{
            type: Input
        }], background: [{
            type: Input
        }] }); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ColorCompactModule, { declarations: function () { return [CompactComponent,
        CompactColorComponent,
        CompactFieldsComponent]; }, imports: function () { return [CommonModule, EditableInputModule, SwatchModule, RaisedModule]; }, exports: function () { return [CompactComponent,
        CompactColorComponent,
        CompactFieldsComponent]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ColorCompactModule, [{
        type: NgModule,
        args: [{
                declarations: [
                    CompactComponent,
                    CompactColorComponent,
                    CompactFieldsComponent,
                ],
                exports: [CompactComponent, CompactColorComponent, CompactFieldsComponent],
                imports: [CommonModule, EditableInputModule, SwatchModule, RaisedModule]
            }]
    }], null, null); })();

/**
 * Generated bundle index. Do not edit.
 */

export { ColorCompactModule, CompactComponent, CompactColorComponent as ɵa, CompactFieldsComponent as ɵb };

//# sourceMappingURL=ngx-color-compact.js.map