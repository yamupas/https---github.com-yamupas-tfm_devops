import { __decorate } from 'tslib';
import { CommonModule } from '@angular/common';
import { EventEmitter, Input, Output, Component, ChangeDetectionStrategy, NgModule } from '@angular/core';
import { isValidHex, ColorWrap, EditableInputModule, HueModule, AlphaModule, SwatchModule, SaturationModule } from 'ngx-color';

import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from 'ngx-color';

const _c0 = function (a0, a1, a2) { return { input: a0, wrap: a1, label: a2 }; };
let PhotoshopButtonComponent = class PhotoshopButtonComponent {
    constructor() {
        this.label = '';
        this.active = false;
        this.onClick = new EventEmitter();
    }
};
PhotoshopButtonComponent.ɵfac = function PhotoshopButtonComponent_Factory(t) { return new (t || PhotoshopButtonComponent)(); };
PhotoshopButtonComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: PhotoshopButtonComponent, selectors: [["color-photoshop-button"]], inputs: { label: "label", active: "active" }, outputs: { onClick: "onClick" }, decls: 2, vars: 3, consts: [[1, "photoshop-button", 3, "click"]], template: function PhotoshopButtonComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵlistener("click", function PhotoshopButtonComponent_Template_div_click_0_listener($event) { return ctx.onClick.emit($event); });
        ɵngcc0.ɵɵtext(1);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵclassProp("active", ctx.active);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate1(" ", ctx.label, " ");
    } }, styles: [".photoshop-button[_ngcontent-%COMP%] {\n      background-image: linear-gradient(\n        -180deg,\n        rgb(255, 255, 255) 0%,\n        rgb(230, 230, 230) 100%\n      );\n      border: 1px solid rgb(135, 135, 135);\n      border-radius: 2px;\n      height: 22px;\n      box-shadow: rgb(234, 234, 234) 0px 1px 0px 0px;\n      font-size: 14px;\n      color: rgb(0, 0, 0);\n      line-height: 20px;\n      text-align: center;\n      margin-bottom: 10px;\n      cursor: pointer;\n    }\n    .photoshop-button.active[_ngcontent-%COMP%] {\n      box-shadow: 0 0 0 1px #878787;\n    }"], changeDetection: 0 });
__decorate([
    Input()
], PhotoshopButtonComponent.prototype, "label", void 0);
__decorate([
    Input()
], PhotoshopButtonComponent.prototype, "active", void 0);
__decorate([
    Output()
], PhotoshopButtonComponent.prototype, "onClick", void 0);

let PhotoshopFieldsComponent = class PhotoshopFieldsComponent {
    constructor() {
        this.onChange = new EventEmitter();
        this.RGBinput = {
            marginLeft: '35%',
            width: '40%',
            height: '22px',
            border: '1px solid rgb(136, 136, 136)',
            boxShadow: 'rgba(0, 0, 0, 0.1) 0px 1px 1px inset, rgb(236, 236, 236) 0px 1px 0px 0px',
            marginBottom: '2px',
            fontSize: '13px',
            paddingLeft: '3px',
            marginRight: '10px',
        };
        this.RGBwrap = {
            position: 'relative',
        };
        this.RGBlabel = {
            left: '0px',
            width: '34px',
            textTransform: 'uppercase',
            fontSize: '13px',
            height: '24px',
            lineHeight: '24px',
            position: 'absolute',
        };
        this.HEXinput = {
            marginLeft: '20%',
            width: '80%',
            height: '22px',
            border: '1px solid #888888',
            boxShadow: 'inset 0 1px 1px rgba(0,0,0,.1), 0 1px 0 0 #ECECEC',
            marginBottom: '3px',
            fontSize: '13px',
            paddingLeft: '3px',
        };
        this.HEXwrap = {
            position: 'relative',
        };
        this.HEXlabel = {
            position: 'absolute',
            top: '0px',
            left: '0px',
            width: '14px',
            textTransform: 'uppercase',
            fontSize: '13px',
            height: '24px',
            lineHeight: '24px',
        };
    }
    round(v) {
        return Math.round(v);
    }
    handleValueChange({ data, $event }) {
        if (data['#']) {
            if (isValidHex(data['#'])) {
                this.onChange.emit({
                    data: {
                        hex: data['#'],
                        source: 'hex',
                    },
                    $event,
                });
            }
        }
        else if (data.r || data.g || data.b) {
            this.onChange.emit({
                data: {
                    r: data.r || this.rgb.r,
                    g: data.g || this.rgb.g,
                    b: data.b || this.rgb.b,
                    source: 'rgb',
                },
                $event,
            });
        }
        else if (data.h || data.s || data.v) {
            this.onChange.emit({
                data: {
                    h: data.h || this.hsv.h,
                    s: data.s || this.hsv.s,
                    v: data.v || this.hsv.v,
                    source: 'hsv',
                },
                $event,
            });
        }
    }
};
PhotoshopFieldsComponent.ɵfac = function PhotoshopFieldsComponent_Factory(t) { return new (t || PhotoshopFieldsComponent)(); };
PhotoshopFieldsComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: PhotoshopFieldsComponent, selectors: [["color-photoshop-fields"]], inputs: { rgb: "rgb", hsv: "hsv", hex: "hex" }, outputs: { onChange: "onChange" }, decls: 17, vars: 49, consts: [[1, "photoshop-fields"], ["label", "h", 3, "value", "onChange"], ["label", "s", 3, "value", "onChange"], ["label", "v", 3, "value", "onChange"], [1, "photoshop-divider"], ["label", "r", 3, "value", "onChange"], ["label", "g", 3, "value", "onChange"], ["label", "b", 3, "value", "onChange"], ["label", "#", 3, "value", "onChange"], [1, "photoshop-field-symbols"], [1, "photoshop-symbol"]], template: function PhotoshopFieldsComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "color-editable-input", 1);
        ɵngcc0.ɵɵlistener("onChange", function PhotoshopFieldsComponent_Template_color_editable_input_onChange_1_listener($event) { return ctx.handleValueChange($event); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(2, "color-editable-input", 2);
        ɵngcc0.ɵɵlistener("onChange", function PhotoshopFieldsComponent_Template_color_editable_input_onChange_2_listener($event) { return ctx.handleValueChange($event); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(3, "color-editable-input", 3);
        ɵngcc0.ɵɵlistener("onChange", function PhotoshopFieldsComponent_Template_color_editable_input_onChange_3_listener($event) { return ctx.handleValueChange($event); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(4, "div", 4);
        ɵngcc0.ɵɵelementStart(5, "color-editable-input", 5);
        ɵngcc0.ɵɵlistener("onChange", function PhotoshopFieldsComponent_Template_color_editable_input_onChange_5_listener($event) { return ctx.handleValueChange($event); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(6, "color-editable-input", 6);
        ɵngcc0.ɵɵlistener("onChange", function PhotoshopFieldsComponent_Template_color_editable_input_onChange_6_listener($event) { return ctx.handleValueChange($event); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(7, "color-editable-input", 7);
        ɵngcc0.ɵɵlistener("onChange", function PhotoshopFieldsComponent_Template_color_editable_input_onChange_7_listener($event) { return ctx.handleValueChange($event); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(8, "div", 4);
        ɵngcc0.ɵɵelementStart(9, "color-editable-input", 8);
        ɵngcc0.ɵɵlistener("onChange", function PhotoshopFieldsComponent_Template_color_editable_input_onChange_9_listener($event) { return ctx.handleValueChange($event); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(10, "div", 9);
        ɵngcc0.ɵɵelementStart(11, "div", 10);
        ɵngcc0.ɵɵtext(12, "\u00B0");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(13, "div", 10);
        ɵngcc0.ɵɵtext(14, "%");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(15, "div", 10);
        ɵngcc0.ɵɵtext(16, "%");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵstyleMap(ɵngcc0.ɵɵpureFunction3(21, _c0, ctx.RGBinput, ctx.RGBwrap, ctx.RGBlabel));
        ɵngcc0.ɵɵproperty("value", ctx.round(ctx.hsv.h));
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵstyleMap(ɵngcc0.ɵɵpureFunction3(25, _c0, ctx.RGBinput, ctx.RGBwrap, ctx.RGBlabel));
        ɵngcc0.ɵɵproperty("value", ctx.round(ctx.hsv.s * 100));
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵstyleMap(ɵngcc0.ɵɵpureFunction3(29, _c0, ctx.RGBinput, ctx.RGBwrap, ctx.RGBlabel));
        ɵngcc0.ɵɵproperty("value", ctx.round(ctx.hsv.v * 100));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵstyleMap(ɵngcc0.ɵɵpureFunction3(33, _c0, ctx.RGBinput, ctx.RGBwrap, ctx.RGBlabel));
        ɵngcc0.ɵɵproperty("value", ctx.rgb.r);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵstyleMap(ɵngcc0.ɵɵpureFunction3(37, _c0, ctx.RGBinput, ctx.RGBwrap, ctx.RGBlabel));
        ɵngcc0.ɵɵproperty("value", ctx.rgb.g);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵstyleMap(ɵngcc0.ɵɵpureFunction3(41, _c0, ctx.RGBinput, ctx.RGBwrap, ctx.RGBlabel));
        ɵngcc0.ɵɵproperty("value", ctx.rgb.b);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵstyleMap(ɵngcc0.ɵɵpureFunction3(45, _c0, ctx.HEXinput, ctx.HEXwrap, ctx.HEXlabel));
        ɵngcc0.ɵɵproperty("value", ctx.hex.replace("#", ""));
    } }, directives: [ɵngcc1.EditableInputComponent], styles: [".photoshop-fields[_ngcontent-%COMP%] {\n      padding-top: 5px;\n      padding-bottom: 9px;\n      width: 85px;\n      position: relative;\n    }\n    .photoshop-field-symbols[_ngcontent-%COMP%] {\n      position: absolute;\n      top: 5px;\n      right: -7px;\n      font-size: 13px;\n    }\n    .photoshop-symbol[_ngcontent-%COMP%] {\n      height: 24px;\n      line-height: 24px;\n      padding-bottom: 7px;\n    }\n    .photoshop-divider[_ngcontent-%COMP%] {\n      height: 5px;\n    }"], changeDetection: 0 });
__decorate([
    Input()
], PhotoshopFieldsComponent.prototype, "rgb", void 0);
__decorate([
    Input()
], PhotoshopFieldsComponent.prototype, "hsv", void 0);
__decorate([
    Input()
], PhotoshopFieldsComponent.prototype, "hex", void 0);
__decorate([
    Output()
], PhotoshopFieldsComponent.prototype, "onChange", void 0);

let PhotoshopPreviewsComponent = class PhotoshopPreviewsComponent {
    constructor() {
        this.currentColor = '';
        this.backgroundNew = '';
    }
    ngOnChanges() {
        this.backgroundNew = `rgb(${this.rgb.r},${this.rgb.g}, ${this.rgb.b})`;
    }
};
PhotoshopPreviewsComponent.ɵfac = function PhotoshopPreviewsComponent_Factory(t) { return new (t || PhotoshopPreviewsComponent)(); };
PhotoshopPreviewsComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: PhotoshopPreviewsComponent, selectors: [["color-photoshop-previews"]], inputs: { currentColor: "currentColor", rgb: "rgb" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], decls: 8, vars: 4, consts: [[1, "photoshop-label"], [1, "photoshop-swatches"], [1, "photoshop-new"], [1, "photoshop-current"]], template: function PhotoshopPreviewsComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div");
        ɵngcc0.ɵɵelementStart(1, "div", 0);
        ɵngcc0.ɵɵtext(2, "new");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(3, "div", 1);
        ɵngcc0.ɵɵelement(4, "div", 2);
        ɵngcc0.ɵɵelement(5, "div", 3);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(6, "div", 0);
        ɵngcc0.ɵɵtext(7, "current");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵstyleProp("background", ctx.backgroundNew, ɵngcc0.ɵɵdefaultStyleSanitizer);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵstyleProp("background", ctx.currentColor, ɵngcc0.ɵɵdefaultStyleSanitizer);
    } }, styles: [".photoshop-swatches[_ngcontent-%COMP%] {\n    border: 1px solid #B3B3B3;\n    border-bottom: 1px solid #F0F0F0;\n    margin-bottom: 2px;\n    margin-top: 1px;\n  }\n  .photoshop-new[_ngcontent-%COMP%] {\n    height: 34px;\n    box-shadow: inset 1px 0 0 #000, inset -1px 0 0 #000, inset 0 1px 0 #000;\n  }\n  .photoshop-current[_ngcontent-%COMP%] {\n    height: 34px;\n    box-shadow: inset 1px 0 0 #000, inset -1px 0 0 #000, inset 0 -1px 0 #000;\n  }\n  .photoshop-label[_ngcontent-%COMP%] {\n    font-size: 14px;\n    color: #000;\n    text-align: center;\n  }"], changeDetection: 0 });
__decorate([
    Input()
], PhotoshopPreviewsComponent.prototype, "rgb", void 0);
__decorate([
    Input()
], PhotoshopPreviewsComponent.prototype, "currentColor", void 0);

let PhotoshopComponent = class PhotoshopComponent extends ColorWrap {
    constructor() {
        super();
        /** Title text */
        this.header = 'Color Picker';
        this.onAccept = new EventEmitter();
        this.onCancel = new EventEmitter();
        this.circle = {
            width: '12px',
            height: '12px',
            borderRadius: '6px',
            boxShadow: 'rgb(255, 255, 255) 0px 0px 0px 1px inset',
            transform: 'translate(-6px, -10px)',
        };
    }
    handleValueChange({ data, $event }) {
        this.handleChange(data, $event);
    }
};
PhotoshopComponent.ɵfac = function PhotoshopComponent_Factory(t) { return new (t || PhotoshopComponent)(); };
PhotoshopComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: PhotoshopComponent, selectors: [["color-photoshop"]], inputs: { header: "header" }, outputs: { onAccept: "onAccept", onCancel: "onCancel" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 16, vars: 15, consts: [[1, "photoshop-head"], [1, "photoshop-body"], [1, "photoshop-saturation"], [3, "hsl", "hsv", "circle", "onChange"], [1, "photoshop-hue"], ["direction", "vertical", 3, "hsl", "hidePointer", "onChange"], [1, "photoshop-controls"], [1, "photoshop-top"], [1, "photoshop-previews"], [3, "rgb", "currentColor"], [1, "photoshop-actions"], ["label", "OK", 3, "active", "onClick"], ["label", "Cancel", 3, "onClick"], [3, "rgb", "hex", "hsv", "onChange"]], template: function PhotoshopComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div");
        ɵngcc0.ɵɵelementStart(1, "div", 0);
        ɵngcc0.ɵɵtext(2);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(3, "div", 1);
        ɵngcc0.ɵɵelementStart(4, "div", 2);
        ɵngcc0.ɵɵelementStart(5, "color-saturation", 3);
        ɵngcc0.ɵɵlistener("onChange", function PhotoshopComponent_Template_color_saturation_onChange_5_listener($event) { return ctx.handleValueChange($event); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(6, "div", 4);
        ɵngcc0.ɵɵelementStart(7, "color-hue", 5);
        ɵngcc0.ɵɵlistener("onChange", function PhotoshopComponent_Template_color_hue_onChange_7_listener($event) { return ctx.handleValueChange($event); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(8, "div", 6);
        ɵngcc0.ɵɵelementStart(9, "div", 7);
        ɵngcc0.ɵɵelementStart(10, "div", 8);
        ɵngcc0.ɵɵelement(11, "color-photoshop-previews", 9);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(12, "div", 10);
        ɵngcc0.ɵɵelementStart(13, "color-photoshop-button", 11);
        ɵngcc0.ɵɵlistener("onClick", function PhotoshopComponent_Template_color_photoshop_button_onClick_13_listener($event) { return ctx.onAccept.emit($event); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(14, "color-photoshop-button", 12);
        ɵngcc0.ɵɵlistener("onClick", function PhotoshopComponent_Template_color_photoshop_button_onClick_14_listener($event) { return ctx.onCancel.emit($event); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(15, "color-photoshop-fields", 13);
        ɵngcc0.ɵɵlistener("onChange", function PhotoshopComponent_Template_color_photoshop_fields_onChange_15_listener($event) { return ctx.handleValueChange($event); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵclassMapInterpolate1("photoshop-picker ", ctx.className, "");
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵtextInterpolate(ctx.header);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("hsl", ctx.hsl)("hsv", ctx.hsv)("circle", ctx.circle);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("hsl", ctx.hsl)("hidePointer", true);
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵproperty("rgb", ctx.rgb)("currentColor", ctx.currentColor);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("active", true);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("rgb", ctx.rgb)("hex", ctx.hex)("hsv", ctx.hsv);
    } }, directives: [ɵngcc1.SaturationComponent, ɵngcc1.HueComponent, PhotoshopPreviewsComponent,
        PhotoshopButtonComponent,
        PhotoshopFieldsComponent], styles: [".photoshop-picker[_ngcontent-%COMP%] {\n      background: rgb(220, 220, 220);\n      border-radius: 4px;\n      box-shadow: rgba(0, 0, 0, 0.25) 0px 0px 0px 1px, rgba(0, 0, 0, 0.15) 0px 8px 16px;\n      box-sizing: initial; width: 513px;\n    }\n    .photoshop-head[_ngcontent-%COMP%] {\n      background-image: linear-gradient(\n        -180deg,\n        rgb(240, 240, 240) 0%,\n        rgb(212, 212, 212) 100%\n      );\n      border-bottom: 1px solid rgb(177, 177, 177);\n      box-shadow: rgba(255, 255, 255, 0.2) 0px 1px 0px 0px inset,\n        rgba(0, 0, 0, 0.02) 0px -1px 0px 0px inset;\n      height: 23px;\n      line-height: 24px;\n      border-radius: 4px 4px 0px 0px;\n      font-size: 13px;\n      color: rgb(77, 77, 77);\n      text-align: center;\n    }\n    .photoshop-body[_ngcontent-%COMP%] {\n      padding: 15px 15px 0px;\n      display: flex;\n    }\n    .photoshop-saturation[_ngcontent-%COMP%] {\n      width: 256px;\n      height: 256px;\n      position: relative;\n      border-width: 2px;\n      border-style: solid;\n      border-color: rgb(179, 179, 179) rgb(179, 179, 179) rgb(240, 240, 240);\n      border-image: initial;\n      overflow: hidden;\n    }\n    .photoshop-hue[_ngcontent-%COMP%] {\n      position: relative;\n      height: 256px;\n      width: 23px;\n      margin-left: 10px;\n      border-width: 2px;\n      border-style: solid;\n      border-color: rgb(179, 179, 179) rgb(179, 179, 179) rgb(240, 240, 240);\n      border-image: initial;\n    }\n    .photoshop-controls[_ngcontent-%COMP%] {\n      width: 180px;\n      margin-left: 10px;\n    }\n    .photoshop-top[_ngcontent-%COMP%] {\n      display: flex;\n    }\n    .photoshop-previews[_ngcontent-%COMP%] {\n      width: 60px;\n    }\n    .photoshop-actions[_ngcontent-%COMP%] {\n      -webkit-box-flex: 1;\n      flex: 1 1 0%;\n      margin-left: 20px;\n    }"], changeDetection: 0 });
__decorate([
    Input()
], PhotoshopComponent.prototype, "header", void 0);
__decorate([
    Output()
], PhotoshopComponent.prototype, "onAccept", void 0);
__decorate([
    Output()
], PhotoshopComponent.prototype, "onCancel", void 0);
let ColorPhotoshopModule = class ColorPhotoshopModule {
};
ColorPhotoshopModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: ColorPhotoshopModule });
ColorPhotoshopModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function ColorPhotoshopModule_Factory(t) { return new (t || ColorPhotoshopModule)(); }, imports: [[
            CommonModule,
            EditableInputModule,
            HueModule,
            AlphaModule,
            SwatchModule,
            SaturationModule,
        ]] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(PhotoshopButtonComponent, [{
        type: Component,
        args: [{
                selector: 'color-photoshop-button',
                template: `
    <div class="photoshop-button"  [class.active]="active"
      (click)="onClick.emit($event)"
    >
      {{ label }}
    </div>
  `,
                changeDetection: ChangeDetectionStrategy.OnPush,
                preserveWhitespaces: false,
                styles: [`
    .photoshop-button {
      background-image: linear-gradient(
        -180deg,
        rgb(255, 255, 255) 0%,
        rgb(230, 230, 230) 100%
      );
      border: 1px solid rgb(135, 135, 135);
      border-radius: 2px;
      height: 22px;
      box-shadow: rgb(234, 234, 234) 0px 1px 0px 0px;
      font-size: 14px;
      color: rgb(0, 0, 0);
      line-height: 20px;
      text-align: center;
      margin-bottom: 10px;
      cursor: pointer;
    }
    .photoshop-button.active {
      box-shadow: 0 0 0 1px #878787;
    }
  `]
            }]
    }], function () { return []; }, { label: [{
            type: Input
        }], active: [{
            type: Input
        }], onClick: [{
            type: Output
        }] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(PhotoshopFieldsComponent, [{
        type: Component,
        args: [{
                selector: 'color-photoshop-fields',
                template: `
  <div class="photoshop-fields">
    <color-editable-input
      [value]="round(hsv.h)"
      label="h"
      (onChange)="handleValueChange($event)"
      [style]="{input: RGBinput, wrap: RGBwrap, label: RGBlabel}"
    ></color-editable-input>
    <color-editable-input
      [value]="round(hsv.s * 100)"
      label="s"
      (onChange)="handleValueChange($event)"
      [style]="{input: RGBinput, wrap: RGBwrap, label: RGBlabel}"
    ></color-editable-input>
    <color-editable-input
      [value]="round(hsv.v * 100)"
      label="v"
      (onChange)="handleValueChange($event)"
      [style]="{input: RGBinput, wrap: RGBwrap, label: RGBlabel}"
    ></color-editable-input>
    <div class="photoshop-divider"></div>
    <color-editable-input
      [value]="rgb.r"
      label="r"
      (onChange)="handleValueChange($event)"
      [style]="{input: RGBinput, wrap: RGBwrap, label: RGBlabel}"
    ></color-editable-input>
    <color-editable-input
      [value]="rgb.g"
      label="g"
      (onChange)="handleValueChange($event)"
      [style]="{input: RGBinput, wrap: RGBwrap, label: RGBlabel}"
    ></color-editable-input>
    <color-editable-input
      [value]="rgb.b"
      label="b"
      (onChange)="handleValueChange($event)"
      [style]="{input: RGBinput, wrap: RGBwrap, label: RGBlabel}"
    ></color-editable-input>
    <div class="photoshop-divider"></div>
    <color-editable-input
      [value]="hex.replace('#', '')"
      label="#"
      (onChange)="handleValueChange($event)"
      [style]="{input: HEXinput, wrap: HEXwrap, label: HEXlabel}"
    ></color-editable-input>
    <div class="photoshop-field-symbols">
      <div class="photoshop-symbol">°</div>
      <div class="photoshop-symbol">%</div>
      <div class="photoshop-symbol">%</div>
    </div>
  </div>
  `,
                changeDetection: ChangeDetectionStrategy.OnPush,
                preserveWhitespaces: false,
                styles: [`
    .photoshop-fields {
      padding-top: 5px;
      padding-bottom: 9px;
      width: 85px;
      position: relative;
    }
    .photoshop-field-symbols {
      position: absolute;
      top: 5px;
      right: -7px;
      font-size: 13px;
    }
    .photoshop-symbol {
      height: 24px;
      line-height: 24px;
      padding-bottom: 7px;
    }
    .photoshop-divider {
      height: 5px;
    }
  `]
            }]
    }], function () { return []; }, { onChange: [{
            type: Output
        }], rgb: [{
            type: Input
        }], hsv: [{
            type: Input
        }], hex: [{
            type: Input
        }] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(PhotoshopPreviewsComponent, [{
        type: Component,
        args: [{
                selector: 'color-photoshop-previews',
                template: `
  <div>
    <div class="photoshop-label">new</div>
    <div class="photoshop-swatches">
      <div class="photoshop-new" [style.background]="backgroundNew"></div>
      <div class="photoshop-current" [style.background]="currentColor"></div>
    </div>
    <div class="photoshop-label">current</div>
  </div>
  `,
                changeDetection: ChangeDetectionStrategy.OnPush,
                preserveWhitespaces: false,
                styles: [`
  .photoshop-swatches {
    border: 1px solid #B3B3B3;
    border-bottom: 1px solid #F0F0F0;
    margin-bottom: 2px;
    margin-top: 1px;
  }
  .photoshop-new {
    height: 34px;
    box-shadow: inset 1px 0 0 #000, inset -1px 0 0 #000, inset 0 1px 0 #000;
  }
  .photoshop-current {
    height: 34px;
    box-shadow: inset 1px 0 0 #000, inset -1px 0 0 #000, inset 0 -1px 0 #000;
  }
  .photoshop-label {
    font-size: 14px;
    color: #000;
    text-align: center;
  }
  `]
            }]
    }], function () { return []; }, { currentColor: [{
            type: Input
        }], rgb: [{
            type: Input
        }] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(PhotoshopComponent, [{
        type: Component,
        args: [{
                selector: 'color-photoshop',
                template: `
  <div class="photoshop-picker {{ className }}">
    <div class="photoshop-head">{{ header }}</div>
    <div class="photoshop-body">
      <div class="photoshop-saturation">
        <color-saturation
          [hsl]="hsl" [hsv]="hsv" [circle]="circle"
          (onChange)="handleValueChange($event)"
        ></color-saturation>
      </div>
      <div class="photoshop-hue">
        <color-hue direction="vertical"
          [hsl]="hsl" [hidePointer]="true"
          (onChange)="handleValueChange($event)"
        ></color-hue>
      </div>
      <div class="photoshop-controls">
        <div class="photoshop-top">
          <div class="photoshop-previews">
            <color-photoshop-previews
              [rgb]="rgb" [currentColor]="currentColor"
            ></color-photoshop-previews>
          </div>
          <div class="photoshop-actions">
            <color-photoshop-button label="OK"
              [active]="true" (onClick)="onAccept.emit($event)"
            ></color-photoshop-button>
            <color-photoshop-button label="Cancel"
              (onClick)="onCancel.emit($event)"
            >
            </color-photoshop-button>
            <color-photoshop-fields
              [rgb]="rgb" [hex]="hex" [hsv]="hsv"
              (onChange)="handleValueChange($event)"
            ></color-photoshop-fields>
          </div>
        </div>
      </div>
    </div>
  </div>
  `,
                changeDetection: ChangeDetectionStrategy.OnPush,
                preserveWhitespaces: false,
                styles: [`
    .photoshop-picker {
      background: rgb(220, 220, 220);
      border-radius: 4px;
      box-shadow: rgba(0, 0, 0, 0.25) 0px 0px 0px 1px, rgba(0, 0, 0, 0.15) 0px 8px 16px;
      box-sizing: initial; width: 513px;
    }
    .photoshop-head {
      background-image: linear-gradient(
        -180deg,
        rgb(240, 240, 240) 0%,
        rgb(212, 212, 212) 100%
      );
      border-bottom: 1px solid rgb(177, 177, 177);
      box-shadow: rgba(255, 255, 255, 0.2) 0px 1px 0px 0px inset,
        rgba(0, 0, 0, 0.02) 0px -1px 0px 0px inset;
      height: 23px;
      line-height: 24px;
      border-radius: 4px 4px 0px 0px;
      font-size: 13px;
      color: rgb(77, 77, 77);
      text-align: center;
    }
    .photoshop-body {
      padding: 15px 15px 0px;
      display: flex;
    }
    .photoshop-saturation {
      width: 256px;
      height: 256px;
      position: relative;
      border-width: 2px;
      border-style: solid;
      border-color: rgb(179, 179, 179) rgb(179, 179, 179) rgb(240, 240, 240);
      border-image: initial;
      overflow: hidden;
    }
    .photoshop-hue {
      position: relative;
      height: 256px;
      width: 23px;
      margin-left: 10px;
      border-width: 2px;
      border-style: solid;
      border-color: rgb(179, 179, 179) rgb(179, 179, 179) rgb(240, 240, 240);
      border-image: initial;
    }
    .photoshop-controls {
      width: 180px;
      margin-left: 10px;
    }
    .photoshop-top {
      display: flex;
    }
    .photoshop-previews {
      width: 60px;
    }
    .photoshop-actions {
      -webkit-box-flex: 1;
      flex: 1 1 0%;
      margin-left: 20px;
    }
  `]
            }]
    }], function () { return []; }, { header: [{
            type: Input
        }], onAccept: [{
            type: Output
        }], onCancel: [{
            type: Output
        }] }); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ColorPhotoshopModule, { declarations: function () { return [PhotoshopComponent,
        PhotoshopPreviewsComponent,
        PhotoshopButtonComponent,
        PhotoshopFieldsComponent]; }, imports: function () { return [CommonModule,
        EditableInputModule,
        HueModule,
        AlphaModule,
        SwatchModule,
        SaturationModule]; }, exports: function () { return [PhotoshopComponent,
        PhotoshopPreviewsComponent,
        PhotoshopButtonComponent,
        PhotoshopFieldsComponent]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ColorPhotoshopModule, [{
        type: NgModule,
        args: [{
                declarations: [
                    PhotoshopComponent,
                    PhotoshopPreviewsComponent,
                    PhotoshopButtonComponent,
                    PhotoshopFieldsComponent,
                ],
                exports: [
                    PhotoshopComponent,
                    PhotoshopPreviewsComponent,
                    PhotoshopButtonComponent,
                    PhotoshopFieldsComponent,
                ],
                imports: [
                    CommonModule,
                    EditableInputModule,
                    HueModule,
                    AlphaModule,
                    SwatchModule,
                    SaturationModule,
                ]
            }]
    }], null, null); })();

/**
 * Generated bundle index. Do not edit.
 */

export { ColorPhotoshopModule, PhotoshopComponent, PhotoshopPreviewsComponent as ɵa, PhotoshopButtonComponent as ɵb, PhotoshopFieldsComponent as ɵc };

//# sourceMappingURL=ngx-color-photoshop.js.map