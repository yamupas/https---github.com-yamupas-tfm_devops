{"version":3,"file":"ngx-color-alpha.js","sources":["ng:/ngx-color/alpha/alpha-picker.component.ts","ng:/ngx-color/alpha/ngx-color-alpha.ts"],"names":[],"mappings":";;;;;;;IAsCa,oBAAoB,GAAjC,MAAa,oBAAqB,SAAQ,SAAS;AAAG,IAcpD;AACF,QAAI,KAAK,EAAE,CAAC;AACZ;AAEsB,QAhBX,UAAK,GAAoB,GAAG,CAAC;AACxC;AACM,QAAK,WAAM,GAAoB,EAAE,CAAC;AACxC,QAAW,cAAS,GAA8B,YAAY,CAAC;AAC/D,QAAE,YAAO,GAA4B;AACrC,YAAI,KAAK,EAAE,MAAM;AACjB,YAAI,MAAM,EAAE,MAAM;AAClB,YAAI,YAAY,EAAE,KAAK;AACvB,YAAI,SAAS,EAAE,uBAAuB;AACtC,YAAI,SAAS,EAAE,iCAAiC;AAChD,SAAG,CAAC;AACJ,KAGG;AACH,IAAE,WAAW;AACb,QAAI,IAAI,IAAI,CAAC,SAAS,KAAK,UAAU,EAAE;AACvC,YAAM,IAAI,CAAC,OAAO,CAAC,SAAS,GAAG,uBAAuB,CAAC;AACvD,SAAK;AACL,QAAI,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;AACpD,KAAG;AACH,IAAE,kBAAkB,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE;AACrC,QAAI,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;AACpC,KAAG;AACH;;;;;;;;;;;;;wNAAC;AAxBU;AAAa,IAArB,KAAK,EAAE;AAAC,mDAA6B;AAE7B;AAAa,IAArB,KAAK,EAAE;AAAC,oDAA6B;AAC7B;AAAa,IAArB,KAAK,EAAE;AAAC,uDAAoD,CAsB/D;AA3Ba,oBAAoB,oBA3BhC,xCAuDD,IAKa,gBAAgB,GAA7B,MAAa,gBAAgB;CA5DnB,CAAC,FA4DqB,EAAA;SA3D9B,QAAQ,EAAE,oBAAoB,UAC9B,QAAQ,EAAE,3DA0DC,gBAAgB,oBAL5B,QAAQ,CAAC,UACR,YAAY,EAAE,CAAC;aAAoB,CAAC,UACpC,OAAO,EAAE,CAAC,oBAAoB,CAAC,UAC/B,OAAO,EAAE,CAAC,YAAY,EAAE,WAAW,EAAE,gBAAgB,CAAC,OACvD,CAAC,IACW,gBAAgB,CAAG;;aA/C7B,UAWD;aAAe,EAAE;qBAAuB,CAAC,MAAM,UAC/C;SAAmB,EAAE,KAAK;OAVxB;;GAOD,OAIF,CAAC,IACW;gBAAoB,CA0BhC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;0BAQD;AAAC;ACxED;AACA;AACA;AACA;AACA;AACS","sourcesContent":["import { CommonModule } from '@angular/common';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  NgModule,\n  OnChanges,\n} from '@angular/core';\n\nimport { AlphaModule, CheckboardModule, ColorWrap, toState } from 'ngx-color';\n\n@Component({\n  selector: 'color-alpha-picker',\n  template: `\n    <div class=\"alpha-picker {{ className }}\"\n      [style.width.px]=\"width\" [style.height.px]=\"height\">\n      <color-alpha\n        [hsl]=\"hsl\"\n        [rgb]=\"rgb\"\n        [pointer]=\"pointer\"\n        [direction]=\"direction\"\n        (onChange)=\"handlePickerChange($event)\"\n      ></color-alpha>\n    </div>\n  `,\n  styles: [\n    `\n    .alpha-picker {\n      position: relative;\n    }\n    .color-alpha {\n      radius: 2px;\n    }\n  `,\n  ],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  preserveWhitespaces: false,\n})\nexport class AlphaPickerComponent extends ColorWrap implements OnChanges {\n  /** Pixel value for picker width */\n  @Input() width: string | number = 316;\n  /** Pixel value for picker height */\n  @Input() height: string | number = 16;\n  @Input() direction: 'horizontal' | 'vertical' = 'horizontal';\n  pointer: {[key: string]: string} = {\n    width: '18px',\n    height: '18px',\n    borderRadius: '50%',\n    transform: 'translate(-9px, -2px)',\n    boxShadow: '0 1px 4px 0 rgba(0, 0, 0, 0.37)',\n  };\n\n  constructor() {\n    super();\n  }\n  ngOnChanges() {\n    if (this.direction === 'vertical') {\n      this.pointer.transform = 'translate(-3px, -9px)';\n    }\n    this.setState(toState(this.color, this.oldHue));\n  }\n  handlePickerChange({ data, $event }) {\n    this.handleChange(data, $event);\n  }\n}\n\n@NgModule({\n  declarations: [AlphaPickerComponent],\n  exports: [AlphaPickerComponent],\n  imports: [CommonModule, AlphaModule, CheckboardModule],\n})\nexport class ColorAlphaModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './alpha-picker.component';\n"]}