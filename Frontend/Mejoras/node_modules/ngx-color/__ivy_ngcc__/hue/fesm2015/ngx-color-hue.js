import { __decorate } from 'tslib';
import { CommonModule } from '@angular/common';
import { Input, Component, ChangeDetectionStrategy, NgModule } from '@angular/core';
import { ColorWrap, toState, HueModule } from 'ngx-color';

import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from 'ngx-color';
let HuePickerComponent = class HuePickerComponent extends ColorWrap {
    constructor() {
        super();
        /** Pixel value for picker width */
        this.width = 316;
        /** Pixel value for picker height */
        this.height = 16;
        this.radius = 2;
        this.direction = 'horizontal';
        this.pointer = {
            width: '18px',
            height: '18px',
            borderRadius: '50%',
            transform: 'translate(-9px, -2px)',
            backgroundColor: 'rgb(248, 248, 248)',
            boxShadow: '0 1px 4px 0 rgba(0, 0, 0, 0.37)',
        };
    }
    ngOnChanges() {
        if (this.direction === 'vertical') {
            this.pointer.transform = 'translate(-3px, -9px)';
        }
        this.setState(toState(this.color, this.oldHue));
    }
    handlePickerChange({ data, $event }) {
        this.handleChange({ a: 1, h: data.h, l: 0.5, s: 1 }, $event);
    }
};
HuePickerComponent.ɵfac = function HuePickerComponent_Factory(t) { return new (t || HuePickerComponent)(); };
HuePickerComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: HuePickerComponent, selectors: [["color-hue-picker"]], inputs: { width: "width", height: "height", radius: "radius", direction: "direction" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature], decls: 2, vars: 11, consts: [[3, "hsl", "pointer", "direction", "radius", "onChange"]], template: function HuePickerComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div");
        ɵngcc0.ɵɵelementStart(1, "color-hue", 0);
        ɵngcc0.ɵɵlistener("onChange", function HuePickerComponent_Template_color_hue_onChange_1_listener($event) { return ctx.handlePickerChange($event); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵclassMapInterpolate1("hue-picker ", ctx.className, "");
        ɵngcc0.ɵɵstyleProp("width", ctx.width, "px")("height", ctx.height, "px");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("hsl", ctx.hsl)("pointer", ctx.pointer)("direction", ctx.direction)("radius", ctx.radius);
    } }, directives: [ɵngcc1.HueComponent], styles: [".hue-picker[_ngcontent-%COMP%] {\n      position: relative;\n    }"], changeDetection: 0 });
__decorate([
    Input()
], HuePickerComponent.prototype, "width", void 0);
__decorate([
    Input()
], HuePickerComponent.prototype, "height", void 0);
__decorate([
    Input()
], HuePickerComponent.prototype, "radius", void 0);
__decorate([
    Input()
], HuePickerComponent.prototype, "direction", void 0);
let ColorHueModule = class ColorHueModule {
};
ColorHueModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: ColorHueModule });
ColorHueModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function ColorHueModule_Factory(t) { return new (t || ColorHueModule)(); }, imports: [[CommonModule, HueModule]] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(HuePickerComponent, [{
        type: Component,
        args: [{
                selector: 'color-hue-picker',
                template: `
  <div class="hue-picker {{ className }}"
    [style.width.px]="width" [style.height.px]="height"
  >
    <color-hue [hsl]="hsl" [pointer]="pointer"
      [direction]="direction" [radius]="radius"
      (onChange)="handlePickerChange($event)"
    ></color-hue>
  </div>
  `,
                changeDetection: ChangeDetectionStrategy.OnPush,
                preserveWhitespaces: false,
                styles: [`
    .hue-picker {
      position: relative;
    }
  `]
            }]
    }], function () { return []; }, { width: [{
            type: Input
        }], height: [{
            type: Input
        }], radius: [{
            type: Input
        }], direction: [{
            type: Input
        }] }); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ColorHueModule, { declarations: function () { return [HuePickerComponent]; }, imports: function () { return [CommonModule, HueModule]; }, exports: function () { return [HuePickerComponent]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ColorHueModule, [{
        type: NgModule,
        args: [{
                declarations: [HuePickerComponent],
                exports: [HuePickerComponent],
                imports: [CommonModule, HueModule]
            }]
    }], null, null); })();

/**
 * Generated bundle index. Do not edit.
 */

export { ColorHueModule, HuePickerComponent };

//# sourceMappingURL=ngx-color-hue.js.map