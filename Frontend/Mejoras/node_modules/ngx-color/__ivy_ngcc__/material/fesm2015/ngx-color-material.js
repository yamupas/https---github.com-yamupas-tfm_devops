import { __decorate } from 'tslib';
import { CommonModule } from '@angular/common';
import { Input, Component, ChangeDetectionStrategy, NgModule } from '@angular/core';
import { ColorWrap, isValidHex, EditableInputModule, RaisedModule } from 'ngx-color';

import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from 'ngx-color';

const _c0 = function (a0, a1) { return { input: a0, label: a1 }; };
let MaterialComponent = class MaterialComponent extends ColorWrap {
    constructor() {
        super();
        this.HEXinput = {
            width: '100%',
            marginTop: '12px',
            fontSize: '15px',
            color: 'rgb(51, 51, 51)',
            padding: '0px',
            'border-width': '0px 0px 2px',
            outline: 'none',
            height: '30px',
        };
        this.HEXlabel = {
            position: 'absolute',
            top: '0px',
            left: '0px',
            fontSize: '11px',
            color: 'rgb(153, 153, 153)',
            'text-transform': 'capitalize',
        };
        this.RGBinput = {
            width: '100%',
            marginTop: '12px',
            fontSize: '15px',
            color: '#333',
            padding: '0px',
            border: '0px',
            'border-bottom': '1px solid #eee',
            outline: 'none',
            height: '30px',
        };
        this.RGBlabel = {
            position: 'absolute',
            top: '0px',
            left: '0px',
            fontSize: '11px',
            color: '#999999',
            'text-transform': 'capitalize',
        };
        this.zDepth = 1;
        this.radius = 1;
        this.background = '#fff';
    }
    handleValueChange({ data, $event }) {
        this.handleChange(data, $event);
    }
    handleInputChange({ data, $event }) {
        if (data.hex) {
            if (isValidHex(data.hex)) {
                this.handleValueChange({
                    data: {
                        hex: data.hex,
                        source: 'hex',
                    },
                    $event,
                });
            }
        }
        else if (data.r || data.g || data.b) {
            this.handleValueChange({
                data: {
                    r: data.r || this.rgb.r,
                    g: data.g || this.rgb.g,
                    b: data.b || this.rgb.b,
                    source: 'rgb',
                },
                $event,
            });
        }
    }
    afterValidChange() {
        this.HEXinput['border-bottom-color'] = this.hex;
    }
};
MaterialComponent.ɵfac = function MaterialComponent_Factory(t) { return new (t || MaterialComponent)(); };
MaterialComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MaterialComponent, selectors: [["color-material"]], inputs: { zDepth: "zDepth", radius: "radius", background: "background" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 10, vars: 30, consts: [[3, "zDepth", "background", "radius"], ["label", "hex", 3, "value", "onChange"], [1, "material-split"], [1, "material-third"], ["label", "r", 3, "value", "onChange"], ["label", "g", 3, "value", "onChange"], ["label", "b", 3, "value", "onChange"]], template: function MaterialComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "color-raised", 0);
        ɵngcc0.ɵɵelementStart(1, "div");
        ɵngcc0.ɵɵelementStart(2, "color-editable-input", 1);
        ɵngcc0.ɵɵlistener("onChange", function MaterialComponent_Template_color_editable_input_onChange_2_listener($event) { return ctx.handleValueChange($event); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(3, "div", 2);
        ɵngcc0.ɵɵelementStart(4, "div", 3);
        ɵngcc0.ɵɵelementStart(5, "color-editable-input", 4);
        ɵngcc0.ɵɵlistener("onChange", function MaterialComponent_Template_color_editable_input_onChange_5_listener($event) { return ctx.handleInputChange($event); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(6, "div", 3);
        ɵngcc0.ɵɵelementStart(7, "color-editable-input", 5);
        ɵngcc0.ɵɵlistener("onChange", function MaterialComponent_Template_color_editable_input_onChange_7_listener($event) { return ctx.handleInputChange($event); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(8, "div", 3);
        ɵngcc0.ɵɵelementStart(9, "color-editable-input", 6);
        ɵngcc0.ɵɵlistener("onChange", function MaterialComponent_Template_color_editable_input_onChange_9_listener($event) { return ctx.handleInputChange($event); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("zDepth", ctx.zDepth)("background", ctx.background)("radius", ctx.radius);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵclassMapInterpolate1("material-picker ", ctx.className, "");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵstyleMap(ɵngcc0.ɵɵpureFunction2(18, _c0, ctx.HEXinput, ctx.HEXlabel));
        ɵngcc0.ɵɵproperty("value", ctx.hex);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵstyleMap(ɵngcc0.ɵɵpureFunction2(21, _c0, ctx.RGBinput, ctx.RGBlabel));
        ɵngcc0.ɵɵproperty("value", ctx.rgb.r);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵstyleMap(ɵngcc0.ɵɵpureFunction2(24, _c0, ctx.RGBinput, ctx.RGBlabel));
        ɵngcc0.ɵɵproperty("value", ctx.rgb.g);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵstyleMap(ɵngcc0.ɵɵpureFunction2(27, _c0, ctx.RGBinput, ctx.RGBlabel));
        ɵngcc0.ɵɵproperty("value", ctx.rgb.b);
    } }, directives: [ɵngcc1.RaisedComponent, ɵngcc1.EditableInputComponent], styles: [".material-picker[_ngcontent-%COMP%] {\n    width: 130px;\n    height: 130px;\n    padding: 16px;\n    font-family: Roboto;\n  }\n  .material-split[_ngcontent-%COMP%] {\n    display: flex;\n    margin-right: -10px;\n    padding-top: 11px;\n  }\n  .material-third[_ngcontent-%COMP%] {\n    flex: 1 1 0%;\n    padding-right: 10px;\n  }"], changeDetection: 0 });
__decorate([
    Input()
], MaterialComponent.prototype, "zDepth", void 0);
__decorate([
    Input()
], MaterialComponent.prototype, "radius", void 0);
__decorate([
    Input()
], MaterialComponent.prototype, "background", void 0);
let ColorMaterialModule = class ColorMaterialModule {
};
ColorMaterialModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: ColorMaterialModule });
ColorMaterialModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function ColorMaterialModule_Factory(t) { return new (t || ColorMaterialModule)(); }, imports: [[CommonModule, EditableInputModule, RaisedModule]] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MaterialComponent, [{
        type: Component,
        args: [{
                selector: 'color-material',
                template: `
  <color-raised [zDepth]="zDepth" [background]="background" [radius]="radius">
    <div class="material-picker {{ className }}">
      <color-editable-input label="hex" [value]="hex"
        (onChange)="handleValueChange($event)"
        [style]="{input: HEXinput, label: HEXlabel}"
      ></color-editable-input>
      <div class="material-split">
        <div class="material-third">
          <color-editable-input label="r" [value]="rgb.r"
            [style]="{ input: RGBinput, label: RGBlabel }"
            (onChange)="handleInputChange($event)"
          ></color-editable-input>
        </div>
        <div class="material-third">
          <color-editable-input label="g" [value]="rgb.g"
            [style]="{ input: RGBinput, label: RGBlabel }"
            (onChange)="handleInputChange($event)"
          ></color-editable-input>
        </div>
        <div class="material-third">
          <color-editable-input label="b" [value]="rgb.b"
            [style]="{ input: RGBinput, label: RGBlabel }"
            (onChange)="handleInputChange($event)"
          ></color-editable-input>
        </div>
      </div>
    </div>
  </color-raised>
  `,
                changeDetection: ChangeDetectionStrategy.OnPush,
                preserveWhitespaces: false,
                styles: [`
  .material-picker {
    width: 130px;
    height: 130px;
    padding: 16px;
    font-family: Roboto;
  }
  .material-split {
    display: flex;
    margin-right: -10px;
    padding-top: 11px;
  }
  .material-third {
    flex: 1 1 0%;
    padding-right: 10px;
  }
  `]
            }]
    }], function () { return []; }, { zDepth: [{
            type: Input
        }], radius: [{
            type: Input
        }], background: [{
            type: Input
        }] }); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ColorMaterialModule, { declarations: function () { return [MaterialComponent]; }, imports: function () { return [CommonModule, EditableInputModule, RaisedModule]; }, exports: function () { return [MaterialComponent]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ColorMaterialModule, [{
        type: NgModule,
        args: [{
                exports: [MaterialComponent],
                declarations: [MaterialComponent],
                imports: [CommonModule, EditableInputModule, RaisedModule]
            }]
    }], null, null); })();

/**
 * Generated bundle index. Do not edit.
 */

export { ColorMaterialModule, MaterialComponent };

//# sourceMappingURL=ngx-color-material.js.map