import { __decorate } from 'tslib';
import { CommonModule } from '@angular/common';
import { EventEmitter, Input, Output, Component, ChangeDetectionStrategy, NgModule } from '@angular/core';
import { ColorWrap, getContrastingColor, isValidHex, CheckboardModule, SwatchModule, EditableInputModule } from 'ngx-color';

import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';
import * as ɵngcc2 from 'ngx-color';

function BlockSwatchesComponent_color_swatch_1_Template(rf, ctx) { if (rf & 1) {
    const _r3 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "color-swatch", 3);
    ɵngcc0.ɵɵlistener("onClick", function BlockSwatchesComponent_color_swatch_1_Template_color_swatch_onClick_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r3); const ctx_r2 = ɵngcc0.ɵɵnextContext(); return ctx_r2.handleClick($event); })("onHover", function BlockSwatchesComponent_color_swatch_1_Template_color_swatch_onHover_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r3); const ctx_r4 = ɵngcc0.ɵɵnextContext(); return ctx_r4.onSwatchHover.emit($event); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const c_r1 = ctx.$implicit;
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵstyleMap(ctx_r0.swatchStyle);
    ɵngcc0.ɵɵproperty("color", c_r1)("focusStyle", ctx_r0.focusStyle(c_r1));
} }
function BlockComponent_div_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "div", 7);
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵstyleProp("border-color", "transparent transparent " + ctx_r0.hex + " transparent");
} }
function BlockComponent_color_checkboard_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "color-checkboard", 8);
} }
const _c0 = function (a0, a1) { return { input: a0, wrap: a1 }; };
let BlockSwatchesComponent = class BlockSwatchesComponent {
    constructor() {
        this.onClick = new EventEmitter();
        this.onSwatchHover = new EventEmitter();
    }
    ngOnInit() {
        this.swatchStyle = {
            width: '22px',
            height: '22px',
            float: 'left',
            marginRight: '10px',
            marginBottom: '10px',
            borderRadius: '4px',
        };
    }
    handleClick({ hex, $event }) {
        this.onClick.emit({ hex, $event });
    }
    focusStyle(c) {
        return {
            boxShadow: `${c} 0 0 4px`,
        };
    }
};
BlockSwatchesComponent.ɵfac = function BlockSwatchesComponent_Factory(t) { return new (t || BlockSwatchesComponent)(); };
BlockSwatchesComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: BlockSwatchesComponent, selectors: [["color-block-swatches"]], inputs: { colors: "colors" }, outputs: { onClick: "onClick", onSwatchHover: "onSwatchHover" }, decls: 3, vars: 1, consts: [[1, "block-swatches"], [3, "color", "style", "focusStyle", "onClick", "onHover", 4, "ngFor", "ngForOf"], [1, "clear"], [3, "color", "focusStyle", "onClick", "onHover"]], template: function BlockSwatchesComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵtemplate(1, BlockSwatchesComponent_color_swatch_1_Template, 1, 4, "color-swatch", 1);
        ɵngcc0.ɵɵelement(2, "div", 2);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.colors);
    } }, directives: [ɵngcc1.NgForOf, ɵngcc2.SwatchComponent], styles: [".block-swatches[_ngcontent-%COMP%] {\n      margin-right: -10px;\n    }\n    .clear[_ngcontent-%COMP%] {\n      clear: both;\n    }"] });
__decorate([
    Input()
], BlockSwatchesComponent.prototype, "colors", void 0);
__decorate([
    Output()
], BlockSwatchesComponent.prototype, "onClick", void 0);
__decorate([
    Output()
], BlockSwatchesComponent.prototype, "onSwatchHover", void 0);

let BlockComponent = class BlockComponent extends ColorWrap {
    constructor() {
        super();
        /** Pixel value for picker width */
        this.width = 170;
        /** Color squares to display */
        this.colors = [
            '#D9E3F0',
            '#F47373',
            '#697689',
            '#37D67A',
            '#2CCCE4',
            '#555555',
            '#dce775',
            '#ff8a65',
            '#ba68c8',
        ];
        this.triangle = 'top';
        this.input = {
            width: '100%',
            fontSize: '12px',
            color: '#666',
            border: '0px',
            outline: 'none',
            height: '22px',
            boxShadow: 'inset 0 0 0 1px #ddd',
            borderRadius: '4px',
            padding: '0 7px',
            boxSizing: 'border-box',
        };
        this.wrap = {
            position: 'relative',
            width: '100%',
        };
    }
    handleValueChange({ data, $event }) {
        this.handleBlockChange({ hex: data, $event });
    }
    getContrastingColor(hex) {
        return getContrastingColor(hex);
    }
    handleBlockChange({ hex, $event }) {
        if (isValidHex(hex)) {
            // this.hex = hex;
            this.handleChange({
                hex,
                source: 'hex',
            }, $event);
        }
    }
};
BlockComponent.ɵfac = function BlockComponent_Factory(t) { return new (t || BlockComponent)(); };
BlockComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: BlockComponent, selectors: [["color-block"]], inputs: { width: "width", colors: "colors", triangle: "triangle" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 9, vars: 17, consts: [["class", "block-triangle", 3, "border-color", 4, "ngIf"], [1, "block-head"], ["borderRadius", "6px 6px 0 0", 4, "ngIf"], [1, "block-label"], [1, "block-body"], [3, "colors", "onClick", "onSwatchHover"], [3, "value", "onChange"], [1, "block-triangle"], ["borderRadius", "6px 6px 0 0"]], template: function BlockComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div");
        ɵngcc0.ɵɵtemplate(1, BlockComponent_div_1_Template, 1, 2, "div", 0);
        ɵngcc0.ɵɵelementStart(2, "div", 1);
        ɵngcc0.ɵɵtemplate(3, BlockComponent_color_checkboard_3_Template, 1, 0, "color-checkboard", 2);
        ɵngcc0.ɵɵelementStart(4, "div", 3);
        ɵngcc0.ɵɵtext(5);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(6, "div", 4);
        ɵngcc0.ɵɵelementStart(7, "color-block-swatches", 5);
        ɵngcc0.ɵɵlistener("onClick", function BlockComponent_Template_color_block_swatches_onClick_7_listener($event) { return ctx.handleBlockChange($event); })("onSwatchHover", function BlockComponent_Template_color_block_swatches_onSwatchHover_7_listener($event) { return ctx.onSwatchHover.emit($event); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(8, "color-editable-input", 6);
        ɵngcc0.ɵɵlistener("onChange", function BlockComponent_Template_color_editable_input_onChange_8_listener($event) { return ctx.handleValueChange($event); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵclassMapInterpolate1("block-card block-picker ", ctx.className, "");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.triangle !== "hide");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵstyleProp("background", ctx.hex, ɵngcc0.ɵɵdefaultStyleSanitizer);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.hex === "transparent");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵstyleProp("color", ctx.getContrastingColor(ctx.hex));
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate1(" ", ctx.hex, " ");
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("colors", ctx.colors);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵstyleMap(ɵngcc0.ɵɵpureFunction2(14, _c0, ctx.input, ctx.wrap));
        ɵngcc0.ɵɵproperty("value", ctx.hex);
    } }, directives: [ɵngcc1.NgIf, BlockSwatchesComponent, ɵngcc2.EditableInputComponent, ɵngcc2.CheckboardComponent], styles: [".block-card[_ngcontent-%COMP%] {\n      background: #fff;\n      border-radius: 6px;\n      box-shadow: 0 1px rgba(0, 0, 0, .1);\n      position: relative;\n    }\n    .block-head[_ngcontent-%COMP%] {\n      align-items: center;\n      border-radius: 6px 6px 0 0;\n      display: flex;\n      height: 110px;\n      justify-content: center;\n      position: relative;\n    }\n    .block-body[_ngcontent-%COMP%] {\n      padding: 10px;\n    }\n    .block-label[_ngcontent-%COMP%] {\n      font-size: 18px;\n      position: relative;\n    }\n    .block-triangle[_ngcontent-%COMP%] {\n      border-style: solid;\n      border-width: 0 10px 10px 10px;\n      height: 0;\n      left: 50%;\n      margin-left: -10px;\n      position: absolute;\n      top: -10px;\n      width: 0;\n    }"], changeDetection: 0 });
__decorate([
    Input()
], BlockComponent.prototype, "width", void 0);
__decorate([
    Input()
], BlockComponent.prototype, "colors", void 0);
__decorate([
    Input()
], BlockComponent.prototype, "triangle", void 0);
let ColorBlockModule = class ColorBlockModule {
};
ColorBlockModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: ColorBlockModule });
ColorBlockModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function ColorBlockModule_Factory(t) { return new (t || ColorBlockModule)(); }, imports: [[CommonModule, CheckboardModule, SwatchModule, EditableInputModule]] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(BlockSwatchesComponent, [{
        type: Component,
        args: [{
                selector: 'color-block-swatches',
                template: `
    <div class="block-swatches">
      <color-swatch
        *ngFor="let c of colors"
        [color]="c"
        [style]="swatchStyle"
        [focusStyle]="focusStyle(c)"
        (onClick)="handleClick($event)"
        (onHover)="onSwatchHover.emit($event)"
      ></color-swatch>
      <div class="clear"></div>
    </div>
  `,
                styles: [`
    .block-swatches {
      margin-right: -10px;
    }
    .clear {
      clear: both;
    }
  `]
            }]
    }], function () { return []; }, { onClick: [{
            type: Output
        }], onSwatchHover: [{
            type: Output
        }], colors: [{
            type: Input
        }] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(BlockComponent, [{
        type: Component,
        args: [{
                selector: 'color-block',
                template: `
  <div class="block-card block-picker {{ className }}">
    <div class="block-triangle" *ngIf="triangle !== 'hide'"
      [style.border-color]="'transparent transparent ' + this.hex + ' transparent'"
    ></div>

    <div class="block-head" [style.background]="hex">
      <color-checkboard *ngIf="hex === 'transparent'"
        borderRadius="6px 6px 0 0"
      ></color-checkboard>
      <div class="block-label" [style.color]="getContrastingColor(hex)">
        {{ hex }}
      </div>
    </div>

    <div class="block-body">
      <color-block-swatches [colors]="colors"
        (onClick)="handleBlockChange($event)"
        (onSwatchHover)="onSwatchHover.emit($event)"
      ></color-block-swatches>
      <color-editable-input [value]="hex"
        (onChange)="handleValueChange($event)"
        [style]="{input: input, wrap: wrap}"
      ></color-editable-input>
    </div>
  </div>
  `,
                preserveWhitespaces: false,
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [`
    .block-card {
      background: #fff;
      border-radius: 6px;
      box-shadow: 0 1px rgba(0, 0, 0, .1);
      position: relative;
    }
    .block-head {
      align-items: center;
      border-radius: 6px 6px 0 0;
      display: flex;
      height: 110px;
      justify-content: center;
      position: relative;
    }
    .block-body {
      padding: 10px;
    }
    .block-label {
      font-size: 18px;
      position: relative;
    }
    .block-triangle {
      border-style: solid;
      border-width: 0 10px 10px 10px;
      height: 0;
      left: 50%;
      margin-left: -10px;
      position: absolute;
      top: -10px;
      width: 0;
    }
  `]
            }]
    }], function () { return []; }, { width: [{
            type: Input
        }], colors: [{
            type: Input
        }], triangle: [{
            type: Input
        }] }); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ColorBlockModule, { declarations: function () { return [BlockComponent,
        BlockSwatchesComponent]; }, imports: function () { return [CommonModule, CheckboardModule, SwatchModule, EditableInputModule]; }, exports: function () { return [BlockComponent,
        BlockSwatchesComponent]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ColorBlockModule, [{
        type: NgModule,
        args: [{
                declarations: [BlockComponent, BlockSwatchesComponent],
                exports: [BlockComponent, BlockSwatchesComponent],
                imports: [CommonModule, CheckboardModule, SwatchModule, EditableInputModule]
            }]
    }], null, null); })();

/**
 * Generated bundle index. Do not edit.
 */

export { BlockComponent, ColorBlockModule, BlockSwatchesComponent as ɵa };

//# sourceMappingURL=ngx-color-block.js.map