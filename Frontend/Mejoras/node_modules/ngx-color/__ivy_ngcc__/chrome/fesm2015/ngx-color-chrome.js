import { __decorate } from 'tslib';
import { CommonModule } from '@angular/common';
import { EventEmitter, Input, Output, Component, ChangeDetectionStrategy, NgModule } from '@angular/core';
import { isValidHex, ColorWrap, AlphaModule, CheckboardModule, EditableInputModule, HueModule, SaturationModule } from 'ngx-color';
import { TinyColor } from '@ctrl/tinycolor';

import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';
import * as ɵngcc2 from 'ngx-color';

const _c0 = function (a0, a1) { return { input: a0, label: a1 }; };
function ChromeFieldsComponent_ng_template_2_Template(rf, ctx) { if (rf & 1) {
    const _r7 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 11);
    ɵngcc0.ɵɵelementStart(1, "color-editable-input", 12);
    ɵngcc0.ɵɵlistener("onChange", function ChromeFieldsComponent_ng_template_2_Template_color_editable_input_onChange_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r7); const ctx_r6 = ɵngcc0.ɵɵnextContext(); return ctx_r6.handleChange($event); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵstyleMap(ɵngcc0.ɵɵpureFunction2(3, _c0, ctx_r0.input, ctx_r0.label));
    ɵngcc0.ɵɵproperty("value", ctx_r0.hex);
} }
function ChromeFieldsComponent_ng_template_3_color_editable_input_7_Template(rf, ctx) { if (rf & 1) {
    const _r10 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "color-editable-input", 17);
    ɵngcc0.ɵɵlistener("onChange", function ChromeFieldsComponent_ng_template_3_color_editable_input_7_Template_color_editable_input_onChange_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r10); const ctx_r9 = ɵngcc0.ɵɵnextContext(2); return ctx_r9.handleChange($event); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r8 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵstyleMap(ɵngcc0.ɵɵpureFunction2(4, _c0, ctx_r8.input, ctx_r8.label));
    ɵngcc0.ɵɵproperty("value", ctx_r8.rgb.a)("arrowOffset", 0.01);
} }
function ChromeFieldsComponent_ng_template_3_Template(rf, ctx) { if (rf & 1) {
    const _r12 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 11);
    ɵngcc0.ɵɵelementStart(1, "color-editable-input", 13);
    ɵngcc0.ɵɵlistener("onChange", function ChromeFieldsComponent_ng_template_3_Template_color_editable_input_onChange_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r12); const ctx_r11 = ɵngcc0.ɵɵnextContext(); return ctx_r11.handleChange($event); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(2, "div", 11);
    ɵngcc0.ɵɵelementStart(3, "color-editable-input", 14);
    ɵngcc0.ɵɵlistener("onChange", function ChromeFieldsComponent_ng_template_3_Template_color_editable_input_onChange_3_listener($event) { ɵngcc0.ɵɵrestoreView(_r12); const ctx_r13 = ɵngcc0.ɵɵnextContext(); return ctx_r13.handleChange($event); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(4, "div", 11);
    ɵngcc0.ɵɵelementStart(5, "color-editable-input", 15);
    ɵngcc0.ɵɵlistener("onChange", function ChromeFieldsComponent_ng_template_3_Template_color_editable_input_onChange_5_listener($event) { ɵngcc0.ɵɵrestoreView(_r12); const ctx_r14 = ɵngcc0.ɵɵnextContext(); return ctx_r14.handleChange($event); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(6, "div", 11);
    ɵngcc0.ɵɵtemplate(7, ChromeFieldsComponent_ng_template_3_color_editable_input_7_Template, 1, 7, "color-editable-input", 16);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵstyleMap(ɵngcc0.ɵɵpureFunction2(10, _c0, ctx_r1.input, ctx_r1.label));
    ɵngcc0.ɵɵproperty("value", ctx_r1.rgb.r);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵstyleMap(ɵngcc0.ɵɵpureFunction2(13, _c0, ctx_r1.input, ctx_r1.label));
    ɵngcc0.ɵɵproperty("value", ctx_r1.rgb.g);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵstyleMap(ɵngcc0.ɵɵpureFunction2(16, _c0, ctx_r1.input, ctx_r1.label));
    ɵngcc0.ɵɵproperty("value", ctx_r1.rgb.b);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r1.disableAlpha);
} }
function ChromeFieldsComponent_ng_template_4_color_editable_input_7_Template(rf, ctx) { if (rf & 1) {
    const _r17 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "color-editable-input", 17);
    ɵngcc0.ɵɵlistener("onChange", function ChromeFieldsComponent_ng_template_4_color_editable_input_7_Template_color_editable_input_onChange_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r17); const ctx_r16 = ɵngcc0.ɵɵnextContext(2); return ctx_r16.handleChange($event); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r15 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵstyleMap(ɵngcc0.ɵɵpureFunction2(4, _c0, ctx_r15.input, ctx_r15.label));
    ɵngcc0.ɵɵproperty("value", ctx_r15.hsl.a)("arrowOffset", 0.01);
} }
function ChromeFieldsComponent_ng_template_4_Template(rf, ctx) { if (rf & 1) {
    const _r19 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 11);
    ɵngcc0.ɵɵelementStart(1, "color-editable-input", 18);
    ɵngcc0.ɵɵlistener("onChange", function ChromeFieldsComponent_ng_template_4_Template_color_editable_input_onChange_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r19); const ctx_r18 = ɵngcc0.ɵɵnextContext(); return ctx_r18.handleChange($event); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(2, "div", 11);
    ɵngcc0.ɵɵelementStart(3, "color-editable-input", 19);
    ɵngcc0.ɵɵlistener("onChange", function ChromeFieldsComponent_ng_template_4_Template_color_editable_input_onChange_3_listener($event) { ɵngcc0.ɵɵrestoreView(_r19); const ctx_r20 = ɵngcc0.ɵɵnextContext(); return ctx_r20.handleChange($event); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(4, "div", 11);
    ɵngcc0.ɵɵelementStart(5, "color-editable-input", 20);
    ɵngcc0.ɵɵlistener("onChange", function ChromeFieldsComponent_ng_template_4_Template_color_editable_input_onChange_5_listener($event) { ɵngcc0.ɵɵrestoreView(_r19); const ctx_r21 = ɵngcc0.ɵɵnextContext(); return ctx_r21.handleChange($event); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(6, "div", 11);
    ɵngcc0.ɵɵtemplate(7, ChromeFieldsComponent_ng_template_4_color_editable_input_7_Template, 1, 7, "color-editable-input", 16);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵstyleMap(ɵngcc0.ɵɵpureFunction2(10, _c0, ctx_r2.input, ctx_r2.label));
    ɵngcc0.ɵɵproperty("value", ctx_r2.round(ctx_r2.hsl.h));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵstyleMap(ɵngcc0.ɵɵpureFunction2(13, _c0, ctx_r2.input, ctx_r2.label));
    ɵngcc0.ɵɵproperty("value", ctx_r2.round(ctx_r2.hsl.s * 100) + "%");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵstyleMap(ɵngcc0.ɵɵpureFunction2(16, _c0, ctx_r2.input, ctx_r2.label));
    ɵngcc0.ɵɵproperty("value", ctx_r2.round(ctx_r2.hsl.l * 100) + "%");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r2.disableAlpha);
} }
function ChromeComponent_div_12_Template(rf, ctx) { if (rf & 1) {
    const _r2 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 12);
    ɵngcc0.ɵɵelementStart(1, "color-alpha", 13);
    ɵngcc0.ɵɵlistener("onChange", function ChromeComponent_div_12_Template_color_alpha_onChange_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r2); const ctx_r1 = ɵngcc0.ɵɵnextContext(); return ctx_r1.handleValueChange($event); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("radius", 2)("rgb", ctx_r0.rgb)("hsl", ctx_r0.hsl)("pointer", ctx_r0.pointer);
} }
let ChromeFieldsComponent = class ChromeFieldsComponent {
    constructor() {
        this.onChange = new EventEmitter();
        this.view = '';
        this.input = {
            fontSize: '11px',
            color: '#333',
            width: '100%',
            borderRadius: '2px',
            border: 'none',
            boxShadow: 'inset 0 0 0 1px #dadada',
            height: '21px',
            'text-align': 'center',
        };
        this.label = {
            'text-transform': 'uppercase',
            fontSize: '11px',
            'line-height': '11px',
            color: '#969696',
            'text-align': 'center',
            display: 'block',
            marginTop: '12px',
        };
    }
    ngOnInit() {
        if (this.hsl.a === 1 && this.view !== 'hex') {
            this.view = 'hex';
        }
        else if (this.view !== 'rgb' && this.view !== 'hsl') {
            this.view = 'rgb';
        }
    }
    toggleViews() {
        if (this.view === 'hex') {
            this.view = 'rgb';
        }
        else if (this.view === 'rgb') {
            this.view = 'hsl';
        }
        else if (this.view === 'hsl') {
            if (this.hsl.a === 1) {
                this.view = 'hex';
            }
            else {
                this.view = 'rgb';
            }
        }
    }
    round(value) {
        return Math.round(value);
    }
    handleChange({ data, $event }) {
        if (data.hex) {
            if (isValidHex(data.hex)) {
                const color = new TinyColor(data.hex);
                this.onChange.emit({
                    data: {
                        hex: this.disableAlpha ? color.toHex() : color.toHex8(),
                        source: 'hex',
                    },
                    $event,
                });
            }
        }
        else if (data.r || data.g || data.b) {
            this.onChange.emit({
                data: {
                    r: data.r || this.rgb.r,
                    g: data.g || this.rgb.g,
                    b: data.b || this.rgb.b,
                    source: 'rgb',
                },
                $event,
            });
        }
        else if (data.a) {
            if (data.a < 0) {
                data.a = 0;
            }
            else if (data.a > 1) {
                data.a = 1;
            }
            if (this.disableAlpha) {
                data.a = 1;
            }
            this.onChange.emit({
                data: {
                    h: this.hsl.h,
                    s: this.hsl.s,
                    l: this.hsl.l,
                    a: Math.round(data.a * 100) / 100,
                    source: 'rgb',
                },
                $event,
            });
        }
        else if (data.h || data.s || data.l) {
            const s = data.s && data.s.replace('%', '');
            const l = data.l && data.l.replace('%', '');
            this.onChange.emit({
                data: {
                    h: data.h || this.hsl.h,
                    s: Number(s || this.hsl.s),
                    l: Number(l || this.hsl.l),
                    source: 'hsl',
                },
                $event,
            });
        }
    }
};
ChromeFieldsComponent.ɵfac = function ChromeFieldsComponent_Factory(t) { return new (t || ChromeFieldsComponent)(); };
ChromeFieldsComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ChromeFieldsComponent, selectors: [["color-chrome-fields"]], inputs: { disableAlpha: "disableAlpha", hsl: "hsl", rgb: "rgb", hex: "hex" }, outputs: { onChange: "onChange" }, decls: 13, vars: 3, consts: [[1, "chrome-wrap"], [1, "chrome-fields"], [3, "ngIf"], [1, "chrome-toggle"], [1, "chrome-icon", 3, "click"], ["icon", ""], ["viewBox", "0 0 24 24", 1, "chrome-toggle-svg"], ["fill", "#333", "d", "M12,5.83L15.17,9L16.58,7.59L12,3L7.41,7.59L8.83,9L12,5.83Z"], ["iconUp", ""], ["fill", "#333", "d", "M12,18.17L8.83,15L7.42,16.41L12,21L16.59,16.41L15.17,15Z"], ["iconDown", ""], [1, "chrome-field"], ["label", "hex", 3, "value", "onChange"], ["label", "r", 3, "value", "onChange"], ["label", "g", 3, "value", "onChange"], ["label", "b", 3, "value", "onChange"], ["label", "a", 3, "style", "value", "arrowOffset", "onChange", 4, "ngIf"], ["label", "a", 3, "value", "arrowOffset", "onChange"], ["label", "h", 3, "value", "onChange"], ["label", "s", 3, "value", "onChange"], ["label", "l", 3, "value", "onChange"]], template: function ChromeFieldsComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "div", 1);
        ɵngcc0.ɵɵtemplate(2, ChromeFieldsComponent_ng_template_2_Template, 2, 6, "ng-template", 2);
        ɵngcc0.ɵɵtemplate(3, ChromeFieldsComponent_ng_template_3_Template, 8, 19, "ng-template", 2);
        ɵngcc0.ɵɵtemplate(4, ChromeFieldsComponent_ng_template_4_Template, 8, 19, "ng-template", 2);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(5, "div", 3);
        ɵngcc0.ɵɵelementStart(6, "div", 4, 5);
        ɵngcc0.ɵɵlistener("click", function ChromeFieldsComponent_Template_div_click_6_listener() { return ctx.toggleViews(); });
        ɵngcc0.ɵɵnamespaceSVG();
        ɵngcc0.ɵɵelementStart(8, "svg", 6);
        ɵngcc0.ɵɵelement(9, "path", 7, 8);
        ɵngcc0.ɵɵelement(11, "path", 9, 10);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.view === "hex");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.view === "rgb");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.view === "hsl");
    } }, directives: [ɵngcc1.NgIf, ɵngcc2.EditableInputComponent], styles: [".chrome-wrap[_ngcontent-%COMP%] {\n        padding-top: 16px;\n        display: flex;\n      }\n      .chrome-fields[_ngcontent-%COMP%] {\n        flex: 1;\n        display: flex;\n        margin-left: -6px;\n      }\n      .chrome-field[_ngcontent-%COMP%] {\n        padding-left: 6px;\n        width: 100%;\n      }\n      .chrome-toggle[_ngcontent-%COMP%] {\n        width: 32px;\n        text-align: right;\n        position: relative;\n      }\n      .chrome-icon[_ngcontent-%COMP%] {\n        margin-right: -4px;\n        margin-top: 12px;\n        cursor: pointer;\n        position: relative;\n      }\n      .chrome-toggle-svg[_ngcontent-%COMP%] {\n        width: 24px;\n        height: 24px;\n        border: 1px transparent solid;\n        border-radius: 5px;\n      }\n      .chrome-toggle-svg[_ngcontent-%COMP%]:hover {\n        background: #eee;\n      }"], changeDetection: 0 });
__decorate([
    Input()
], ChromeFieldsComponent.prototype, "disableAlpha", void 0);
__decorate([
    Input()
], ChromeFieldsComponent.prototype, "hsl", void 0);
__decorate([
    Input()
], ChromeFieldsComponent.prototype, "rgb", void 0);
__decorate([
    Input()
], ChromeFieldsComponent.prototype, "hex", void 0);
__decorate([
    Output()
], ChromeFieldsComponent.prototype, "onChange", void 0);

let ChromeComponent = class ChromeComponent extends ColorWrap {
    constructor() {
        super();
        /** Remove alpha slider and options from picker */
        this.disableAlpha = false;
        this.circle = {
            width: '12px',
            height: '12px',
            borderRadius: '6px',
            boxShadow: 'rgb(255, 255, 255) 0px 0px 0px 1px inset',
            transform: 'translate(-6px, -8px)',
        };
        this.pointer = {
            width: '12px',
            height: '12px',
            borderRadius: '6px',
            transform: 'translate(-6px, -2px)',
            backgroundColor: 'rgb(248, 248, 248)',
            boxShadow: '0 1px 4px 0 rgba(0, 0, 0, 0.37)',
        };
    }
    afterValidChange() {
        const alpha = this.disableAlpha ? 1 : this.rgb.a;
        this.activeBackground = `rgba(${this.rgb.r}, ${this.rgb.g}, ${this.rgb.b}, ${alpha})`;
    }
    handleValueChange({ data, $event }) {
        this.handleChange(data, $event);
    }
};
ChromeComponent.ɵfac = function ChromeComponent_Factory(t) { return new (t || ChromeComponent)(); };
ChromeComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ChromeComponent, selectors: [["color-chrome"]], inputs: { disableAlpha: "disableAlpha" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 14, vars: 16, consts: [[1, "saturation"], [3, "hsl", "hsv", "circle", "onChange"], [1, "chrome-body"], [1, "chrome-controls"], [1, "chrome-color"], [1, "chrome-swatch"], [1, "chrome-active"], [1, "chrome-toggles"], [1, "chrome-hue"], [3, "radius", "hsl", "pointer", "onChange"], ["class", "chrome-alpha", 4, "ngIf"], [3, "rgb", "hsl", "hex", "disableAlpha", "onChange"], [1, "chrome-alpha"], [3, "radius", "rgb", "hsl", "pointer", "onChange"]], template: function ChromeComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div");
        ɵngcc0.ɵɵelementStart(1, "div", 0);
        ɵngcc0.ɵɵelementStart(2, "color-saturation", 1);
        ɵngcc0.ɵɵlistener("onChange", function ChromeComponent_Template_color_saturation_onChange_2_listener($event) { return ctx.handleValueChange($event); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(3, "div", 2);
        ɵngcc0.ɵɵelementStart(4, "div", 3);
        ɵngcc0.ɵɵelementStart(5, "div", 4);
        ɵngcc0.ɵɵelementStart(6, "div", 5);
        ɵngcc0.ɵɵelement(7, "div", 6);
        ɵngcc0.ɵɵelement(8, "color-checkboard");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(9, "div", 7);
        ɵngcc0.ɵɵelementStart(10, "div", 8);
        ɵngcc0.ɵɵelementStart(11, "color-hue", 9);
        ɵngcc0.ɵɵlistener("onChange", function ChromeComponent_Template_color_hue_onChange_11_listener($event) { return ctx.handleValueChange($event); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(12, ChromeComponent_div_12_Template, 2, 4, "div", 10);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(13, "color-chrome-fields", 11);
        ɵngcc0.ɵɵlistener("onChange", function ChromeComponent_Template_color_chrome_fields_onChange_13_listener($event) { return ctx.handleValueChange($event); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵclassMapInterpolate1("chrome-picker ", ctx.className, "");
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("hsl", ctx.hsl)("hsv", ctx.hsv)("circle", ctx.circle);
        ɵngcc0.ɵɵadvance(5);
        ɵngcc0.ɵɵstyleProp("background", ctx.activeBackground, ɵngcc0.ɵɵdefaultStyleSanitizer);
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵproperty("radius", 2)("hsl", ctx.hsl)("pointer", ctx.pointer);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.disableAlpha);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("rgb", ctx.rgb)("hsl", ctx.hsl)("hex", ctx.hex)("disableAlpha", ctx.disableAlpha);
    } }, directives: [ɵngcc2.SaturationComponent, ɵngcc2.CheckboardComponent, ɵngcc2.HueComponent, ɵngcc1.NgIf, ChromeFieldsComponent, ɵngcc2.AlphaComponent], styles: [".chrome-picker[_ngcontent-%COMP%] {\n        background: #fff;\n        border-radius: 2px;\n        box-shadow: 0 0 2px rgba(0, 0, 0, 0.3), 0 4px 8px rgba(0, 0, 0, 0.3);\n        box-sizing: initial;\n        width: 225px;\n        font-family: 'Menlo';\n      }\n      .chrome-controls[_ngcontent-%COMP%] {\n        display: flex;\n      }\n      .chrome-color[_ngcontent-%COMP%] {\n        width: 42px;\n      }\n      .chrome-body[_ngcontent-%COMP%] {\n        padding: 14px 14px 12px;\n      }\n      .chrome-active[_ngcontent-%COMP%] {\n        position: absolute;\n        top: 0;\n        bottom: 0;\n        left: 0;\n        right: 0;\n        border-radius: 20px;\n        box-shadow: inset 0 0 0 1px rgba(0, 0, 0, 0.1);\n        z-index: 2;\n      }\n      .chrome-swatch[_ngcontent-%COMP%] {\n        width: 28px;\n        height: 28px;\n        border-radius: 15px;\n        position: relative;\n        overflow: hidden;\n      }\n      .saturation[_ngcontent-%COMP%] {\n        width: 100%;\n        padding-bottom: 55%;\n        position: relative;\n        border-radius: 2px 2px 0 0;\n        overflow: hidden;\n      }\n      .chrome-toggles[_ngcontent-%COMP%] {\n        flex: 1;\n      }\n      .chrome-hue[_ngcontent-%COMP%] {\n        height: 10px;\n        position: relative;\n        margin-bottom: 8px;\n      }\n      .chrome-alpha[_ngcontent-%COMP%] {\n        height: 10px;\n        position: relative;\n      }"], changeDetection: 0 });
__decorate([
    Input()
], ChromeComponent.prototype, "disableAlpha", void 0);
let ColorChromeModule = class ColorChromeModule {
};
ColorChromeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: ColorChromeModule });
ColorChromeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function ColorChromeModule_Factory(t) { return new (t || ColorChromeModule)(); }, imports: [[
            CommonModule,
            AlphaModule,
            CheckboardModule,
            EditableInputModule,
            HueModule,
            SaturationModule,
        ]] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ChromeFieldsComponent, [{
        type: Component,
        args: [{
                selector: 'color-chrome-fields',
                template: `
    <div class="chrome-wrap">
      <div class="chrome-fields">
        <ng-template [ngIf]="view === 'hex'">
          <div class="chrome-field">
            <color-editable-input
              [style]="{ input: input, label: label }"
              label="hex" [value]="hex"
              (onChange)="handleChange($event)"
            ></color-editable-input>
          </div>
        </ng-template>
        <ng-template [ngIf]="view === 'rgb'">
          <div class="chrome-field">
            <color-editable-input
              [style]="{ input: input, label: label }"
              label="r" [value]="rgb.r"
              (onChange)="handleChange($event)"
            ></color-editable-input>
          </div>
          <div class="chrome-field">
            <color-editable-input
              [style]="{ input: input, label: label }"
              label="g" [value]="rgb.g"
              (onChange)="handleChange($event)"
            ></color-editable-input>
          </div>
          <div class="chrome-field">
            <color-editable-input
              [style]="{ input: input, label: label }"
              label="b" [value]="rgb.b"
              (onChange)="handleChange($event)"
            ></color-editable-input>
          </div>
          <div class="chrome-field">
            <color-editable-input *ngIf="!disableAlpha"
              [style]="{ input: input, label: label }"
              label="a" [value]="rgb.a"
              [arrowOffset]="0.01"
              (onChange)="handleChange($event)"
            ></color-editable-input>
          </div>
        </ng-template>
        <ng-template [ngIf]="view === 'hsl'">
          <div class="chrome-field">
            <color-editable-input
              [style]="{ input: input, label: label }"
              label="h"
              [value]="round(hsl.h)"
              (onChange)="handleChange($event)"
            ></color-editable-input>
          </div>
          <div class="chrome-field">
            <color-editable-input
              [style]="{ input: input, label: label }"
              label="s" [value]="round(hsl.s * 100) + '%'"
              (onChange)="handleChange($event)"
            ></color-editable-input>
          </div>
          <div class="chrome-field">
            <color-editable-input
              [style]="{ input: input, label: label }"
              label="l" [value]="round(hsl.l * 100) + '%'"
              (onChange)="handleChange($event)"
            ></color-editable-input>
          </div>
          <div class="chrome-field">
            <color-editable-input *ngIf="!disableAlpha"
              [style]="{ input: input, label: label }"
              label="a" [value]="hsl.a"
              [arrowOffset]="0.01"
              (onChange)="handleChange($event)"
            ></color-editable-input>
          </div>
        </ng-template>
      </div>

      <div class="chrome-toggle">
        <div class="chrome-icon" (click)="toggleViews()" #icon>
          <svg class="chrome-toggle-svg" viewBox="0 0 24 24">
            <path #iconUp fill="#333"
              d="M12,5.83L15.17,9L16.58,7.59L12,3L7.41,7.59L8.83,9L12,5.83Z"
            />
            <path #iconDown fill="#333"
              d="M12,18.17L8.83,15L7.42,16.41L12,21L16.59,16.41L15.17,15Z"
            />
          </svg>
        </div>
      </div>
    </div>
  `,
                changeDetection: ChangeDetectionStrategy.OnPush,
                preserveWhitespaces: false,
                styles: [`
      .chrome-wrap {
        padding-top: 16px;
        display: flex;
      }
      .chrome-fields {
        flex: 1;
        display: flex;
        margin-left: -6px;
      }
      .chrome-field {
        padding-left: 6px;
        width: 100%;
      }
      .chrome-toggle {
        width: 32px;
        text-align: right;
        position: relative;
      }
      .chrome-icon {
        margin-right: -4px;
        margin-top: 12px;
        cursor: pointer;
        position: relative;
      }
      .chrome-toggle-svg {
        width: 24px;
        height: 24px;
        border: 1px transparent solid;
        border-radius: 5px;
      }
      .chrome-toggle-svg:hover {
        background: #eee;
      }
    `]
            }]
    }], function () { return []; }, { onChange: [{
            type: Output
        }], disableAlpha: [{
            type: Input
        }], hsl: [{
            type: Input
        }], rgb: [{
            type: Input
        }], hex: [{
            type: Input
        }] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ChromeComponent, [{
        type: Component,
        args: [{
                selector: 'color-chrome',
                template: `
  <div class="chrome-picker {{ className }}">
    <div class="saturation">
      <color-saturation
        [hsl]="hsl"
        [hsv]="hsv"
        [circle]="circle"
        (onChange)="handleValueChange($event)"
      ></color-saturation>
    </div>
    <div class="chrome-body">
      <div class="chrome-controls">
        <div class="chrome-color">
          <div class="chrome-swatch">
            <div class="chrome-active"
              [style.background]="activeBackground"
            ></div>
            <color-checkboard></color-checkboard>
          </div>
        </div>
        <div class="chrome-toggles">
          <div class="chrome-hue">
            <color-hue
              [radius]="2"
              [hsl]="hsl"
              [pointer]="pointer"
              (onChange)="handleValueChange($event)"
            ></color-hue>
          </div>
          <div class="chrome-alpha" *ngIf="!disableAlpha">
            <color-alpha
              [radius]="2" [rgb]="rgb" [hsl]="hsl"
              [pointer]="pointer" (onChange)="handleValueChange($event)"
            ></color-alpha>
          </div>
        </div>
      </div>
      <color-chrome-fields
        [rgb]="rgb" [hsl]="hsl" [hex]="hex"
        [disableAlpha]="disableAlpha"
        (onChange)="handleValueChange($event)"
      ></color-chrome-fields>
    </div>
  </div>
  `,
                changeDetection: ChangeDetectionStrategy.OnPush,
                preserveWhitespaces: false,
                styles: [`
      .chrome-picker {
        background: #fff;
        border-radius: 2px;
        box-shadow: 0 0 2px rgba(0, 0, 0, 0.3), 0 4px 8px rgba(0, 0, 0, 0.3);
        box-sizing: initial;
        width: 225px;
        font-family: 'Menlo';
      }
      .chrome-controls {
        display: flex;
      }
      .chrome-color {
        width: 42px;
      }
      .chrome-body {
        padding: 14px 14px 12px;
      }
      .chrome-active {
        position: absolute;
        top: 0;
        bottom: 0;
        left: 0;
        right: 0;
        border-radius: 20px;
        box-shadow: inset 0 0 0 1px rgba(0, 0, 0, 0.1);
        z-index: 2;
      }
      .chrome-swatch {
        width: 28px;
        height: 28px;
        border-radius: 15px;
        position: relative;
        overflow: hidden;
      }
      .saturation {
        width: 100%;
        padding-bottom: 55%;
        position: relative;
        border-radius: 2px 2px 0 0;
        overflow: hidden;
      }
      .chrome-toggles {
        flex: 1;
      }
      .chrome-hue {
        height: 10px;
        position: relative;
        margin-bottom: 8px;
      }
      .chrome-alpha {
        height: 10px;
        position: relative;
      }
    `]
            }]
    }], function () { return []; }, { disableAlpha: [{
            type: Input
        }] }); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ColorChromeModule, { declarations: function () { return [ChromeComponent,
        ChromeFieldsComponent]; }, imports: function () { return [CommonModule,
        AlphaModule,
        CheckboardModule,
        EditableInputModule,
        HueModule,
        SaturationModule]; }, exports: function () { return [ChromeComponent,
        ChromeFieldsComponent]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ColorChromeModule, [{
        type: NgModule,
        args: [{
                declarations: [ChromeComponent, ChromeFieldsComponent],
                exports: [ChromeComponent, ChromeFieldsComponent],
                imports: [
                    CommonModule,
                    AlphaModule,
                    CheckboardModule,
                    EditableInputModule,
                    HueModule,
                    SaturationModule,
                ]
            }]
    }], null, null); })();

/**
 * Generated bundle index. Do not edit.
 */

export { ChromeComponent, ColorChromeModule, ChromeFieldsComponent as ɵa };

//# sourceMappingURL=ngx-color-chrome.js.map