import { __decorate } from 'tslib';
import { CommonModule } from '@angular/common';
import { EventEmitter, Input, Output, Component, ChangeDetectionStrategy, NgModule } from '@angular/core';
import { ColorWrap, isValidHex, SwatchModule } from 'ngx-color';

import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from 'ngx-color';
import * as ɵngcc2 from '@angular/common';

function GithubComponent_color_github_swatch_3_Template(rf, ctx) { if (rf & 1) {
    const _r3 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "color-github-swatch", 3);
    ɵngcc0.ɵɵlistener("onClick", function GithubComponent_color_github_swatch_3_Template_color_github_swatch_onClick_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r3); const ctx_r2 = ɵngcc0.ɵɵnextContext(); return ctx_r2.handleBlockChange($event); })("onSwatchHover", function GithubComponent_color_github_swatch_3_Template_color_github_swatch_onSwatchHover_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r3); const ctx_r4 = ɵngcc0.ɵɵnextContext(); return ctx_r4.onSwatchHover.emit($event); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const color_r1 = ctx.$implicit;
    ɵngcc0.ɵɵproperty("color", color_r1);
} }
let GithubSwatchComponent = class GithubSwatchComponent {
    constructor() {
        this.onClick = new EventEmitter();
        this.onSwatchHover = new EventEmitter();
    }
    handleClick({ hex, $event }) {
        this.onClick.emit({ hex, $event });
    }
};
GithubSwatchComponent.ɵfac = function GithubSwatchComponent_Factory(t) { return new (t || GithubSwatchComponent)(); };
GithubSwatchComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: GithubSwatchComponent, selectors: [["color-github-swatch"]], inputs: { color: "color" }, outputs: { onClick: "onClick", onSwatchHover: "onSwatchHover" }, decls: 3, vars: 3, consts: [[1, "github-swatch"], [1, "swatch", 3, "color", "onClick", "onHover"], [1, "clear"]], template: function GithubSwatchComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "color-swatch", 1);
        ɵngcc0.ɵɵlistener("onClick", function GithubSwatchComponent_Template_color_swatch_onClick_1_listener($event) { return ctx.handleClick($event); })("onHover", function GithubSwatchComponent_Template_color_swatch_onHover_1_listener($event) { return ctx.onSwatchHover.emit($event); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(2, "div", 2);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵstyleMap(ctx.swatchStyle);
        ɵngcc0.ɵɵproperty("color", ctx.color);
    } }, directives: [ɵngcc1.SwatchComponent], styles: [".github-swatch[_ngcontent-%COMP%] {\n      width: 25px;\n      height: 25px;\n      font-size: 0;\n    }\n    .github-swatch[_ngcontent-%COMP%]:hover {\n      position: relative;\n      z-index: 2;\n      outline: 2px solid #fff;\n      box-shadow: 0 0 5px 2px rgba(0,0,0,0.25);\n    }"], changeDetection: 0 });
__decorate([
    Input()
], GithubSwatchComponent.prototype, "color", void 0);
__decorate([
    Output()
], GithubSwatchComponent.prototype, "onClick", void 0);
__decorate([
    Output()
], GithubSwatchComponent.prototype, "onSwatchHover", void 0);

let GithubComponent = class GithubComponent extends ColorWrap {
    constructor() {
        super();
        /** Pixel value for picker width */
        this.width = 212;
        /** Color squares to display */
        this.colors = [
            '#B80000',
            '#DB3E00',
            '#FCCB00',
            '#008B02',
            '#006B76',
            '#1273DE',
            '#004DCF',
            '#5300EB',
            '#EB9694',
            '#FAD0C3',
            '#FEF3BD',
            '#C1E1C5',
            '#BEDADC',
            '#C4DEF6',
            '#BED3F3',
            '#D4C4FB',
        ];
        this.triangle = 'top-left';
    }
    handleBlockChange({ hex, $event }) {
        if (isValidHex(hex)) {
            this.handleChange({ hex, source: 'hex' }, $event);
        }
    }
    handleValueChange({ data, $event }) {
        this.handleChange(data, $event);
    }
};
GithubComponent.ɵfac = function GithubComponent_Factory(t) { return new (t || GithubComponent)(); };
GithubComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: GithubComponent, selectors: [["color-github"]], inputs: { width: "width", colors: "colors", triangle: "triangle" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 4, vars: 7, consts: [[1, "triangleShadow"], [1, "triangle"], [3, "color", "onClick", "onSwatchHover", 4, "ngFor", "ngForOf"], [3, "color", "onClick", "onSwatchHover"]], template: function GithubComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div");
        ɵngcc0.ɵɵelement(1, "div", 0);
        ɵngcc0.ɵɵelement(2, "div", 1);
        ɵngcc0.ɵɵtemplate(3, GithubComponent_color_github_swatch_3_Template, 1, 1, "color-github-swatch", 2);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵclassMapInterpolate2("github-picker ", ctx.triangle, "-triangle ", ctx.className, "");
        ɵngcc0.ɵɵstyleProp("width", ctx.width, "px");
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.colors);
    } }, directives: [ɵngcc2.NgForOf, GithubSwatchComponent], styles: [".github-picker[_ngcontent-%COMP%] {\n    background: rgb(255, 255, 255);\n    border: 1px solid rgba(0, 0, 0, 0.2);\n    box-shadow: rgba(0, 0, 0, 0.15) 0px 3px 12px;\n    border-radius: 4px;\n    position: relative;\n    padding: 5px;\n    display: flex;\n    flex-wrap: wrap;\n    box-sizing: border-box;\n  }\n  .triangleShadow[_ngcontent-%COMP%] {\n    position: absolute;\n    border-width: 8px;\n    border-style: solid;\n    border-color: transparent transparent rgba(0, 0, 0, 0.15);\n    border-image: initial;\n  }\n  .triangle[_ngcontent-%COMP%] {\n    position: absolute;\n    border-width: 7px;\n    border-style: solid;\n    border-color: transparent transparent rgb(255, 255, 255);\n    border-image: initial;\n  }\n  .hide-triangle[_ngcontent-%COMP%]    > .triangle[_ngcontent-%COMP%] {\n    display: none;\n  }\n  .hide-triangle[_ngcontent-%COMP%]    > .triangleShadow[_ngcontent-%COMP%] {\n    display: none;\n  }\n  .top-left-triangle[_ngcontent-%COMP%]    > .triangle[_ngcontent-%COMP%] {\n    top: -14px;\n    left: 10px;\n  }\n  .top-left-triangle[_ngcontent-%COMP%]    > .triangleShadow[_ngcontent-%COMP%] {\n    top: -16px;\n    left: 9px;\n  }\n  .top-right-triangle[_ngcontent-%COMP%]    > .triangle[_ngcontent-%COMP%] {\n    top: -14px;\n    right: 10px;\n  }\n  .top-right-triangle[_ngcontent-%COMP%]    > .triangleShadow[_ngcontent-%COMP%] {\n    top: -16px;\n    right: 9px;\n  }\n  .bottom-right-triangle[_ngcontent-%COMP%]    > .triangle[_ngcontent-%COMP%] {\n    top: 35px;\n    right: 10px;\n    transform: rotate(180deg);\n  }\n  .bottom-right-triangle[_ngcontent-%COMP%]    > .triangleShadow[_ngcontent-%COMP%] {\n    top: 37px;\n    right: 9px;\n    transform: rotate(180deg);\n  }"], changeDetection: 0 });
__decorate([
    Input()
], GithubComponent.prototype, "width", void 0);
__decorate([
    Input()
], GithubComponent.prototype, "colors", void 0);
__decorate([
    Input()
], GithubComponent.prototype, "triangle", void 0);
let ColorGithubModule = class ColorGithubModule {
};
ColorGithubModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: ColorGithubModule });
ColorGithubModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function ColorGithubModule_Factory(t) { return new (t || ColorGithubModule)(); }, imports: [[CommonModule, SwatchModule]] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(GithubSwatchComponent, [{
        type: Component,
        args: [{
                selector: 'color-github-swatch',
                template: `
  <div class="github-swatch">
    <color-swatch
      [color]="color"
      [style]="swatchStyle"
      (onClick)="handleClick($event)"
      (onHover)="onSwatchHover.emit($event)"
      class="swatch"
    ></color-swatch>
    <div class="clear"></div>
  </div>
  `,
                changeDetection: ChangeDetectionStrategy.OnPush,
                preserveWhitespaces: false,
                styles: [`
    .github-swatch {
      width: 25px;
      height: 25px;
      font-size: 0;
    }
    .github-swatch:hover {
      position: relative;
      z-index: 2;
      outline: 2px solid #fff;
      box-shadow: 0 0 5px 2px rgba(0,0,0,0.25);
    }
  `]
            }]
    }], function () { return []; }, { onClick: [{
            type: Output
        }], onSwatchHover: [{
            type: Output
        }], color: [{
            type: Input
        }] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(GithubComponent, [{
        type: Component,
        args: [{
                selector: 'color-github',
                template: `
  <div class="github-picker {{ triangle }}-triangle {{ className }}"
    [style.width.px]="width"
  >
    <div class="triangleShadow"></div>
    <div class="triangle"></div>
    <color-github-swatch *ngFor="let color of colors"
      [color]="color"
      (onClick)="handleBlockChange($event)"
      (onSwatchHover)="onSwatchHover.emit($event)"
    ></color-github-swatch>
  </div>
  `,
                changeDetection: ChangeDetectionStrategy.OnPush,
                preserveWhitespaces: false,
                styles: [`
  .github-picker {
    background: rgb(255, 255, 255);
    border: 1px solid rgba(0, 0, 0, 0.2);
    box-shadow: rgba(0, 0, 0, 0.15) 0px 3px 12px;
    border-radius: 4px;
    position: relative;
    padding: 5px;
    display: flex;
    flex-wrap: wrap;
    box-sizing: border-box;
  }
  .triangleShadow {
    position: absolute;
    border-width: 8px;
    border-style: solid;
    border-color: transparent transparent rgba(0, 0, 0, 0.15);
    border-image: initial;
  }
  .triangle {
    position: absolute;
    border-width: 7px;
    border-style: solid;
    border-color: transparent transparent rgb(255, 255, 255);
    border-image: initial;
  }
  .hide-triangle > .triangle {
    display: none;
  }
  .hide-triangle > .triangleShadow {
    display: none;
  }
  .top-left-triangle > .triangle {
    top: -14px;
    left: 10px;
  }
  .top-left-triangle > .triangleShadow {
    top: -16px;
    left: 9px;
  }
  .top-right-triangle > .triangle {
    top: -14px;
    right: 10px;
  }
  .top-right-triangle > .triangleShadow {
    top: -16px;
    right: 9px;
  }
  .bottom-right-triangle > .triangle {
    top: 35px;
    right: 10px;
    transform: rotate(180deg);
  }
  .bottom-right-triangle > .triangleShadow {
    top: 37px;
    right: 9px;
    transform: rotate(180deg);
  }
  `]
            }]
    }], function () { return []; }, { width: [{
            type: Input
        }], colors: [{
            type: Input
        }], triangle: [{
            type: Input
        }] }); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ColorGithubModule, { declarations: function () { return [GithubComponent,
        GithubSwatchComponent]; }, imports: function () { return [CommonModule, SwatchModule]; }, exports: function () { return [GithubComponent,
        GithubSwatchComponent]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ColorGithubModule, [{
        type: NgModule,
        args: [{
                declarations: [GithubComponent, GithubSwatchComponent],
                exports: [GithubComponent, GithubSwatchComponent],
                imports: [CommonModule, SwatchModule]
            }]
    }], null, null); })();

/**
 * Generated bundle index. Do not edit.
 */

export { ColorGithubModule, GithubComponent, GithubSwatchComponent as ɵa };

//# sourceMappingURL=ngx-color-github.js.map