import { __decorate } from 'tslib';
import { CommonModule } from '@angular/common';
import { EventEmitter, Input, Output, Component, ChangeDetectionStrategy, NgModule } from '@angular/core';
import { isValidHex, ColorWrap, AlphaModule, CheckboardModule, EditableInputModule, HueModule, SaturationModule, SwatchModule } from 'ngx-color';
import { TinyColor } from '@ctrl/tinycolor';

import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from 'ngx-color';
import * as ɵngcc2 from '@angular/common';

const _c0 = function (a0, a1) { return { input: a0, label: a1 }; };
function SketchFieldsComponent_div_9_Template(rf, ctx) { if (rf & 1) {
    const _r2 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 8);
    ɵngcc0.ɵɵelementStart(1, "color-editable-input", 9);
    ɵngcc0.ɵɵlistener("onChange", function SketchFieldsComponent_div_9_Template_color_editable_input_onChange_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r2); const ctx_r1 = ɵngcc0.ɵɵnextContext(); return ctx_r1.handleChange($event); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵstyleMap(ɵngcc0.ɵɵpureFunction2(5, _c0, ctx_r0.input, ctx_r0.label));
    ɵngcc0.ɵɵproperty("value", ctx_r0.round(ctx_r0.rgb.a * 100))("dragLabel", true)("dragMax", 100);
} }
function SketchPresetColorsComponent_div_1_Template(rf, ctx) { if (rf & 1) {
    const _r3 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 2);
    ɵngcc0.ɵɵelementStart(1, "color-swatch", 3);
    ɵngcc0.ɵɵlistener("onClick", function SketchPresetColorsComponent_div_1_Template_color_swatch_onClick_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r3); const ctx_r2 = ɵngcc0.ɵɵnextContext(); return ctx_r2.handleClick($event); })("onHover", function SketchPresetColorsComponent_div_1_Template_color_swatch_onHover_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r3); const ctx_r4 = ɵngcc0.ɵɵnextContext(); return ctx_r4.onSwatchHover.emit($event); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const c_r1 = ctx.$implicit;
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵstyleMap(ctx_r0.swatchStyle);
    ɵngcc0.ɵɵproperty("color", ctx_r0.normalizeValue(c_r1).color)("focusStyle", ctx_r0.focusStyle(c_r1));
} }
function SketchComponent_div_7_Template(rf, ctx) { if (rf & 1) {
    const _r3 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 12);
    ɵngcc0.ɵɵelementStart(1, "color-alpha", 13);
    ɵngcc0.ɵɵlistener("onChange", function SketchComponent_div_7_Template_color_alpha_onChange_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r3); const ctx_r2 = ɵngcc0.ɵɵnextContext(); return ctx_r2.handleValueChange($event); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("radius", 2)("rgb", ctx_r0.rgb)("hsl", ctx_r0.hsl);
} }
function SketchComponent_div_13_Template(rf, ctx) { if (rf & 1) {
    const _r5 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 14);
    ɵngcc0.ɵɵelementStart(1, "color-sketch-preset-colors", 15);
    ɵngcc0.ɵɵlistener("onClick", function SketchComponent_div_13_Template_color_sketch_preset_colors_onClick_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r5); const ctx_r4 = ɵngcc0.ɵɵnextContext(); return ctx_r4.handleBlockChange($event); })("onSwatchHover", function SketchComponent_div_13_Template_color_sketch_preset_colors_onSwatchHover_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r5); const ctx_r6 = ɵngcc0.ɵɵnextContext(); return ctx_r6.onSwatchHover.emit($event); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("colors", ctx_r1.presetColors);
} }
let SketchFieldsComponent = class SketchFieldsComponent {
    constructor() {
        this.disableAlpha = false;
        this.onChange = new EventEmitter();
        this.input = {
            width: '100%',
            padding: '4px 10% 3px',
            border: 'none',
            boxSizing: 'border-box',
            boxShadow: 'inset 0 0 0 1px #ccc',
            fontSize: '11px',
        };
        this.label = {
            display: 'block',
            textAlign: 'center',
            fontSize: '11px',
            color: '#222',
            paddingTop: '3px',
            paddingBottom: '4px',
            textTransform: 'capitalize',
        };
    }
    round(value) {
        return Math.round(value);
    }
    handleChange({ data, $event }) {
        if (data.hex) {
            if (isValidHex(data.hex)) {
                const color = new TinyColor(data.hex);
                this.onChange.emit({
                    data: {
                        hex: this.disableAlpha ? color.toHex() : color.toHex8(),
                        source: 'hex',
                    },
                    $event,
                });
            }
        }
        else if (data.r || data.g || data.b) {
            this.onChange.emit({
                data: {
                    r: data.r || this.rgb.r,
                    g: data.g || this.rgb.g,
                    b: data.b || this.rgb.b,
                    source: 'rgb',
                },
                $event,
            });
        }
        else if (data.a) {
            if (data.a < 0) {
                data.a = 0;
            }
            else if (data.a > 100) {
                data.a = 100;
            }
            data.a /= 100;
            if (this.disableAlpha) {
                data.a = 1;
            }
            this.onChange.emit({
                data: {
                    h: this.hsl.h,
                    s: this.hsl.s,
                    l: this.hsl.l,
                    a: Math.round(data.a * 100) / 100,
                    source: 'rgb',
                },
                $event,
            });
        }
        else if (data.h || data.s || data.l) {
            this.onChange.emit({
                data: {
                    h: data.h || this.hsl.h,
                    s: Number((data.s && data.s) || this.hsl.s),
                    l: Number((data.l && data.l) || this.hsl.l),
                    source: 'hsl',
                },
                $event,
            });
        }
    }
};
SketchFieldsComponent.ɵfac = function SketchFieldsComponent_Factory(t) { return new (t || SketchFieldsComponent)(); };
SketchFieldsComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: SketchFieldsComponent, selectors: [["color-sketch-fields"]], inputs: { disableAlpha: "disableAlpha", hsl: "hsl", rgb: "rgb", hex: "hex" }, outputs: { onChange: "onChange" }, decls: 10, vars: 31, consts: [[1, "sketch-fields"], [1, "sketch-double"], ["label", "hex", 3, "value", "onChange"], [1, "sketch-single"], ["label", "r", 3, "value", "dragLabel", "dragMax", "onChange"], ["label", "g", 3, "value", "dragLabel", "dragMax", "onChange"], ["label", "b", 3, "value", "dragLabel", "dragMax", "onChange"], ["class", "sketch-alpha", 4, "ngIf"], [1, "sketch-alpha"], ["label", "a", 3, "value", "dragLabel", "dragMax", "onChange"]], template: function SketchFieldsComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "div", 1);
        ɵngcc0.ɵɵelementStart(2, "color-editable-input", 2);
        ɵngcc0.ɵɵlistener("onChange", function SketchFieldsComponent_Template_color_editable_input_onChange_2_listener($event) { return ctx.handleChange($event); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(3, "div", 3);
        ɵngcc0.ɵɵelementStart(4, "color-editable-input", 4);
        ɵngcc0.ɵɵlistener("onChange", function SketchFieldsComponent_Template_color_editable_input_onChange_4_listener($event) { return ctx.handleChange($event); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(5, "div", 3);
        ɵngcc0.ɵɵelementStart(6, "color-editable-input", 5);
        ɵngcc0.ɵɵlistener("onChange", function SketchFieldsComponent_Template_color_editable_input_onChange_6_listener($event) { return ctx.handleChange($event); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(7, "div", 3);
        ɵngcc0.ɵɵelementStart(8, "color-editable-input", 6);
        ɵngcc0.ɵɵlistener("onChange", function SketchFieldsComponent_Template_color_editable_input_onChange_8_listener($event) { return ctx.handleChange($event); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(9, SketchFieldsComponent_div_9_Template, 2, 8, "div", 7);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵstyleMap(ɵngcc0.ɵɵpureFunction2(19, _c0, ctx.input, ctx.label));
        ɵngcc0.ɵɵproperty("value", ctx.hex.replace("#", ""));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵstyleMap(ɵngcc0.ɵɵpureFunction2(22, _c0, ctx.input, ctx.label));
        ɵngcc0.ɵɵproperty("value", ctx.rgb.r)("dragLabel", true)("dragMax", 255);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵstyleMap(ɵngcc0.ɵɵpureFunction2(25, _c0, ctx.input, ctx.label));
        ɵngcc0.ɵɵproperty("value", ctx.rgb.g)("dragLabel", true)("dragMax", 255);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵstyleMap(ɵngcc0.ɵɵpureFunction2(28, _c0, ctx.input, ctx.label));
        ɵngcc0.ɵɵproperty("value", ctx.rgb.b)("dragLabel", true)("dragMax", 255);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.disableAlpha === false);
    } }, directives: [ɵngcc1.EditableInputComponent, ɵngcc2.NgIf], styles: [".sketch-fields[_ngcontent-%COMP%] {\n      display: flex;\n      padding-top: 4px;\n    }\n    .sketch-double[_ngcontent-%COMP%] {\n      -webkit-box-flex: 2;\n      flex: 2 1 0%;\n    }\n    .sketch-single[_ngcontent-%COMP%] {\n      flex: 1 1 0%;\n      padding-left: 6px;\n    }\n    .sketch-alpha[_ngcontent-%COMP%] {\n      -webkit-box-flex: 1;\n      flex: 1 1 0%;\n      padding-left: 6px;\n    }"], changeDetection: 0 });
__decorate([
    Input()
], SketchFieldsComponent.prototype, "hsl", void 0);
__decorate([
    Input()
], SketchFieldsComponent.prototype, "rgb", void 0);
__decorate([
    Input()
], SketchFieldsComponent.prototype, "hex", void 0);
__decorate([
    Input()
], SketchFieldsComponent.prototype, "disableAlpha", void 0);
__decorate([
    Output()
], SketchFieldsComponent.prototype, "onChange", void 0);

let SketchPresetColorsComponent = class SketchPresetColorsComponent {
    constructor() {
        this.onClick = new EventEmitter();
        this.onSwatchHover = new EventEmitter();
        this.swatchStyle = {
            borderRadius: '3px',
            boxShadow: 'inset 0 0 0 1px rgba(0,0,0,.15)',
        };
    }
    handleClick({ hex, $event }) {
        this.onClick.emit({ hex, $event });
    }
    normalizeValue(val) {
        if (typeof val === 'string') {
            return { color: val };
        }
        return val;
    }
    focusStyle(val) {
        const c = this.normalizeValue(val);
        return {
            boxShadow: `inset 0 0 0 1px rgba(0,0,0,.15), 0 0 4px ${c.color}`,
        };
    }
};
SketchPresetColorsComponent.ɵfac = function SketchPresetColorsComponent_Factory(t) { return new (t || SketchPresetColorsComponent)(); };
SketchPresetColorsComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: SketchPresetColorsComponent, selectors: [["color-sketch-preset-colors"]], inputs: { colors: "colors" }, outputs: { onClick: "onClick", onSwatchHover: "onSwatchHover" }, decls: 2, vars: 1, consts: [[1, "sketch-swatches"], ["class", "sketch-wrap", 4, "ngFor", "ngForOf"], [1, "sketch-wrap"], [1, "swatch", 3, "color", "focusStyle", "onClick", "onHover"]], template: function SketchPresetColorsComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵtemplate(1, SketchPresetColorsComponent_div_1_Template, 2, 4, "div", 1);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.colors);
    } }, directives: [ɵngcc2.NgForOf, ɵngcc1.SwatchComponent], styles: [".sketch-swatches[_ngcontent-%COMP%] {\n      position: relative;\n      display: flex;\n      flex-wrap: wrap;\n      margin: 0px -10px;\n      padding: 10px 0px 0px 10px;\n      border-top: 1px solid rgb(238, 238, 238);\n    }\n    .sketch-wrap[_ngcontent-%COMP%] {\n      width: 16px;\n      height: 16px;\n      margin: 0px 10px 10px 0px;\n    }"], changeDetection: 0 });
__decorate([
    Input()
], SketchPresetColorsComponent.prototype, "colors", void 0);
__decorate([
    Output()
], SketchPresetColorsComponent.prototype, "onClick", void 0);
__decorate([
    Output()
], SketchPresetColorsComponent.prototype, "onSwatchHover", void 0);

let SketchComponent = class SketchComponent extends ColorWrap {
    constructor() {
        super();
        /** Remove alpha slider and options from picker */
        this.disableAlpha = false;
        /** Hex strings for default colors at bottom of picker */
        this.presetColors = [
            '#D0021B',
            '#F5A623',
            '#F8E71C',
            '#8B572A',
            '#7ED321',
            '#417505',
            '#BD10E0',
            '#9013FE',
            '#4A90E2',
            '#50E3C2',
            '#B8E986',
            '#000000',
            '#4A4A4A',
            '#9B9B9B',
            '#FFFFFF',
        ];
        /** Width of picker */
        this.width = 200;
    }
    afterValidChange() {
        const alpha = this.disableAlpha ? 1 : this.rgb.a;
        this.activeBackground = `rgba(${this.rgb.r}, ${this.rgb.g}, ${this.rgb.b}, ${alpha})`;
    }
    handleValueChange({ data, $event }) {
        this.handleChange(data, $event);
    }
    handleBlockChange({ hex, $event }) {
        if (isValidHex(hex)) {
            // this.hex = hex;
            this.handleChange({
                hex,
                source: 'hex',
            }, $event);
        }
    }
};
SketchComponent.ɵfac = function SketchComponent_Factory(t) { return new (t || SketchComponent)(); };
SketchComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: SketchComponent, selectors: [["color-sketch"]], inputs: { disableAlpha: "disableAlpha", presetColors: "presetColors", width: "width" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 14, vars: 16, consts: [[1, "sketch-saturation"], [3, "hsl", "hsv", "onChange"], [1, "sketch-controls"], [1, "sketch-sliders"], [1, "sketch-hue"], [3, "hsl", "onChange"], ["class", "sketch-alpha", 4, "ngIf"], [1, "sketch-color"], [1, "sketch-active"], [1, "sketch-fields-container"], [3, "rgb", "hsl", "hex", "disableAlpha", "onChange"], ["class", "sketch-swatches-container", 4, "ngIf"], [1, "sketch-alpha"], [3, "radius", "rgb", "hsl", "onChange"], [1, "sketch-swatches-container"], [3, "colors", "onClick", "onSwatchHover"]], template: function SketchComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div");
        ɵngcc0.ɵɵelementStart(1, "div", 0);
        ɵngcc0.ɵɵelementStart(2, "color-saturation", 1);
        ɵngcc0.ɵɵlistener("onChange", function SketchComponent_Template_color_saturation_onChange_2_listener($event) { return ctx.handleValueChange($event); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(3, "div", 2);
        ɵngcc0.ɵɵelementStart(4, "div", 3);
        ɵngcc0.ɵɵelementStart(5, "div", 4);
        ɵngcc0.ɵɵelementStart(6, "color-hue", 5);
        ɵngcc0.ɵɵlistener("onChange", function SketchComponent_Template_color_hue_onChange_6_listener($event) { return ctx.handleValueChange($event); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(7, SketchComponent_div_7_Template, 2, 3, "div", 6);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(8, "div", 7);
        ɵngcc0.ɵɵelement(9, "color-checkboard");
        ɵngcc0.ɵɵelement(10, "div", 8);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(11, "div", 9);
        ɵngcc0.ɵɵelementStart(12, "color-sketch-fields", 10);
        ɵngcc0.ɵɵlistener("onChange", function SketchComponent_Template_color_sketch_fields_onChange_12_listener($event) { return ctx.handleValueChange($event); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(13, SketchComponent_div_13_Template, 2, 1, "div", 11);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵclassMapInterpolate1("sketch-picker ", ctx.className, "");
        ɵngcc0.ɵɵstyleProp("width", ctx.width);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("hsl", ctx.hsl)("hsv", ctx.hsv);
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵproperty("hsl", ctx.hsl);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.disableAlpha === false);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵstyleProp("background", ctx.activeBackground, ɵngcc0.ɵɵdefaultStyleSanitizer);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("rgb", ctx.rgb)("hsl", ctx.hsl)("hex", ctx.hex)("disableAlpha", ctx.disableAlpha);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.presetColors && ctx.presetColors.length);
    } }, directives: [ɵngcc1.SaturationComponent, ɵngcc1.HueComponent, ɵngcc2.NgIf, ɵngcc1.CheckboardComponent, SketchFieldsComponent, ɵngcc1.AlphaComponent, SketchPresetColorsComponent], styles: [".sketch-picker[_ngcontent-%COMP%] {\n      padding: 10px 10px 3px;\n      box-sizing: initial;\n      background: #fff;\n      border-radius: 4px;\n      box-shadow: 0 0 0 1px rgba(0,0,0,.15), 0 8px 16px rgba(0,0,0,.15);\n    }\n    .sketch-saturation[_ngcontent-%COMP%] {\n      width: 100%;\n      padding-bottom: 75%;\n      position: relative;\n      overflow: hidden;\n    }\n    .sketch-fields-container[_ngcontent-%COMP%] {\n      display: flex;\n    }\n    .sketch-swatches-container[_ngcontent-%COMP%] {\n      display: flex;\n    }\n    .sketch-controls[_ngcontent-%COMP%] {\n      display: flex;\n    }\n    .sketch-sliders[_ngcontent-%COMP%] {\n      padding: 4px 0px;\n      -webkit-box-flex: 1;\n      flex: 1 1 0%;\n    }\n    .sketch-hue[_ngcontent-%COMP%] {\n      position: relative;\n      height: 10px;\n      overflow: hidden;\n    }\n    .sketch-alpha[_ngcontent-%COMP%] {\n      position: relative;\n      height: 10px;\n      margin-top: 4px;\n      overflow: hidden;\n    }\n    .sketch-color[_ngcontent-%COMP%] {\n      width: 24px;\n      height: 24px;\n      position: relative;\n      margin-top: 4px;\n      margin-left: 4px;\n      border-radius: 3px;\n    }\n    .sketch-active[_ngcontent-%COMP%] {\n      position: absolute;\n      top: 0px;\n      right: 0px;\n      bottom: 0px;\n      left: 0px;\n      border-radius: 2px;\n      box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset, rgba(0, 0, 0, 0.25) 0px 0px 4px inset;\n    }"], changeDetection: 0 });
__decorate([
    Input()
], SketchComponent.prototype, "disableAlpha", void 0);
__decorate([
    Input()
], SketchComponent.prototype, "presetColors", void 0);
__decorate([
    Input()
], SketchComponent.prototype, "width", void 0);
let ColorSketchModule = class ColorSketchModule {
};
ColorSketchModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: ColorSketchModule });
ColorSketchModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function ColorSketchModule_Factory(t) { return new (t || ColorSketchModule)(); }, imports: [[
            CommonModule,
            AlphaModule,
            CheckboardModule,
            EditableInputModule,
            HueModule,
            SaturationModule,
            SwatchModule,
        ]] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SketchFieldsComponent, [{
        type: Component,
        args: [{
                selector: 'color-sketch-fields',
                template: `
  <div class="sketch-fields">
    <div class="sketch-double">
      <color-editable-input
        [style]="{ input: input, label: label }"
        label="hex"
        [value]="hex.replace('#', '')"
        (onChange)="handleChange($event)"
      ></color-editable-input>
    </div>
    <div class="sketch-single">
      <color-editable-input
        [style]="{ input: input, label: label }"
        label="r"
        [value]="rgb.r"
        (onChange)="handleChange($event)"
        [dragLabel]="true"
        [dragMax]="255"
      ></color-editable-input>
    </div>
    <div class="sketch-single">
      <color-editable-input
        [style]="{ input: input, label: label }"
        label="g"
        [value]="rgb.g"
        (onChange)="handleChange($event)"
        [dragLabel]="true"
        [dragMax]="255"
      ></color-editable-input>
    </div>
    <div class="sketch-single">
      <color-editable-input
        [style]="{ input: input, label: label }"
        label="b"
        [value]="rgb.b"
        (onChange)="handleChange($event)"
        [dragLabel]="true"
        [dragMax]="255"
      ></color-editable-input>
    </div>
    <div class="sketch-alpha" *ngIf="disableAlpha === false">
      <color-editable-input
        [style]="{ input: input, label: label }"
        label="a"
        [value]="round(rgb.a * 100)"
        (onChange)="handleChange($event)"
        [dragLabel]="true"
        [dragMax]="100"
      ></color-editable-input>
    </div>
  </div>
  `,
                changeDetection: ChangeDetectionStrategy.OnPush,
                preserveWhitespaces: false,
                styles: [`
    .sketch-fields {
      display: flex;
      padding-top: 4px;
    }
    .sketch-double {
      -webkit-box-flex: 2;
      flex: 2 1 0%;
    }
    .sketch-single {
      flex: 1 1 0%;
      padding-left: 6px;
    }
    .sketch-alpha {
      -webkit-box-flex: 1;
      flex: 1 1 0%;
      padding-left: 6px;
    }
  `]
            }]
    }], function () { return []; }, { disableAlpha: [{
            type: Input
        }], onChange: [{
            type: Output
        }], hsl: [{
            type: Input
        }], rgb: [{
            type: Input
        }], hex: [{
            type: Input
        }] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SketchPresetColorsComponent, [{
        type: Component,
        args: [{
                selector: 'color-sketch-preset-colors',
                template: `
  <div class="sketch-swatches">
    <div class="sketch-wrap" *ngFor="let c of colors">
      <color-swatch
        [color]="normalizeValue(c).color"
        [style]="swatchStyle"
        [focusStyle]="focusStyle(c)"
        (onClick)="handleClick($event)"
        (onHover)="onSwatchHover.emit($event)"
        class="swatch"
      ></color-swatch>
    </div>
  </div>
  `,
                changeDetection: ChangeDetectionStrategy.OnPush,
                preserveWhitespaces: false,
                styles: [`
    .sketch-swatches {
      position: relative;
      display: flex;
      flex-wrap: wrap;
      margin: 0px -10px;
      padding: 10px 0px 0px 10px;
      border-top: 1px solid rgb(238, 238, 238);
    }
    .sketch-wrap {
      width: 16px;
      height: 16px;
      margin: 0px 10px 10px 0px;
    }
  `]
            }]
    }], function () { return []; }, { onClick: [{
            type: Output
        }], onSwatchHover: [{
            type: Output
        }], colors: [{
            type: Input
        }] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SketchComponent, [{
        type: Component,
        args: [{
                selector: 'color-sketch',
                template: `
  <div class="sketch-picker {{ className }}" [style.width]="width">
    <div class="sketch-saturation">
      <color-saturation [hsl]="hsl" [hsv]="hsv"
        (onChange)="handleValueChange($event)"
      >
      </color-saturation>
    </div>
    <div class="sketch-controls">
      <div class="sketch-sliders">
        <div class="sketch-hue">
          <color-hue [hsl]="hsl"
            (onChange)="handleValueChange($event)"
          ></color-hue>
        </div>
        <div class="sketch-alpha" *ngIf="disableAlpha === false">
          <color-alpha
            [radius]="2" [rgb]="rgb" [hsl]="hsl"
            (onChange)="handleValueChange($event)"
          ></color-alpha>
        </div>
      </div>
      <div class="sketch-color">
        <color-checkboard></color-checkboard>
        <div class="sketch-active" [style.background]="activeBackground"></div>
      </div>
    </div>
    <div class="sketch-fields-container">
      <color-sketch-fields
        [rgb]="rgb" [hsl]="hsl" [hex]="hex"
        [disableAlpha]="disableAlpha"
        (onChange)="handleValueChange($event)"
      ></color-sketch-fields>
    </div>
    <div class="sketch-swatches-container" *ngIf="presetColors && presetColors.length">
      <color-sketch-preset-colors
        [colors]="presetColors"
        (onClick)="handleBlockChange($event)"
        (onSwatchHover)="onSwatchHover.emit($event)"
      ></color-sketch-preset-colors>
    </div>
  </div>
  `,
                changeDetection: ChangeDetectionStrategy.OnPush,
                preserveWhitespaces: false,
                styles: [`
    .sketch-picker {
      padding: 10px 10px 3px;
      box-sizing: initial;
      background: #fff;
      border-radius: 4px;
      box-shadow: 0 0 0 1px rgba(0,0,0,.15), 0 8px 16px rgba(0,0,0,.15);
    }
    .sketch-saturation {
      width: 100%;
      padding-bottom: 75%;
      position: relative;
      overflow: hidden;
    }
    .sketch-fields-container {
      display: flex;
    }
    .sketch-swatches-container {
      display: flex;
    }
    .sketch-controls {
      display: flex;
    }
    .sketch-sliders {
      padding: 4px 0px;
      -webkit-box-flex: 1;
      flex: 1 1 0%;
    }
    .sketch-hue {
      position: relative;
      height: 10px;
      overflow: hidden;
    }
    .sketch-alpha {
      position: relative;
      height: 10px;
      margin-top: 4px;
      overflow: hidden;
    }
    .sketch-color {
      width: 24px;
      height: 24px;
      position: relative;
      margin-top: 4px;
      margin-left: 4px;
      border-radius: 3px;
    }
    .sketch-active {
      position: absolute;
      top: 0px;
      right: 0px;
      bottom: 0px;
      left: 0px;
      border-radius: 2px;
      box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset, rgba(0, 0, 0, 0.25) 0px 0px 4px inset;
    }
  `]
            }]
    }], function () { return []; }, { disableAlpha: [{
            type: Input
        }], presetColors: [{
            type: Input
        }], width: [{
            type: Input
        }] }); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ColorSketchModule, { declarations: function () { return [SketchComponent,
        SketchFieldsComponent,
        SketchPresetColorsComponent]; }, imports: function () { return [CommonModule,
        AlphaModule,
        CheckboardModule,
        EditableInputModule,
        HueModule,
        SaturationModule,
        SwatchModule]; }, exports: function () { return [SketchComponent,
        SketchFieldsComponent,
        SketchPresetColorsComponent]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ColorSketchModule, [{
        type: NgModule,
        args: [{
                declarations: [
                    SketchComponent,
                    SketchFieldsComponent,
                    SketchPresetColorsComponent,
                ],
                exports: [
                    SketchComponent,
                    SketchFieldsComponent,
                    SketchPresetColorsComponent,
                ],
                imports: [
                    CommonModule,
                    AlphaModule,
                    CheckboardModule,
                    EditableInputModule,
                    HueModule,
                    SaturationModule,
                    SwatchModule,
                ]
            }]
    }], null, null); })();

/**
 * Generated bundle index. Do not edit.
 */

export { ColorSketchModule, SketchComponent, SketchFieldsComponent as ɵa, SketchPresetColorsComponent as ɵb };

//# sourceMappingURL=ngx-color-sketch.js.map