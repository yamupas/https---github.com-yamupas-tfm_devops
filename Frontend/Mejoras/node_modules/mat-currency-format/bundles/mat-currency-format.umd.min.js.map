{"version":3,"sources":["ng://mat-currency-format/lib/mat-currency-format.directive.ts","ng://mat-currency-format/lib/mat-currency-format.module.ts"],"names":["reverseFormatNumber","val","locale","group","Intl","NumberFormat","format","replace","decimal","reversedCurrencyVal","RegExp","reversedVal","Number","isNaN","MatCurrencyFormatDirective","el","currencyPipe","renderer","this","currencyCode","allowNegative","regex","positiveDecimal","allDecimal","specialKeys","prototype","ngAfterViewInit","nativeElement","value","transform","onFocus","select","onFocusout","length","indexOf","onKeyDown","event","key","match","preventDefault","onBlur","$event","amount","Directive","args","selector","providers","CurrencyPipe","ElementRef","Renderer2","Inject","LOCALE_ID","Input","HostListener","MatCurrencyFormatModule","NgModule","declarations","imports","exports"],"mappings":"0VAOA,SAAgBA,EAAoBC,EAAKC,OACjCC,EAAQ,IAAIC,KAAKC,aAAaH,GAAQI,OAAO,MAAMC,QAAQ,KAAM,IACjEC,EAAU,IAAIJ,KAAKC,aAAaH,GAAQI,OAAO,KAAKC,QAAQ,KAAM,IACpEE,EAAsBR,EAAIM,QAAQ,IAAIG,OAAO,KAAOP,EAAO,KAAM,IAE/DQ,GADNF,EAAsBA,EAAoBF,QAAQ,IAAIG,OAAO,KAAOF,EAAS,KAAM,MAC3CD,QAAQ,WAAY,IAC5D,OAAOK,OAAOC,MAAMF,GAAe,EAAIA,EAEzC,IAAAG,EAAA,WASE,SAAAA,EAAoBC,EAAwBC,EACxBC,EAAgDf,GADhDgB,KAAAH,GAAAA,EAAwBG,KAAAF,aAAAA,EACxBE,KAAAD,SAAAA,EAAgDC,KAAAhB,OAAAA,EAJ3DgB,KAAAC,aAAe,MACfD,KAAAE,eAAgB,EAKjBF,KAAAG,MAAQ,CACdC,gBAAiB,IAAIZ,OAAO,oBAC5Ba,WAAY,IAAIb,OAAO,uBAGjBQ,KAAAM,YAA6B,CAAC,YAAa,SAAU,YAAa,aAAc,OAmC1F,OAjCEV,EAAAW,UAAAC,gBAAA,WACER,KAAKH,GAAGY,cAAcC,MAAQV,KAAKF,aAAaa,UAAUX,KAAKH,GAAGY,cAAcC,MAAOV,KAAKC,eAGvEL,EAAAW,UAAAK,QAAvB,WACEZ,KAAKH,GAAGY,cAAcC,MAAQV,KAAKH,GAAGY,cAAcC,MAAMrB,QAAQ,YAAa,IAC/EW,KAAKH,GAAGY,cAAcI,UAGEjB,EAAAW,UAAAO,WAA1B,eACM/B,EAAMiB,KAAKH,GAAGY,cAAcC,OACb,IAAf3B,EAAIgC,QAAgC,IAAfhC,EAAIgC,QAAgB,CAAC,IAAK,IAAK,IAAIC,QAAQjC,EAAI,KAAO,KAC7EA,EAAM,KAERiB,KAAKH,GAAGY,cAAcC,MAAQV,KAAKF,aAAaa,UAAU5B,EAAKiB,KAAKC,eAIpEL,EAAAW,UAAAU,UADF,SACYC,IACqC,IAAzClB,KAAKM,YAAYU,QAAQE,EAAMC,QAGnBnB,KAAKE,cAAgBgB,EAAMC,IAAIC,MAAMpB,KAAKG,MAAME,YAAca,EAAMC,IAAIC,MAAMpB,KAAKG,MAAMC,mBAEvGc,EAAMG,mBAIUzB,EAAAW,UAAAe,OAAtB,SAA6BC,OACrBC,EAAS1C,EAAoBkB,KAAKH,GAAGY,cAAcC,MAAOV,KAAKhB,QAAQK,QAAQ,iBAAkB,IACvGW,KAAKH,GAAGY,cAAcC,MAAQc,uBAjDjCC,EAAAA,UAASC,KAAA,CAAC,CACTC,SAAU,2BACVC,UAAW,CAACC,EAAAA,2DAjBMC,EAAAA,kBACXD,EAAAA,oBAD2DE,EAAAA,0CAyBxBC,EAAAA,OAAMN,KAAA,CAACO,EAAAA,sDAJhDC,EAAAA,6BACAA,EAAAA,uBAgBAC,EAAAA,aAAYT,KAAA,CAAC,6BAKbS,EAAAA,aAAYT,KAAA,CAAC,+BAQbS,EAAAA,aAAYT,KAAA,CAAC,UAAW,CAAE,2BAW1BS,EAAAA,aAAYT,KAAA,CAAC,WAKhB9B,EApDA,GCfA,IAAAwC,EAAA,WAKA,SAAAA,KAMuC,2BANtCC,EAAAA,SAAQX,KAAA,CAAC,CACRY,aAAc,CAAE1C,GAChB2C,QAAS,GAETC,QAAS,CAAC5C,OAE2BwC,EAXvC","sourcesContent":["import { Directive, ElementRef, HostListener, AfterViewInit, Input, Renderer2, Inject, LOCALE_ID } from '@angular/core';\nimport { CurrencyPipe } from '@angular/common';\n\n\n/**\n * The function to reverse the number format\n */\nexport function reverseFormatNumber(val, locale) {\n  const group = new Intl.NumberFormat(locale).format(1111).replace(/1/g, '');\n  const decimal = new Intl.NumberFormat(locale).format(1.1).replace(/1/g, '');\n  let reversedCurrencyVal = val.replace(new RegExp('\\\\' + group, 'g'), '');\n  reversedCurrencyVal = reversedCurrencyVal.replace(new RegExp('\\\\' + decimal, 'g'), '.');\n  const reversedVal = reversedCurrencyVal.replace(/[^\\d.-]/g, '');\n  return Number.isNaN(reversedVal) ? 0 : reversedVal;\n}\n@Directive({\n  selector: '[mvndrMatCurrencyFormat]',\n  providers: [CurrencyPipe]\n})\nexport class MatCurrencyFormatDirective  implements AfterViewInit {\n\n  @Input() currencyCode = 'USD';\n  @Input() allowNegative = false;\n\n  constructor(private el: ElementRef, private currencyPipe: CurrencyPipe,\n              private renderer: Renderer2, @Inject(LOCALE_ID) private locale: string) { }\n\n  private regex = {\n    positiveDecimal: new RegExp(/^\\d*[\\.|,]?\\d*$/g),\n    allDecimal: new RegExp(/^-?\\d*[\\.|,]?\\d*$/g)\n  };\n\n  private specialKeys: Array<string> = ['Backspace', 'Delete', 'ArrowLeft', 'ArrowRight', 'Del'];\n\n  ngAfterViewInit() {\n    this.el.nativeElement.value = this.currencyPipe.transform(this.el.nativeElement.value, this.currencyCode);\n  }\n\n  @HostListener('focus') onFocus() {\n    this.el.nativeElement.value = this.el.nativeElement.value.replace(/[^\\d.,-]/g, '');\n    this.el.nativeElement.select();\n  }\n\n  @HostListener('focusout') onFocusout() {\n    let val = this.el.nativeElement.value;\n    if (val.length === 0 || (val.length === 1 && [',', '.', ''].indexOf(val[0]) > -1)) {\n      val = '0';\n    }\n    this.el.nativeElement.value = this.currencyPipe.transform(val, this.currencyCode);\n  }\n\n  @HostListener('keydown', [ '$event' ])\n    onKeyDown(event: KeyboardEvent) {\n      if (this.specialKeys.indexOf(event.key) !== -1) {\n        return;\n      }\n      const matches = this.allowNegative ? event.key.match(this.regex.allDecimal) : event.key.match(this.regex.positiveDecimal);\n      if (!matches) {\n        event.preventDefault();\n      }\n  }\n\n  @HostListener('blur') onBlur($event) {\n    const amount = reverseFormatNumber(this.el.nativeElement.value, this.locale).replace(/^[^0-9]{2}..*/g, '');\n    this.el.nativeElement.value = amount;\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { MatCurrencyFormatDirective } from './mat-currency-format.directive';\n\n\n\n@NgModule({\n  declarations: [ MatCurrencyFormatDirective],\n  imports: [\n  ],\n  exports: [MatCurrencyFormatDirective ]\n})\nexport class MatCurrencyFormatModule { }\n"]}