{"version":3,"file":"mat-currency-format.js","sources":["ng:/mat-currency-format/lib/mat-currency-format.directive.ts","ng:/mat-currency-format/lib/mat-currency-format.module.ts"],"names":[],"mappings":"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","sourcesContent":["import { Directive, ElementRef, HostListener, AfterViewInit, Input, Renderer2, Inject, LOCALE_ID } from '@angular/core';\nimport { CurrencyPipe } from '@angular/common';\n\n\n/**\n * The function to reverse the number format\n */\nexport function reverseFormatNumber(val, locale) {\n  const group = new Intl.NumberFormat(locale).format(1111).replace(/1/g, '');\n  const decimal = new Intl.NumberFormat(locale).format(1.1).replace(/1/g, '');\n  let reversedCurrencyVal = val.replace(new RegExp('\\\\' + group, 'g'), '');\n  reversedCurrencyVal = reversedCurrencyVal.replace(new RegExp('\\\\' + decimal, 'g'), '.');\n  const reversedVal = reversedCurrencyVal.replace(/[^\\d.-]/g, '');\n  return Number.isNaN(reversedVal) ? 0 : reversedVal;\n}\n@Directive({\n  selector: '[mvndrMatCurrencyFormat]',\n  providers: [CurrencyPipe]\n})\nexport class MatCurrencyFormatDirective  implements AfterViewInit {\n\n  @Input() currencyCode = 'USD';\n  @Input() allowNegative = false;\n\n  constructor(private el: ElementRef, private currencyPipe: CurrencyPipe,\n              private renderer: Renderer2, @Inject(LOCALE_ID) private locale: string) { }\n\n  private regex = {\n    positiveDecimal: new RegExp(/^\\d*[\\.|,]?\\d*$/g),\n    allDecimal: new RegExp(/^-?\\d*[\\.|,]?\\d*$/g)\n  };\n\n  private specialKeys: Array<string> = ['Backspace', 'Delete', 'ArrowLeft', 'ArrowRight', 'Del'];\n\n  ngAfterViewInit() {\n    this.el.nativeElement.value = this.currencyPipe.transform(this.el.nativeElement.value, this.currencyCode);\n  }\n\n  @HostListener('focus') onFocus() {\n    this.el.nativeElement.value = this.el.nativeElement.value.replace(/[^\\d.,-]/g, '');\n    this.el.nativeElement.select();\n  }\n\n  @HostListener('focusout') onFocusout() {\n    let val = this.el.nativeElement.value;\n    if (val.length === 0 || (val.length === 1 && [',', '.', ''].indexOf(val[0]) > -1)) {\n      val = '0';\n    }\n    this.el.nativeElement.value = this.currencyPipe.transform(val, this.currencyCode);\n  }\n\n  @HostListener('keydown', [ '$event' ])\n    onKeyDown(event: KeyboardEvent) {\n      if (this.specialKeys.indexOf(event.key) !== -1) {\n        return;\n      }\n      const matches = this.allowNegative ? event.key.match(this.regex.allDecimal) : event.key.match(this.regex.positiveDecimal);\n      if (!matches) {\n        event.preventDefault();\n      }\n  }\n\n  @HostListener('blur') onBlur($event) {\n    const amount = reverseFormatNumber(this.el.nativeElement.value, this.locale).replace(/^[^0-9]{2}..*/g, '');\n    this.el.nativeElement.value = amount;\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { MatCurrencyFormatDirective } from './mat-currency-format.directive';\n\n\n\n@NgModule({\n  declarations: [ MatCurrencyFormatDirective],\n  imports: [\n  ],\n  exports: [MatCurrencyFormatDirective ]\n})\nexport class MatCurrencyFormatModule { }\n"]}